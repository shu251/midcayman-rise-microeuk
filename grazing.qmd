---
title: "Protistan grazing analysis"
format: 
  html:
    code-fold: true
editor: visual
---

# Import & format data

Code below details how to import cell count (FLP count) information from Mid-Cayman Rise protistan grazing incubations and estimate grazing rate and cell biomass.

## Set up working R environment

```{r}
#| message: false
library(tidyverse); library(cowplot); library(broom)
```

## Import raw count data

Import eukaryotic cell count data from grazing experiments. In this section, we will calculate cells per ml from raw counts (Field of view, etc.) and use to estimate protist cell concentration. These will be used below in grazing experiment calculations.

```{r}
counts <- read.delim("input-data/euk-counts-compiled.txt", 
                     blank.lines.skip = FALSE,
                     na.strings = c("", "NA"),
                     stringsAsFactors = FALSE) # Import
counts[is.na(counts)] <- 0 # Change blanks to zeroes
```

Raw data table collected during microscopy count process. Below code reviews the structure of this raw data and updates column headers to be more 'R' friendly.

```{r}
# head(counts)
colnames(counts) <- c("DATE", "SAMPLE", "EXPID", "VOL", "MAG", "FOV", "nanoNoFLP", "microNoFLP", "nanoFLP", "microFLP", "NOTES", "DateCompiled"); colnames(counts)
```

> To count occurrence and number of FLP ingested by eukaryotic cells, the number of FLPs ingested was tallied and comma separated for multiple eukaryotic cells with FLP. These values need to separated and counted as 1 eukaryotic cell each, but retain the number of FLP per cell.

Parse raw microscopy count data.

```{r}
counts_occur <- counts %>%
  # remove incomplete
  filter(NOTES != "Not countable") %>% 
  # Count number of euk cells observed with FLPs (ex. if "1,2", 'occur' will = 2)
  mutate(nanoFLP_occur = as.numeric(str_count(nanoFLP, "[1-9]\\d*")), 
         microFLP_occur = as.numeric(str_count(microFLP, "[1-9]\\d*")),
         # Add number of euk cells with FLPs to those without for total number of euk cells
         nanoTOTAL = as.numeric(nanoNoFLP) + nanoFLP_occur, 
         microTOTAL = as.numeric(microNoFLP) + microFLP_occur,
         euksTOTAL = nanoTOTAL + microTOTAL) %>%
      data.frame
```

# Calculate cells per ml (euk)

Input data are the raw microscopy counts by FOV. Code below calculations cells/ml based on these values. Additionaly, variance and standard deviation are also calculated. Eukaryotic cells were also classified by size, where micro equates to \>20um and nano is \<20um. All counts were done at 100x magnification, confirm this: `unique(counts_occur$MAG)`.

Calculate cell concentration (cells/ml).

```{r}
counts_cellsml_all <- counts_occur %>%
  group_by(SAMPLE, EXPID, VOL) %>% #Calculate averages by sample
  summarise(totalFOV = n(), # Count total FOV counted
            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV
            nanoVar = var(nanoTOTAL), #Variance
            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation
            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks
            microVar = var(microTOTAL), 
            microSd = (2*(sqrt(microVar))), 
            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count
            euksVar = var(euksTOTAL), 
            euksSd = (2*(sqrt(euksVar))), 
            .groups = 'drop_last') %>%
  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab scope, it is 283.385):
  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.01 * 0.9)),
         microCONC = ((microAvg * 283.385)/(VOL * 0.01 * 0.9)),
         eukCONC = ((euksAvg * 283.385)/(VOL * 0.01 * 0.9))
         ) %>%
  # left_join(expmeta) %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  data.frame
```

> Replicates belong to the same experiment for either Bag or IGT incubation. Below, modify these names and label new column with bag or igt. And create an average across replicates.

Average cells/ml across replicates, pivot to long format

```{r}
counts_cellsml_avg <- counts_cellsml_all %>%
  select(Site, Name, TimePoint, Replicate, nanoCONC, microCONC, eukCONC) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>%
  select(-Replicate) %>%
  pivot_longer(cols = ends_with("CONC"), names_to = "VARIABLE", values_to = "CONCENTRATION") %>%
  group_by(Site, Name, TimePoint, EXP_TYPE, IGT_REP, VARIABLE) %>%
  # Calculate mean, variance, SD, min, and max
  summarise(MEAN = mean(CONCENTRATION),
            VAR = var(CONCENTRATION),
            SD = sd(CONCENTRATION),
            SEM =(sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),
            MIN = min(CONCENTRATION),
            MAX = max(CONCENTRATION),
            .groups = 'drop_last') %>%
  data.frame
```

NOTES on calculations:

*VAR* = takes the sum of the squares of each value's deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one.

*SD* = standard deviation of all values

*SEM* = standard deviation of sampling distribution; standard deviation divided by the square root of the sample size.

Save output file

```{r}
# save(counts_cellsml_all, counts_cellsml_avg, file = "input-data/raw-avg-eukcount.RData")
```

Reformat to parse experiment information type

```{r}
# Convert to long format and add column that reports IGT vs bag experiment
plot_euk_conc <- counts_cellsml_all %>%
  select(Site, Name, TimePoint, Replicate, ends_with("CONC")) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  pivot_longer(cols = ends_with("CONC"), names_to = "VARIABLE", values_to = "CONCENTRATION") %>%
  data.frame
```

Factor cell count data

```{r}
unique(plot_euk_conc$Name)
vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
plot_euk_conc$SiteOrder <- factor(plot_euk_conc$Site, levels = site_ids, labels = site_fullname)
plot_euk_conc$NameOrder <- factor(plot_euk_conc$Name, levels = vent_ids, labels = vent_fullname)
```

## Plot eukaryote cells per ml

@fig-boxplot-all reports all eukaryote cells per ml counts from all grazing assay counts..

```{r}
#| label: fig-boxplot-all
conc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, 
                                          y = CONCENTRATION, 
                                          group = NameOrder,
                                          fill = VARIABLE,
                                          shape = EXP_TYPE)) +
    geom_boxplot() + 
    # Do not color by time point
    geom_jitter(color = "black", size = 2, aes(fill = VARIABLE,
                                          shape = EXP_TYPE)) +
    scale_shape_manual(values = c(21,24)) +
    scale_fill_manual(values = c("#e7298a", "#fcbba1", "#c6dbef")) +
    coord_flip() +
    scale_y_log10() +
    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +
    facet_grid(SiteOrder ~ EXP_TYPE, space = "free", scale = "free") +
    theme_bw() + 
  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),
        strip.background = element_blank(),
        legend.position = "right",
        legend.title = element_blank()) +
    labs(x = "", y = bquote("Eukaryote cells "~mL^-1),
         title = "Distribution of all eukaryotic cell counts")

conc_boxplot
```

Eukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. \~300 cells/ml in background and plume compared to \~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.

> Boxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 \* interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)

> eukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another.


Plot eukaryote cell concentration over time.

```{r}
vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")

counts_cellsml_avg$SiteOrder <- factor(counts_cellsml_avg$Site, levels = site_ids, labels = site_fullname)
counts_cellsml_avg$NameOrder <- factor(counts_cellsml_avg$Name, levels = vent_ids, labels = vent_fullname)

# Plot trend line of euk cell count for all experiments
counts_cellsml_avg %>%
  filter(VARIABLE == "eukCONC") %>%
  unite("Experiment", NameOrder, IGT_REP, sep = "-", remove = FALSE) %>%
  ggplot(aes(x = TimePoint, y = MEAN, shape = EXP_TYPE, fill = NameOrder)) +
    geom_path(aes(group = Experiment)) +
    # geom_errorbar(aes(ymax = (MEAN + SD), ymin = (MEAN - SD)), width = 0.2) +
    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +
    geom_point(stat = "identity", size = 2, aes(shape = EXP_TYPE)) +
    scale_shape_manual(values = c(21, 24)) +
    scale_fill_brewer(palette = "Paired") +
    scale_y_log10() +
    facet_wrap(SiteOrder ~ EXP_TYPE, scales = "free") +
    theme_classic() + theme(strip.background = element_blank(), 
                            legend.title = element_blank(),
                            title = element_text(size = 7, face = "bold"),
                            axis.title = element_text(size = 9)) +
    labs(title = "Total euk cell counts for each experiment", y = bquote("Average eukaryote cells "~mL^-1), x = "Time point") +
  guides(fill=guide_legend(override.aes=list(shape=21)))
```

> note there is an overall drop in euk cells/ml in the final time point. Especially with the IGT samples. Take this into consideration

## Isolate T0 only counts for cells/ml plot

```{r}
vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")

plot_euk_format <- plot_euk_conc %>%
  filter(TimePoint == "T0" & (VARIABLE == "eukCONC")) %>%
  group_by(SiteOrder, NameOrder, TimePoint, EXP_TYPE, VARIABLE) %>%
  summarise(avg_conc = mean(CONCENTRATION),
            SEM_conc = (sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),
            .groups = "rowwise") %>%
  unite(EXPERIMENT, SiteOrder, NameOrder, EXP_TYPE, remove = FALSE) %>%
  data.frame

# Factor
plot_euk_format$Site_Order <- factor(plot_euk_format$SiteOrder, levels = site_fullname, labels = site_fullname)

# View(plot_euk_format)
euk_plot <- ggplot(plot_euk_format, aes(x = NameOrder, y = avg_conc, fill = Site_Order)) +
  geom_errorbar(aes(ymax = (avg_conc + SEM_conc), ymin = (avg_conc - SEM_conc)), width = 0.2) +
  geom_point(aes(fill = Site_Order), color = "black", stat = "identity", size = 3, shape = 23) +
  facet_grid(.~ Site_Order, space = "free", scales = "free") +
  scale_fill_manual(values = c("#1c9099", "#de2d26")) +
  theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 12, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 12),
           axis.title =element_text(color="black", size = 12),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank()) +
  labs(x = "", y = bquote("Eukaryote cells "~mL^-1),
       title = "")

euk_plot

```

Print table of eukaryote cell count information.

```{r}
plot_euk_format %>% 
  type.convert(as.is = TRUE) %>%
  filter(VARIABLE == "eukCONC") %>% 
  mutate(SAMPLE_TYPE = case_when(
    NameOrder == "Background" ~ "Background",
    NameOrder == "Plume" ~ "Plume",
    TRUE ~ SiteOrder
  )) %>%
  group_by(SAMPLE_TYPE) %>% 
  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),
           min_cellml = format(min(avg_conc), scientific = T),
           max_cellml = format(max(avg_conc), scientific = T),
           num = n())
```

```{r}
# save(counts_cellsml_all, counts_cellsml_avg, counts_occur, file = "output-data/MCR-cellcount-dfs")
```


# Bacteria & archaea cell counts

DAPI slide counts from prokaryotes from same sites. Import and compare.
```{r}
prok <- read.delim("input-data/prokINSITU-counts-compiled.txt")

insitu_proks <- prok %>% 
  filter(CELLML != "not countable") %>% 
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>% 
  group_by(SAMPLE, Site, Name) %>% 
  summarise(MEAN = mean(as.numeric(CELLML)),
            SD = sd(CELLML),
            SEM = (sd(CELLML)/sqrt(length(CELLML))),
            .groups = "rowwise") %>% 
  data.frame
```

## Cells per ml (prok)
Visualize counts

Factor site names, etc.
```{r}
insitu_proks$Name_order <- factor(insitu_proks$Name, levels = c("BSW", "Plume", "Quakeplume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole", "HotChimlet1", "ShrimpGulley", "SouthofHotChimlet", "SouthofLungSnack", "ArrowLoop", "Bartizan", "Rav1"), labels = c("Background","Plume", "Quakeplume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole", "Hot Chimlet #1", "Shrimp Gulley", "South of Hot Chimlet", "South of LungSnack", "Arrow Loop", "Bartizan", "Ravelin #1"))

site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")

insitu_proks$Site_order <- factor(insitu_proks$Site, levels = site_ids, labels = site_fullname)
```

```{r}
prok_plot <- ggplot(insitu_proks, aes(x = Name_order, y = MEAN)) +
  geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +
  geom_point(stat = "identity", shape = 23, aes(fill = Site), size = 3) +
  facet_grid(.~ Site_order, space = "free", scales = "free") +
  scale_fill_manual(values = c("#de2d26", "#1c9099")) +
  labs(y = bquote("Prokaryote cells "~mL^-1), x = "", title = "") +
  scale_y_log10() +
  theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 12, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 12),
           axis.title =element_text(color="black", size = 12),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank())
prok_plot
```


### Combine with previous MCR cell counts
Compare _in situ_ prokaryote cell counts from 2020 to previous years

```{r}
prok_prev <- read.csv("input-data/cellcount_previousyr.csv")

prok_prev_formatted <- prok_prev %>% 
  mutate(VENTSITE = case_when(
    grepl("Piccard", Site) ~ "Piccard",
    grepl("Von Damm", Site) ~ "VD"
  )) %>% 
  filter(!is.na(YEAR)) %>% #QC of 
  # filter(cells_ml != "NC") %>% 
  # filter(cells_ml != "") %>% 
  # filter(cells_ml != "no data") %>% 
  type.convert(as.is = TRUE, numerals = "no.loss") %>%
  select(YEAR, VENTSITE, NAME = Name, REP=Replicate, CELLML = cells_ml, ORIGSAMPLE = Orig_vent_site_ID, ID_number, Origin)
```

Re-import 2020 data to compare.
```{r}
# Re-import 2020
prok <- read.delim("input-data/prokINSITU-counts-compiled.txt")
# View(prok)
proks_allyrs <- prok %>% 
  separate(SAMPLE, c("VENTSITE", "NAME"), sep = "-", remove = FALSE) %>% 
  mutate(YEAR = 2020) %>%
  select(YEAR, VENTSITE, NAME, REP, CELLML, ORIGSAMPLE = BAC) %>% 
  bind_rows(prok_prev_formatted %>% select(-ID_number, -Origin)) %>% 
  type.convert(as.is = TRUE) %>%
  # Remove not countable or not data samples:
  filter(CELLML != "NC") %>%
  filter(CELLML != "") %>%
  filter(CELLML != "no data") %>%
  filter(CELLML != "not countable") %>% 
  data.frame

# View(proks_allyrs)
# View(as.data.frame(unique(proks_allyrs$NAME)))

vent_order <- c("BSW","Plume","Quakeplume","NearsummitBeebee","MainOrifice","NearMainOrifice","Rav1","HotChimlet1","HotChimlet","SouthofHotChimlet","NearHotChimlet","HotCracks1","HotCracks2","ShrimpHole","ShrimpHole(X18)","X18","X19","SouthofLungSnack","TwinPeaks","OMT","WhiteCastle","GingerCastle","ArrowLoop","Bartizan","LotsOShrimp","MustardStand","ShrimpButtery","ShrimpCanyon","ShrimpGulley","Shrimpocalypse","ShrimpVegas")
vent_names <- c("Background","Plume","Quakeplume","Near summit Beebee Vents Mound","Main Orifice","Near Main Orifice","Ravelin #1","Hot Chimlet #1","Hot Chimlet","South of Hot Chimlet","Near Hot Chimlet","Hot Cracks #1","Hot Cracks #2","Shrimp Hole","Shrimp Hole (X-18)","X-18","X-19","South of Lung Snack","Twin Peaks","Old Man Tree","White Castle","Ginger Castle","Arrow Loop","Bartizan","Lots O Shrimp","Mustard Stand","Shrimp Buttery","Shrimp Canyon","Shrimp Gulley","Shrimpocalypse","Shrimp Vegas")
proks_allyrs$NAME_ORDER <- factor(proks_allyrs$NAME, levels = vent_order, labels = vent_names)
proks_allyrs$VENTSITE_ORDER <- factor(proks_allyrs$VENTSITE, levels = c("Piccard", "VD"), labels = c("Piccard", "Von Damm"))
```

Plot by year.
```{r}
# pdf("compare-across-yr-cellcount-04052021.pdf", h = 8, w = 7)
ggplot(proks_allyrs, aes(x = NAME_ORDER, y = as.numeric(CELLML), fill = factor(YEAR), shape = VENTSITE_ORDER)) +
  geom_point(stat = "identity", aes(fill = factor(YEAR)), size = 3) +
  scale_shape_manual(values = c(21,23)) +
  coord_flip() +
  facet_grid(VENTSITE_ORDER ~ ., space = "free", scales = "free") +
  scale_y_log10() +
  scale_fill_manual(values = c("#1c9099", "#ffeda0", "#fc4e2a")) +
  theme_linedraw() +
  theme(axis.text = element_text(color = "black", size = 10),
        strip.background = element_blank(),
        strip.text.y = element_text(color = "black", size = 11, hjust = 0, vjust = 1),
        legend.title = element_blank(),
        legend.position = "bottom",
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "grey")) +
  labs(y = bquote("Cells "~mL^-1), x = "") +
  guides(fill=guide_legend(override.aes=list(shape=22)))
# dev.off()
```


# Estimate grazing effect
Calculate FLP per eukaryotic cell over time. Goal is to make these calculations and then determine best fit line. Slope of best fit line is the grazing rate. Need to take into account euk cells with FLPs and then the euk cells withOUT FLPs, these will be zeroes to take into account for FLPs/euk averages.

```{r}
load("output-data/MCR-cellcount-dfs", verbose = TRUE)
```

## Determine FLP per euk cell

Isolate euk cell counts with FLPs (comma separated for counts). These need to be separated into rows, use ```counts_occur``` data frame from above.

```{r}
# Select nano and micro counts with FLPs
counts_sepflp <- counts_occur %>% 
  filter(!NOTES == "Discard") %>% 
  filter(!(NOTES == "DTAF stain prevented counts of FLP, Euks only")) %>%
  select(DATE, SAMPLE, EXPID, VOL, MAG, FOV, nanoFLP, microFLP) %>%
  # Inputs that are comma separated will be split into a new row
  separate_rows(microFLP, sep = ",", convert = TRUE) %>%
  separate_rows(nanoFLP, sep = ",", convert = TRUE) %>%
  # Replace NAs with zeroes
  replace_na(list(microFLP = 0, nanoFLP = 0)) %>% 
  data.frame
```

_optional gut check of data table modification_
```{r}
## Check, see FOV 23, separated into rows.
# View(counts_sepflp %>%
# filter(SAMPLE == "VD-Rav2" & EXPID == "T10-Rep1"))
# View(counts_occur %>%
# filter(SAMPLE == "VD-Rav2" & EXPID == "T10-Rep1"))
```


Isolate counts that are >0, so only eukaryote cells that were observed to have FLPs are included. Then calculate FLP per euk cell by dividing by 1 (each row is a euk cell, based on data transformation above).
```{r}
counts_flp <- counts_sepflp %>%
  select(SAMPLE, EXPID, nano_size = nanoFLP, micro_size = microFLP) %>%
  pivot_longer(cols = ends_with("_size"), names_to = "SizeFrac", values_to = "num_of_FLP") %>%
  filter(num_of_FLP > 0) %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>%
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  summarise(total_FLP = sum(num_of_FLP),
            total_euks_wflp = n(),
            .groups = "rowwise") %>%
  data.frame
```

OUTPUT COLUMNS:
(1) total_FLP = sum of FLPs found inside a euk cell
(2) total_euks_wflp = number of euks counted with ingested FLP

Repeat above operation for euk cells without any FLP. Here, subset total number of observations where there was a euk cell without FLP. These need to be counted as euk cell without an FLP.

> Below code repeats process and compiles with other FLP/euk cell data.

Repeat above process for euk cells without FLPs (0 FLP per euk cell needs to be included in overall average).
```{r}
counts_flp_compiled <- counts_occur %>% 
  filter(!(NOTES == "Discard")) %>% #Discard bad counts
  filter(!(NOTES == "DTAF stain prevented counts of FLP, Euks only")) %>%
  type.convert(as.is = TRUE) %>% #modify str() for columns
  select(SAMPLE, EXPID, nano_size = nanoNoFLP, micro_size = microNoFLP) %>% #select non flp
  pivot_longer(cols = ends_with("_size"), names_to = "SizeFrac", values_to = "num_of_euks") %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>% 
  # filter(num_of_euks > 0) %>% # Remove observed zero counts
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  summarise(total_euks_noFLP = sum(num_of_euks),
            .groups = "rowwise") %>%
  # Join with FLP count information
  ## SAMPLE, EXPID, EXPTYPE, IGTREP, and SizeFrac variables should match
  left_join(counts_flp) %>% # Join with the counts of FLP per euk cell
  replace_na(list(total_FLP = 0, total_euks_wflp = 0)) %>% #Replace NAs with zero
  data.frame
```

Extract total eukaryote cell value by adding across nano and micro. Then combine the nano and micro cell counts.

```{r}
counts_flp_compiled_all <- counts_flp_compiled %>% 
  # Exclude size fraction:
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP) %>%
  summarise(total_euks_noFLP = sum(total_euks_noFLP),
            total_FLP = sum(total_FLP), 
            total_euks_wflp = sum(total_euks_wflp),
            .groups = "rowwise") %>% 
  add_column(SizeFrac = "total_euks") %>% #Add SizeFrac column
  bind_rows(counts_flp_compiled) %>% # Combine back with flp compiled list
  data.frame
```

## Calculate FLP per euk cell calculation

First need to import and compile with metadata to get exact timing of experiments.
```{r}
metadata <- read.delim("input-data/flp-exp-metadata-compiled.txt")
exp_metadata <- read.csv("input-data/flp_exp_metadata.csv")
```

Add metadata
```{r}
counts_flp_calcs_all <- counts_flp_compiled_all %>% 
  # Add in metadata
  # IGTXb are replicate counts, include them as replicates!
  separate(EXPID, c("TimePoint", "REP"), sep = "-", remove = FALSE) %>% mutate(
    REP = ifelse(grepl("IGT5b", REP), "IGT5", REP),
    REP = ifelse(grepl("IGT4b", REP), "IGT4", REP),
    REP = ifelse(grepl("Bag", EXP_TYPE), "Bag", REP)) %>% 
  left_join(metadata, by = c("SAMPLE" = "SAMPLE", "TimePoint" = "TimePoint", "REP" = "REP")) %>% 
  left_join(exp_metadata, by = c("SAMPLE" = "SAMPLE", "REP" = "REP")) %>% 
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate_ID"), sep = "-", remove = FALSE) %>%
  ## Treat repeated IGT counts completely separate
  # group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  ## Treat repeated IGT counts as replicates (e.g., IGT4b and IGT4 == IGT4)
  group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, REP, SizeFrac) %>%
  # FLPperEuk is the total FLP divided by the total number of euk cells counted
  mutate(FLPperEuk = total_FLP/(sum(total_euks_noFLP, total_euks_wflp))) %>%
  unite("Experiment", Name, REP, sep = "-", remove = FALSE) %>%
  data.frame
```

> COLS: Timepoint, Minutes = time point label, actual incubated minutes

> COLS: Replicate_ID, REP, and IGT_REP = full replicate identified for IGTs and Bags, designation of biological replicates, and designation of technical replicates for IGT experiments

## Calculate linear regression to obtain slope
Use ```lm()``` function in R to calculate linear regression for each experiment. Slope equates to grazing rate. Function inputs the FLP per euk cell data, performs regression and then adds a column for slope and r-squared values.

Function to estimate slope. Uses broom and tidymodels, then extracts slope.
```{r}
calculate_lm <- function(df){
  regression_1 <- df %>%
  type.convert(as.is = TRUE) %>%
  ## Keep technical replicates separate for IGTs
  # group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%
  # nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%
  ## Combine technical replicates for IGTs
  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%
  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%
  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),
         tidied = map(lm_fit, tidy)) %>% 
  unnest(tidied) %>% 
  # select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, term, estimate) %>%
  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, term, estimate) %>% 
  pivot_wider(names_from = term, values_from = estimate) %>% 
  data.frame
  # Reset column names
  colnames(regression_1) <- c("SAMPLE", "Site", 
                              "Experiment", "Name", "REP",
                              "SizeFrac", "INTERCEPT", "SLOPE")
  # Repeat broom model to get R2
  out_regression <- df %>%
  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%
  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%
  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),
         glanced = map(lm_fit, glance)) %>% 
  unnest(glanced) %>% 
  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, r.squared) %>% 
  right_join(regression_1) %>% 
  right_join(df) %>% 
  data.frame
  out_regression$SITE <- factor(out_regression$Site, levels = c("VD", "Piccard"))
  out_regression$TYPE <- factor(out_regression$EXP_TYPE, levels = c("Bag", "IGT"))
  return(out_regression)
}
```

> Note that an error may occur when running the below function. This is due to the fact that some experiments did not have replicates.

Apply to all data to obtain slope.
```{r}
calcs_wslope_regression <- calculate_lm(counts_flp_calcs_all)
```

_gut check_ linear regression work. Use below commands out to recalculate one linear regression. Above function uses the ```nest()``` capability of tidyverse. Below, one experiment is subset to check the value.
```{r}
# Extract only plume-bag experiment from VD
# tmp_plume <- filter(counts_flp_calcs_all, Experiment == "Plume-Bag") %>% filter(Site == "VD") %>% filter(SizeFrac == "total_euks")
# tmp_plume # View
# Perform linear regression
# lm_out <- lm(FLPperEuk ~ Minutes, data = tmp_plume)
# # Check output
# summary(lm_out)
# lm_out$coefficients #Intercept=intercept #Minutes = SLOPE
# # Compare with nested function output
# filter(calcs_wslope_regression, Experiment == "Plume-Bag") %>% filter(Site == "VD") %>% filter(SizeFrac == "total_euks") %>% head
```

### Plot linear regression trend
Plot all bag experiments with estimated slope.
```{r}
# | fig-width: 7
# | fig-height: 8
calcs_wslope_regression %>% 
  filter(SizeFrac == "total_euks") %>% 
  # filter(TYPE != "IGT") %>% 
  unite(EXPERIMENT, SITE, Experiment, sep = " ", remove = FALSE) %>% 
  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +
  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = "black", linetype = "dashed", size = 1) +
  geom_point(stat = "identity", color = "black", 
             size = 2, aes(shape = TYPE, fill = Site)) +
  scale_shape_manual(values = c(21, 24)) +
  scale_fill_manual(values = c("#de2d26", "#1c9099")) +
  labs(x = "Minutes", y = bquote("FLP"~eukaryote^-1), title = "Grazing experiment regression") +
  facet_wrap(. ~ EXPERIMENT) +
  # Report r.squared
  geom_text(aes(x = 42, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), 
            vjust = 1, hjust = 0, size = 3) +
  theme_bw() + 
  theme(strip.background = element_blank(),
        strip.text = element_text(color = "black", size = 7),
                     legend.title = element_blank(),
                     legend.position = "right")
```
Data points represent the FLP per euk cells (based on total eukaryote cells counts). Y-axis represents the duration of incubation (in minutes). The dashed purple line reprents the slope and intercept of the experiment.


## Remove IGT Tf time points.
IGT experiment results appear to have bottle effect, especially in the final time point. Additionally, due to the lack of biological replicates in the IGT experiments, technical replicates are treated as biological replicates in the regression below.

```{r}
IGT_lm_woTf <- counts_flp_calcs_all %>% 
  # Select only IGT experiments with total eukaryotes, remove Tf (T3)
  filter(SizeFrac == "total_euks") %>% 
  filter(EXP_TYPE == "IGT" & !(TimePoint == "T3")) %>% 
  add_column(IGT_cor = "rm Tf") %>% 
  data.frame

# Recalculate lm(), keep replicates separate
igt_regression_noTf <- calculate_lm(IGT_lm_woTf) # Recalculate
```
Plot IGT grazing experiments with newly calculated grazing effect.
```{r}
igt_regression_noTf %>% 
  # filter(SizeFrac == "total_euks") %>% 
  # filter(TYPE != "IGT") %>% 
  unite(EXPERIMENT, SITE, Experiment, sep = " ", remove = FALSE) %>% 
  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +
  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = "black", linetype = "dashed", size = 1) +
  geom_point(stat = "identity", color = "black", 
             size = 2, aes(shape = TYPE, fill = Site)) +
  scale_shape_manual(values = c(24)) +
  scale_fill_manual(values = c("#de2d26", "#1c9099")) +
  labs(x = "Minutes", y = bquote("FLP"~eukaryote^-1), title = "Grazing experiment regression") +
  facet_wrap(. ~ EXPERIMENT) +
  # Report r.squared
  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), 
            vjust = 1, hjust = 0, size = 3) +
  theme_bw() + 
  theme(strip.background = element_blank(),
        strip.text = element_text(color = "black", size = 7),
                     legend.title = element_blank(),
                     legend.position = "right")
```

> results are more consistent across experiments.


## Compile and save grazing experiment results

```{r}
calcs_wslope_regression_update <- calcs_wslope_regression %>% 
  filter(TYPE != "IGT") %>% 
  bind_rows(igt_regression_noTf %>% select(-IGT_cor)) %>% 
  data.frame

# Factor
vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
# Factor for shipboard
calcs_wslope_regression_update$SiteOrder <- factor(calcs_wslope_regression_update$Site, levels = site_ids, labels = site_fullname)
calcs_wslope_regression_update$NameOrder <- factor(calcs_wslope_regression_update$Name, levels = vent_ids, labels = vent_fullname)

# View(calcs_wslope_regression_update)
# write.csv(calcs_wslope_regression_update, file = "output-data/estimated-slopes-grazingexp.csv")
```

# Check FLP control experiments
All incubations had control experiments run alongside them. This was to ensure added FLP did not decrease or change in concentration over time.

```{r}
bac_ctrl <- read.delim("input-data/bac-counts-compiled.txt")
# dim(bac_ctrl)
dtaf <- bac_ctrl %>% 
  separate(SampleID, c("exp", "Replicate", "TimePoint"), sep = "-", remove = FALSE) %>% 
  separate(Site, c("Site", "Name"), sep = "-", remove = FALSE) %>% 
  filter(Stain == "DTAF") %>% 
  data.frame
# View(bac_ctrl)
# head(dtaf)

dtaf_avg <- dtaf %>% 
  group_by(TimePoint, Stain, Site, Name) %>% 
  summarise(Avg_cellsperml = mean(Cells.ml)) %>% 
  data.frame
```

## Bag grazing experiment controls
```{r}
dtaf_avg %>% 
  filter(Site != "IGT") %>% 
  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +
  geom_rect(data = filter(dtaf_avg, TimePoint == "T0", Site != "IGT"), aes(
                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),
                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = "black") +
  geom_line(aes(group = Name)) +
  geom_point(stat = "identity", aes(shape = Site, fill = Name), size = 2) +
  # scale_fill_manual(values = c("black","#9970ab", "#5aae61")) +
  facet_wrap(Name ~ Site) +
  scale_y_log10() +
  theme_bw() + theme(strip.background = element_blank(), 
                          legend.title = element_blank(),
                     axis.text = element_text(size = 10, color = "black"),
                          title = element_text(size = 10, face = "bold"),
                          axis.title = element_text(size = 9)) +
  labs(title = "FLP counts for controls", y = bquote("Log FLP "~mL^-1), x = "Time point")
```
## IGT experiment controls
Repeat for IGT experiments.
```{r}
dtaf_avg %>% 
  filter(Site == "IGT") %>% 
  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +
  geom_rect(data = filter(dtaf_avg, TimePoint == "T0", Site == "IGT"), aes(
                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),
                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = "black") +
  geom_line(aes(group = Name)) +
  geom_point(stat = "identity", aes(shape = Site, fill = Name), size = 2) +
  # scale_fill_manual(values = c("black","#9970ab", "#5aae61")) +
  facet_wrap(Name ~ Site) +
  scale_y_log10() +
  theme_bw() + theme(strip.background = element_blank(), 
                          legend.title = element_blank(),
                     axis.text = element_text(size = 10, color = "black"),
                          title = element_text(size = 10, face = "bold"),
                          axis.title = element_text(size = 9)) +
  labs(title = "FLP counts for controls", y = bquote("Log FLP "~mL^-1), x = "Time point")
```

# Generate complete table with grazing rates and values

```{r}
# head(calcs_wslope_regression_update)
# View(calcs_wslope_regression_update)
# Generate final table
bsw <- c("Plume", "Background")

table_grazerate <- calcs_wslope_regression_update %>% 
  filter(SizeFrac == "total_euks") %>% 
  select(SAMPLE, FLUID_ORIGIN, CRUISE_SAMPLE, SiteOrder, NameOrder, SLOPE, EXP_TYPE, EXP_REPS, EXP_VOL, CTRL_REPS, CTRL_VOL, Site=SiteOrder, Name=NameOrder, RATE = SLOPE, Minutes) %>% 
  distinct() %>% 
  group_by(SAMPLE, FLUID_ORIGIN, CRUISE_SAMPLE, EXP_TYPE, EXP_REPS, EXP_VOL, CTRL_REPS, CTRL_VOL, Site, Name, RATE) %>% 
  summarise(TimePoints = str_c(Minutes, collapse = ", ")) %>% 
  ungroup() %>%
  mutate(GRAZE_RATE = case_when(
    RATE < 0 ~ 0,
    TRUE ~ RATE
  ),
  type = case_when(
    Name == "Plume" ~ "Plume",
    Name == "Background" ~ "Background",
    EXP_TYPE == "IGT" ~ "Vent-IGT",
    EXP_TYPE == "Bag" ~ "Vent-Bag"
  )) %>%
  data.frame
```
Amend table with estimated FLP concentration
```{r}
# head(table_grazerate)
dtaf_igt <- 5352.8278 # Manually insert FLP concentration for IGT experiments; this value is estimated from how IGT FLP spike-ins were calculated
# 
table_grazerate_wflp <- bac_ctrl %>%
  filter(FLP_t0 == "use") %>%
  add_column(EXP_TYPE = "Bag") %>%
  group_by(Site, EXP_TYPE) %>%
  summarise(FLP_conc = mean(Cells.ml)) %>%
  right_join(table_grazerate, by = c("Site" = "SAMPLE", "EXP_TYPE" = "EXP_TYPE")) %>%
  mutate(FLP_conc = ifelse(EXP_TYPE == "IGT", dtaf_igt, FLP_conc)) %>%
  select(everything(), FIELD = `Site.y`) %>% 
  data.frame
```

Introduce factors in table for visualizations
```{r}
type_order <- c("Vent-Bag", "Vent-IGT", "Plume", "Background")
table_grazerate_wflp$TYPE <- factor(table_grazerate_wflp$type, levels = type_order)
vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
vent_colors <- c("#0868ac", "#41ab5d", "#e7298a", "#c994c7", "#fc4e2a", "#fed976", "#6a51a3", "#ffeda0", "#a1d99b")
names(vent_colors) <- vent_fullname
table_grazerate_wflp$NAME <- factor(table_grazerate_wflp$Name, levels = vent_fullname)
```

## Plot FLP/grazer /minute
```{r}
# svg("", h =, w = )
grazing_min_plot <- table_grazerate_wflp %>% 
  ggplot(aes(y = GRAZE_RATE, x = NAME, shape = EXP_TYPE, fill = FIELD)) +
  geom_jitter(stat = "identity", aes(shape = EXP_TYPE, fill = FIELD),
              color = "black", size = 3, width = 0.3) +
  scale_shape_manual(values = c(21, 24)) +
  scale_fill_manual(values = c("#de2d26", "#1c9099")) +
  facet_grid(.~Site, space = "free", scales = "free") +
  # coord_flip() +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 12, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 12),
           axis.title =element_text(color="black", size = 12),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
       shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = bquote("FLP " ~grazer^-1 ~min^-1))
# dev.off()
grazing_min_plot
```


Amend table with eukaryote and prokaryote estimated biomass. 

```{r}
# Subset the average in situ prok cells/ml for non-background samples
tmp <- filter(insitu_proks, Name != "BSW", Name != "Plume") %>% select(MEAN)
avg_insitu <- mean(tmp$MEAN)
# head(insitu_proks)

# Add to master table with data
table_grazerate_wflp_wprok <- insitu_proks %>% 
  select(Site = SAMPLE, Prok_conc = MEAN, Prok_sem = SEM) %>% 
  right_join(table_grazerate_wflp) %>% 
  mutate(Prok_conc = ifelse(is.na(Prok_conc), avg_insitu, Prok_conc)) %>% 
  data.frame

table_grazerate_wflp_wprok_weuk <- plot_euk_format %>% 
  select(Name = NameOrder, FIELD = SiteOrder, euk_conc = avg_conc, EXP_TYPE, euk_conc_sem = SEM_conc) %>%
  right_join(table_grazerate_wflp_wprok) %>% 
  select(FIELD, NAME = Name, EXP = EXP_TYPE, SAMPLE = Site, RATE_min = GRAZE_RATE, FLP_ml = FLP_conc, PROK_ml = Prok_conc, PROK_sem = Prok_sem, EUK_ml = euk_conc, EUK_sem = euk_conc_sem, TimePoints, EXP_REPS, EXP_VOL,  CTRL_REPS, CTRL_VOL) %>%
  data.frame
```

# Grazing rate calculations
Based on Unrein et al. 2007, we use the estimated grazing rate, in situ prok abundance, in situ euk abundance, and the concentration of FLP to make additional estimates. 

```{r}
table_wcalcs <- table_grazerate_wflp_wprok_weuk %>%
  # Ingestion rate per hour
  mutate(RATE_hr = (RATE_min * 60),
         RATE_day = (RATE_hr * 24), #Compare to GR?
         # FLP concentration per L
         FLP_L = (FLP_ml * 1000),
         # mL per grazer per hr
         CLEARANCE_RATE_ml = (RATE_hr/FLP_ml),
         # nL per grazer per hour
         CLEARANCE_RATE_nL = ((RATE_hr/FLP_ml)/1.00E+6), 
         # proks per grazer per hr
         SPEC_GRAZE_RATE_hr = (CLEARANCE_RATE_ml * PROK_ml), 
         # proks per grazer per day
         GRAZE_RATE_DAY = (24 * SPEC_GRAZE_RATE_hr),
         # proks per ml per hr
         GRAZING_EFFECT_hr = (SPEC_GRAZE_RATE_hr * EUK_ml),
         GRAZING_EFFECT_hr_min = (SPEC_GRAZE_RATE_hr * (EUK_ml - EUK_sem)),
         GRAZING_EFFECT_hr_max = (SPEC_GRAZE_RATE_hr * (EUK_ml + EUK_sem)),
         # cells per ml per day
         GRAZING_EFFECT_day = ((SPEC_GRAZE_RATE_hr * 24) * EUK_ml),
         # Percentage per day
         BAC_TURNOVER_PERC = 100*(GRAZING_EFFECT_day / PROK_ml),
         BAC_TURNOVER_PERC_min = 100*(GRAZING_EFFECT_day / (PROK_ml - PROK_sem)),
         BAC_TURNOVER_PERC_max = 100*(GRAZING_EFFECT_day / (PROK_ml + PROK_sem))) %>% 
  data.frame
# View(table_wcalcs)
```

Explanation of units for table with calculated values.

* RATE_min & RATE_hr = Grazing rate as 'FLPs per grazer per minute' and per hour

* CLEARANCE_RATE = ml or nL per grazer per hour

* SPEC_GRAZE_RATE (Specific grazing rate) = Prokaryotes per grazer per hour

* GRAZING EFFECT = bacteria per ml per hour

* Bacterial turnover rate = % per day

### gt table option
```{r}
# colnames(table_wcalcs)
# bkgd <- c("Background", "Plume")
# 
# library(gt)
# 
# table_wcalcs %>% 
#   mutate(loc_type = case_when(
#     NAME %in% bkgd ~ "Background",
#     TRUE ~ "Vent fluid"
#   )) %>%
#   # group_by(loc_type, SITE, EXP) %>% 
#   select(-SAMPLE) %>% 
#   gt(
#     groupname_col = c("FIELD", "EXP", "loc_type"),
#     rowname_col = "NAME"
#   ) %>% 
#   cols_label(RATE_min = html("minute<sup>-1</sup>"),
#              RATE_hr = html("hour<sup>-1</sup>"),
#              RATE_day = html("day<sup>-1</sup>"),
#              EXP_REPS = html("# of incubations"),
#              FLP_ml = html("FLP ml<sup>-1</sup>"),
#              PROK_ml = html("Prokaryote cells ml<sup>-1</sup>"),
#              PROK_sem = html("SEM prokaryote cells ml<sup>-1</sup>"),
#              EUK_ml = html("Eukaryote cells ml<sup>-1</sup>"),
#              EUK_sem = html("SEM eukaryote cells ml<sup>-1</sup>"),
#              FLP_L = html("FLP L<sup>-1</sup>"),
#              CLEARANCE_RATE_ml = html("ml grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              CLEARANCE_RATE_nL = html("nl grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              SPEC_GRAZE_RATE_hr = html("Prokaryote grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              GRAZE_RATE_DAY = html("Prokaryote grazer<sup>-1</sup> day<sup>-1</sup>"),
#              GRAZING_EFFECT_hr = html("Prokaryote ml<sup>-1</sup> hr<sup>-1</sup>"),
#              GRAZING_EFFECT_hr_min = html("MIN"),
#              GRAZING_EFFECT_hr_max = html("MAX"),
#              GRAZING_EFFECT_day = html("Prokaryote ml<sup>-1</sup> day<sup>-1</sup>"),
#              BAC_TURNOVER_PERC = html("Bacteria turnover % day<sup>-1</sup>"),
#              BAC_TURNOVER_PERC_min = html("MIN"),
#              BAC_TURNOVER_PERC_max = html("MAX")) %>% 
#   tab_spanner(
#     label = (html("Turnover")),
#     columns = starts_with("BAC_TURNOVER")
#   ) %>% 
#   tab_spanner(
#     label = (html("Grazing rate: prokaryote cells consumed")),
#     columns = starts_with("GRAZING_EFFECT")
#   ) %>% 
#   tab_spanner(
#     label = (html("ml grazer<sup>-1</sup> hr<sup>-1</sup>")),
#     columns = c(CLEARANCE_RATE_ml, CLEARANCE_RATE_nL)
#   ) %>% 
#   tab_spanner(
#     label = html("Specific grazing rate"),
#     columns = c(SPEC_GRAZE_RATE_hr, GRAZE_RATE_DAY)
#   ) %>% 
#   tab_spanner(
#     label = (html("FLPs grazer<sup>-1</sup>")),
#     columns = c(RATE_hr, RATE_min, RATE_day),
#   ) %>% 
#   tab_spanner(
#     label = (html("Cell counts")),
#     columns = c(PROK_ml, PROK_sem, EUK_ml, EUK_sem, FLP_L, FLP_ml),
#   ) %>% 
#   tab_source_note(source_note = "NAs indicate values were unavailable.
#                   Zero values for rates indicate no grazing pressure detected.") %>% 
#   fmt_scientific(columns = everything()) %>% 
#   tab_options(
#     table.font.size = 12,
#     table.border.top.color = "black",
#     column_labels.border.bottom.color = "black",
#     column_labels.border.bottom.width= px(3),
#     table.width = pct(100))
```


## Carbon biomass 

References for estimating biovolume _Pernice, M.C., Forn, I., Gomes, A., Lara, E., Alonso-Sáez, L., Arrieta, J.M., et al. (2015) Global abundance of planktonic heterotrophic protists in the deep ocean. ISME J 9: 782–792._

```{r}
# Import manual biovolume measurements
biov <- read.delim("input-data/biovol-euk-12-10-2020.txt")
# head(biov)

# Calculate volume
biov_calc <- biov %>% 
  mutate(SizeFrac = case_when(
    h >= 20 ~ "micro",
    TRUE ~ "nano")) %>% 
  mutate(Volume = ((pi/6) * (d^2) * d)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999
  mutate(pgC_cell = (0.216 * (Volume^0.939))) %>% # Calculate Cell biomass in pg C per cell # Menden-Deuer and Lessard 2000
  data.frame
# View(biov_calc)
biov_calc
```
> Volume is reported as um^3

```{r Summary of biovolumes}
# Volume by experiment type
biov_calc %>% 
  group_by(EXP) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))
# Volume by euk size
biov_calc %>% 
  group_by(SizeFrac) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))
# Volume by site
biov_calc %>% 
  group_by(VENT_BSW) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))
# head(biov_calc)
euk_vol <- mean(biov_calc$Volume);euk_vol # in um^3
euk_carbon <- mean(biov_calc$pgC_cell); euk_carbon # in pg C per cell
euk_carbon_min <- min(biov_calc$pgC_cell); euk_carbon_min
euk_carbon_max <- max(biov_calc$pgC_cell); euk_carbon_max
# euk_carbon
```

Avg euk biomass pg C per individual cell == ```{r}euk_carbon```

## Compare carbon biomass with literature

Compare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10^7 µm^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell. 

Import the heterotroph species volume and carbon content to compare to my measured values.

```{r}
# Hu-measured
range(biov_calc$Volume)
range(biov_calc$pgC_cell)

c_prev <- read.delim("input-data/md-lessard-2000.txt") # Table 2, heterotrophs only

# combine and plot
carbon_compare <- c_prev %>% 
  add_column(source = "Menden-Deuer Lessard") %>% 
  select(source, Volume = vol, pgC_cell) %>% 
  rbind(biov_calc %>% add_column(source = "MCR") %>% select(source, Volume, pgC_cell)) %>% 
    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +
      geom_point(aes(fill = source), shape = 23, color = "black", size = 3) +
      scale_y_log10() + scale_x_log10() +
      labs(title = "Compare literature to measured cell volume & C content",
           x = bquote("Volume" ~µm^-3),
           y = bquote("pg C" ~cell^-1)) +
      theme_bw() + theme(legend.title = element_blank(),
                         axis.title = element_text(size = 14),
                         axis.text = element_text(size = 14),
                         legend.text = element_text(size = 14))

carbon_compare

euk_carbon_lit_mean <- mean(c_prev$pgC_cell)
euk_carbon_lit_min <- min(c_prev$pgC_cell)
euk_carbon_lit_max <- max(c_prev$pgC_cell)
```

Upon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall. 

Find lowest estimates or protist carbon, benthic estimates, and others?
How does it compare to my measurements?

### Carbon biomass for prokaryotes
Below adding in biomass estimates from prokaryotes and protists.
```{r Incorporate prokaryote carbon estimates}
bac_carbon_ug <- (86)*(1.00E-9) # From Derived from Morono et al. 2011 
# bac_carbon_ug
bac_carbon_ug_2 <- (173)*(1.00E-9) # Derived from McNichol et al. 2018; LOFERER-KRO ̈ ßBACHER, J. KLIMA & R. PSENNER 1998
# table_wcalcs
```

Amend all to table
Incorporate calculations that include biomass of population and ug C consumed. For rate measurements, only incorporate the Morono et al. 2011 biomass for prokaryotes. This way it is on the lower end and is comparable to Gorda Ridge work.

```{r}
bsw <- c("Plume", "Background")

table_wcalcs_biomass <- table_wcalcs %>% 
  add_column(euk_C_ug_Hu = (euk_carbon / (1.00E+06))) %>% # Convert to ug from pg
  add_column(euk_C_ug_lit = (euk_carbon_lit_mean / (1.00E+06))) %>% # literature
  add_column(bac_C_ug = bac_carbon_ug) %>% 
  add_column(bac_C_ug_2 = bac_carbon_ug_2) %>%
  # Grazing rate in ug C per bac per day
  mutate(RATE_ugCbac_pergrazer_perday = (RATE_hr * 24 * bac_C_ug), # Grazing rate as ug C per grazer per day
         # % of cell carbon per day
         SPEC_INGESTION_RATE = (RATE_ugCbac_pergrazer_perday / euk_C_ug_Hu),
         SPEC_INGESTION_RATE_lit = (RATE_ugCbac_pergrazer_perday / euk_C_ug_lit),
         Prok_biomass = PROK_ml * bac_carbon_ug,
         Euk_biomass_Hu = EUK_ml * euk_C_ug_Hu,
         Euk_biomass_lit = EUK_ml * euk_C_ug_lit,
         Prok_biomass_L = PROK_ml * bac_carbon_ug * 1000,
         Euk_biomass_Hu_L = EUK_ml * euk_C_ug_Hu * 1000,
         Euk_biomass_lit_L = EUK_ml * euk_C_ug_lit * 1000,
         # Repeat with SEM values
         Prok_biomass_sem = PROK_sem * bac_carbon_ug,
         Euk_biomass_Hu_sem = EUK_sem * euk_C_ug_Hu,
         Euk_biomass_lit_sem = EUK_sem * euk_C_ug_lit,
         Prok_biomass_sem_L = PROK_sem * (bac_carbon_ug* 1000),
         Euk_biomass_Hu_sem_L = EUK_sem * (euk_C_ug_Hu * 1000),
         Euk_biomass_lit_sem_L = EUK_sem * (euk_C_ug_lit * 1000)) %>% 
  type.convert(as.is = TRUE) %>%
  mutate(detected = case_when(
    RATE_min < 0 ~ "Not detected",
    TRUE ~ "Detected")) %>% 
  mutate(type = case_when(
    NAME %in% bsw ~ NAME,
    TRUE ~ paste("Vent", EXP, sep="-")
  )) %>% 
  mutate(GRAZE_RATE = case_when(
    RATE_min < 0 ~ 0,
    TRUE ~ RATE_min
  )) %>% 
  mutate(type_site = case_when(
    NAME %in% bsw ~ NAME,
    TRUE ~ "Vent"
  )) %>%
  data.frame
# View(table_wcalcs_biomass)
```

> Volume is reported as um^3

* Grazing rate column == FLP per minute consumed
* Grazing effect hr == cells per ml per hr

## Amend table with 'bounded' carbon estimates
Also make a "bounded" table that demonstrates the ug C consumed in the context of McNichol et al.
```{r}
# G = number of cells grazed during experiment duration
table_wcalcs_biomass_bounded <- table_wcalcs_biomass %>% 
  add_column(fgC_cell = 86) %>% # Add in Morono et al. 2011 value
  mutate(
    # cells_consumed_perday = (G / 1), # Rate of cells consumed * in situ prok, per day
    fgC_ml_perday = (GRAZING_EFFECT_day * fgC_cell), # Convert cell amount to fg C
    ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000), # Convert to ug C per L
    lower_mcnichol = 100*(ugC_L_perday / 17.3),
    upper_mcnichol = 100*(ugC_L_perday / 321.4)
  ) %>% 
  data.frame
```


```{r Save carbon table}
# head(table_wcalcs_biomass_bounded)
# View(table_wcalcs_biomass_bounded)
# write_delim(table_wcalcs_biomass_bounded, file = "output-data/table-wcalc.txt", delim = "\t")
```


# Compare with Axial euk cell count

From Axial Seamount cruise (July 2022) - have Anemone vent and plume euk cell counts to compare.

```{r}
counts_ax <- read.csv("../../GrazingatAxial-2022/euk-cell-counts-10122022.csv", 
                     blank.lines.skip = FALSE,
                     na.strings = c("", "NA"),
                     stringsAsFactors = FALSE) # Import
counts_ax[is.na(counts_ax)] <- 0 # Change blanks to zeroes
```

Modify grazing code to count euk cells/ml so it considers euk cell count samples only.

```{r}
# counts_cellsml_all <- 
counts_ax %>%
  select(SAMPLE, EXP = `EXP.ID`, VOL = `vol..ml.`, MAG = `Mag..x.`, nano = `X.20um..no.FLP`, micro = `X.20um..no.FLP.1`) %>% 
  group_by(SAMPLE, EXP, VOL) %>%
  mutate(nanoTOTAL = as.numeric(nano), 
         microTOTAL = as.numeric(micro),
         euksTOTAL = nanoTOTAL + microTOTAL) %>% 
  summarise(totalFOV = n(), # Count total FOV counted
            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV
            nanoVar = var(nanoTOTAL), #Variance
            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation
            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks
            microVar = var(microTOTAL), 
            microSd = (2*(sqrt(microVar))), 
            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count
            euksVar = var(euksTOTAL), 
            euksSd = (2*(sqrt(euksVar)))) %>%
  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab filter rig, it is 283.385):
  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.0256 * 0.9)),
         microCONC = ((microAvg * 283.385)/(VOL * 0.0256 * 0.9)),
         eukCONC = ((euksAvg * 283.385)/(VOL * 0.0256 * 0.9))
         )
  # # left_join(expmeta) %>%
  # separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  # separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  # data.frame
```

Thoughts on cell counts. Combining nano and micro for now, as the de-pressurization can cause issues in size. Likely underestimates for these counts.

This is further supported because the biovolumes of all cells were pretty low.

# Environmental parameters - MCR

Import from Hu et al. (_Molecular Ecology_).
```{r}
env_tmp <- read.delim("../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/samplelist-metadata.txt")
# head(env_tmp)

mcr_metadata <- env_tmp %>% 
  filter(SITE == "VonDamm" | SITE  == "Piccard") %>% 
  mutate(FIELD =  case_when(
    SITE == "VonDamm"  ~ "Von Damm",
    SITE == "Piccard" ~ "Piccard")) %>% 
  filter(SAMPLETYPE != "Incubation") %>% 
  select(-Sample_or_Control, -SAMPLEID, -ref_num, -SITE, SEQ_SAMPLE = SAMPLE, everything())

# View(mcr_metadata)
```

Generate supplementary table.
```{r}
supp_table_env_mcr <- mcr_metadata %>% 
  select(FIELD, VENT, SAMPLETYPE, DEPTH, TEMP = temp, PH = pH, PERCSEA = percseawater, MG = mg, H2 = h2, H2S = h2s, CH4 = ch4, MICROBIAL = ProkConc)

# Save supplementary metadata table:
# write.csv(supp_table_env_mcr, file = "output-data/supp_table_MCR_metadata.csv")
```


# Analysis of grazing rate results

Re-import table from output table with all grazing values
```{r}
table_wcalcs_biomass_bounded <- read.delim("output-data/table-wcalc.txt")
```

Format and factor values to plot, and prioritize these values:

* Grazing rate column == FLP per minute consumed
* Grazing effect hr == cells per ml per hr
* Specific ingestion rate == % of cell carbon per day, estimated with literature and measured carbon values
```{r}
head(table_wcalcs_biomass_bounded)
```


```{r}
biomass_rate_plot <- table_wcalcs_biomass_bounded %>% 
  select(FIELD, NAME, EXP, SAMPLE, type, 
        PROK_ml, EUK_ml, PROK_sem, EUK_sem,
        Prok_biomass_L, Euk_biomass_Hu_L, Euk_biomass_lit_L,
        Prok_biomass_sem_L, Euk_biomass_Hu_sem_L, Euk_biomass_lit_sem_L,
        GRAZING_EFFECT_hr, GRAZING_EFFECT_hr_min, GRAZING_EFFECT_hr_max, BAC_TURNOVER_PERC, BAC_TURNOVER_PERC_min, BAC_TURNOVER_PERC_max,
        GRAZE_RATE, RATE_ugCbac_pergrazer_perday,
        SPEC_INGESTION_RATE, SPEC_INGESTION_RATE_lit) %>% 
  pivot_longer(cols = c(PROK_ml, EUK_ml,
                        Prok_biomass_L, Euk_biomass_Hu_L, Euk_biomass_lit_L,
                        GRAZING_EFFECT_hr, BAC_TURNOVER_PERC,
                        GRAZE_RATE, RATE_ugCbac_pergrazer_perday,
                        SPEC_INGESTION_RATE, SPEC_INGESTION_RATE_lit),
               names_to = "Variable", values_to = "Value") %>% 
  pivot_longer(cols = c(PROK_sem, EUK_sem, Prok_biomass_sem_L, Euk_biomass_Hu_sem_L, Euk_biomass_lit_sem_L,
                        BAC_TURNOVER_PERC_max, BAC_TURNOVER_PERC_min, GRAZING_EFFECT_hr_max, GRAZING_EFFECT_hr_min, GRAZING_EFFECT_hr_max),
               names_to = "SEM_variable", values_to = "SEM") %>% 
  data.frame

biomass_rate_plot$NAME_ORDER <- factor(biomass_rate_plot$NAME, levels = c("Background","Plume", "Quakeplume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole", "Hot Chimlet #1", "Shrimp Gulley", "South of Hot Chimlet", "South of LungSnack", "Arrow Loop", "Bartizan", "Ravelin #1"))

biomass_rate_plot$VARIABLE_ORDER <- factor(biomass_rate_plot$Variable, 
                                           levels = c("PROK_ml", "EUK_ml",
                                                      "Prok_biomass_L", "Euk_biomass_Hu_L", "Euk_biomass_lit_L",
                                                      "GRAZING_EFFECT_hr", "BAC_TURNOVER_PERC",
                                                      "GRAZE_RATE", "RATE_ugCbac_pergrazer_perday",
                                                      "SPEC_INGESTION_RATE", "SPEC_INGESTION_RATE_lit"),
                                           labels = c("Prokaryote~cells~mL^{-1}", "Eukaryote~cells~mL^{-1}",
                                                      "Prokaryote~µg~C~L^{-1}", "Measured~eukaryote~µg~C~L^{-1}", "Literature-based~eukaryote~µg~C~L^{-1}",
                                                      "Cells~mL^{-1}~hr^{-1}", "Prokaryote~turnover~'%'~d^{-1}",
                                                      "FLP~consumed~min^{-1}", "µg~C~grazer^{-1}~day^{-1}",
                                                      "Cell~carbon~%~day^{-1}", "Cell~carbon~%~day^{-1}~(lit)"))
```

## Function to plot grazing results
```{r}
conc_rate_plot_mcr <- function(df, var, sem){
  df %>% 
    filter(Variable == var) %>%
    filter(SEM_variable == sem) %>% 
    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD)) +
    geom_errorbar(aes(ymax = (Value + SEM), ymin = (Value - SEM)), 
                  width = 0.2, position = position_dodge(width = 0.4)) +
    geom_point(stat = "identity", aes(shape = EXP, fill = FIELD),
               color = "black", size = 3, position = position_dodge(width = 0.4)) +
    scale_shape_manual(values = c(21, 23)) +
    scale_fill_manual(values = c("#de2d26", "#1c9099")) +
    facet_wrap(VARIABLE_ORDER ~ ., scales = "free", 
               strip.position = c("left"), labeller = label_parsed) +
    scale_y_log10() +
    # scale_y_log10(labels = function(x) format(x, scientific = TRUE)) +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"), 
          axis.text.x = element_text(color="black", size = 11, 
                                     angle = 45, hjust = 1, vjust = 1), 
          axis.text.y = element_text(color="black", size = 11),
          axis.title =element_text(color="black", size = 14),
          axis.ticks = element_line(),
          legend.title = element_blank(),
          strip.placement = "outside",
          strip.text.y = element_text(color="black", size = 11),
          strip.text.x = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
           shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = "")
}
```

```{r}
# conc_rate_plot_mcr(biomass_rate_plot, "PROK_ml", "PROK_sem")

# conc_rate_plot_mcr(biomass_rate_plot, "EUK_ml", "EUK_sem")

# conc_rate_plot_mcr(biomass_rate_plot, "Prok_biomass_L", "Prok_biomass_sem_L")

conc_rate_plot_mcr(biomass_rate_plot, "Euk_biomass_Hu_L", "Euk_biomass_Hu_sem_L")

# conc_rate_plot_mcr(biomass_rate_plot, "GRAZING_EFFECT_hr")
```

