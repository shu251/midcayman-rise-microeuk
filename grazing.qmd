---
title: "Protistan grazing analysis"
format:
  html:
    code-fold: show
    code-tools: true
    code-copy: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 2
editor: visual
---

# Import & format data

Code below details how to import cell count (FLP count) information from Mid-Cayman Rise protistan grazing incubations and estimate grazing rate and cell biomass.

## Set up working R environment

```{r}
#| message: false
library(tidyverse); library(cowplot); library(broom)
library(patchwork)
```

Set color schematic

```{r}
# vent_ids <- c("BSW","Plume", "Shrimpocalypse", "LotsOShrimp", "X18", "OMT", "Rav2", "MustardStand", "ShrimpHole")
# vent_fullname <- c("Background","Plume", "Shrimpocalypse", "Lots 'O Shrimp", "X-18", "Old Man Tree", "Ravelin #2", "Mustard Stand", "Shrimp Hole")
# Order by temperature
vent_ids <- c("BSW","Plume", "LotsOShrimp", "Shrimpocalypse", 
              "ShrimpHole", "X18", "Rav2", "MustardStand", "OMT")
vent_fullname <- c("Background","Plume", "Lots 'O Shrimp", "Shrimpocalypse",  
                   "Shrimp Hole", "X-18", "Ravelin #2", "Mustard Stand", "Old Man Tree")

site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
site_color <- c("#264653", "#E76F51")
names(site_color) <- site_fullname

whole_pal <- c("#264653", "#2A9D8F", "#E9C46A","#F4A261", "#E76F51")

extra <- c("#eae2b7", "#5f0f40", "#90be6d", "#941b0c", "#577590")
```

## Import raw count data

Import eukaryotic cell count data from grazing experiments. In this section, we will calculate cells per ml from raw counts (Field of view, etc.) and use to estimate protist cell concentration. These will be used below in grazing experiment calculations.

```{r}
counts <- read.delim("input-data/euk-counts-compiled.txt", 
                     blank.lines.skip = FALSE,
                     na.strings = c("", "NA"),
                     stringsAsFactors = FALSE) # Import
counts[is.na(counts)] <- 0 # Change blanks to zeroes
```

Raw data table collected during microscopy count process. Below code reviews the structure of this raw data and updates column headers to be more 'R' friendly.

```{r}
# head(counts)
colnames(counts) <- c("DATE", "SAMPLE", "EXPID", "VOL", "MAG", "FOV", "nanoNoFLP", "microNoFLP", "nanoFLP", "microFLP", "NOTES", "DateCompiled"); colnames(counts)
```

> To count occurrence and number of FLP ingested by eukaryotic cells, the number of FLPs ingested was tallied and comma separated for multiple eukaryotic cells with FLP. These values need to separated and counted as 1 eukaryotic cell each, but retain the number of FLP per cell.

Parse raw microscopy count data.

```{r}
counts_occur <- counts %>%
  # remove incomplete
  filter(NOTES != "Not countable") %>% 
  # Count number of euk cells observed with FLPs (ex. if "1,2", 'occur' will = 2)
  mutate(nanoFLP_occur = as.numeric(str_count(nanoFLP, "[1-9]\\d*")), 
         microFLP_occur = as.numeric(str_count(microFLP, "[1-9]\\d*")),
         # Add number of euk cells with FLPs to those without for total number of euk cells
         nanoTOTAL = as.numeric(nanoNoFLP) + nanoFLP_occur, 
         microTOTAL = as.numeric(microNoFLP) + microFLP_occur,
         euksTOTAL = nanoTOTAL + microTOTAL) %>%
      data.frame
```

# Calculate cells per ml (euk)

Input data are the raw microscopy counts by FOV. Code below calculations cells/ml based on these values. Additionally, variance and standard deviation are also calculated. Eukaryotic cells were also classified by size, where micro equates to \>20um and nano is \<20um. All counts were done at 100x magnification, confirm this: `unique(counts_occur$MAG)`.

Calculate cell concentration (cells/ml).

```{r}
counts_cellsml_all <- counts_occur %>%
  group_by(SAMPLE, EXPID, VOL) %>% #Calculate averages by sample
  summarise(totalFOV = n(), # Count total FOV counted
            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV
            nanoVar = var(nanoTOTAL), #Variance
            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation
            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks
            microVar = var(microTOTAL), 
            microSd = (2*(sqrt(microVar))), 
            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count
            euksVar = var(euksTOTAL), 
            euksSd = (2*(sqrt(euksVar))), 
            .groups = 'drop_last') %>%
  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab scope, it is 283.385):
  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.01 * 0.9)),
         microCONC = ((microAvg * 283.385)/(VOL * 0.01 * 0.9)),
         eukCONC = ((euksAvg * 283.385)/(VOL * 0.01 * 0.9))
         ) %>%
  # left_join(expmeta) %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  data.frame
```

> Replicates belong to the same experiment for either Bag or IGT incubation. Below, modify these names and label new column with bag or igt. And create an average across replicates.

Average cells/ml across replicates, pivot to long format

```{r}
counts_cellsml_avg <- counts_cellsml_all %>%
  select(Site, Name, TimePoint, Replicate, nanoCONC, microCONC, eukCONC) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>%
  select(-Replicate) %>%
  pivot_longer(cols = ends_with("CONC"), names_to = "VARIABLE", values_to = "CONCENTRATION") %>%
  group_by(Site, Name, TimePoint, EXP_TYPE, IGT_REP, VARIABLE) %>%
  # Calculate mean, variance, SD, min, and max
  summarise(MEAN = mean(CONCENTRATION),
            VAR = var(CONCENTRATION),
            SD = sd(CONCENTRATION),
            SEM =(sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),
            MIN = min(CONCENTRATION),
            MAX = max(CONCENTRATION),
            .groups = 'drop_last') %>%
  data.frame
```

NOTES on calculations:

*VAR* = takes the sum of the squares of each value's deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one.

*SD* = standard deviation of all values

*SEM* = standard deviation of sampling distribution; standard deviation divided by the square root of the sample size.

Save output file

```{r}
# save(counts_cellsml_all, counts_cellsml_avg, file = "input-data/raw-avg-eukcount.RData")
```



## Plot eukaryote cells per ml for all time points
The average euk cells per ml value was taken when TRUE replicates were conducted and we observed a cell count.

Plot all euk cell counts for supplement
```{r}
# Order by temperature
vent_ids <- c("BSW","Plume", "LotsOShrimp", "Shrimpocalypse", 
              "ShrimpHole", "X18", "Rav2", "MustardStand", "OMT")
vent_fullname <- c("Background","Plume", "Lots 'O Shrimp", "Shrimpocalypse",  
                   "Shrimp Hole", "X-18", "Ravelin #2", "Mustard Stand", "Old Man Tree")

site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
head(counts_cellsml_avg)
```

### Figure S2
```{r}
#| fig-width: 8
#| fig-height: 10
# svg(filename = "../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS2.svg")
counts_cellsml_avg %>% 
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(VARIABLE_FIX = case_when(
    VARIABLE == "microCONC" ~ "microeukaryote",
    VARIABLE == "nanoCONC" ~ "nanoeukaryote",
    VARIABLE == "eukCONC" ~ "Total eukaryote"
  )) %>% 
  # Factor name order and label
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% 
  # Plot with outline vs. solid circle
  ggplot(aes(x = NameOrder, y = MEAN, group = NameOrder,
                                          fill = VARIABLE_FIX,
                                          color = VARIABLE_FIX,
                                          shape = EXP_CATEGORY)) +
  geom_jitter(size = 2, stroke = 2, aes(fill = VARIABLE_FIX, color = VARIABLE_FIX,
                                        shape = EXP_CATEGORY)) +
  geom_boxplot(alpha = 0.1) +
  scale_shape_manual(values = c(1, 21)) +
    scale_fill_manual(values = c("#e7298a", "#fcbba1", "#c6dbef")) +
    scale_color_manual(values = c("#e7298a", "#fcbba1", "#c6dbef")) +
    coord_flip() +
    scale_y_log10() +
    facet_grid(SiteOrder ~ EXP_CATEGORY, space = "free", scale = "free") +
    theme_bw() + 
  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),
        strip.background = element_blank(),
        legend.position = "right",
        legend.title = element_blank()) +
    labs(x = "", y = bquote("Eukaryote cells "~mL^-1),
         title = "Distribution of all eukaryotic cell counts")
# dev.off()
```

Eukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. \~300 cells/ml in background and plume compared to \~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.

> Boxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 \* interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)

> eukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another.


## Plot eukaryote cell concentration over time.

Include plot over time.

#### Figure S5
```{r}
#| fig-width: 7
#| fig-height: 6
# Plot trend line of euk cell count for all experiments
# svg(filename = "../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS4.svg")
counts_cellsml_avg %>%
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(EXP_CATEGORY_WREP = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  # Factor name order and label
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% 
  filter(VARIABLE == "eukCONC") %>%
  unite("Experiment", NameOrder, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  unite("Experiment_rep", NameOrder, EXP_CATEGORY_WREP, sep = "-", remove = FALSE) %>%
  ggplot(aes(x = TimePoint, y = MEAN, shape = EXP_CATEGORY, fill = NameOrder, 
             color = NameOrder)) +
    geom_path(aes(group = Experiment_rep), color = "black") +
    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +
    geom_point(stat = "identity", size = 2, stroke = 2, aes(shape = EXP_CATEGORY, 
                                                fill = NameOrder, 
                                                color = NameOrder)) +
    scale_shape_manual(values = c(1, 21)) +
    scale_fill_brewer(palette = "Paired") +
    scale_color_brewer(palette = "Paired") +
    scale_y_log10() +
    facet_wrap(SiteOrder ~ EXP_CATEGORY, scales = "free") +
    theme_classic() + theme(strip.background = element_blank(), 
                            legend.title = element_blank(),
                            title = element_text(size = 7, face = "bold"),
                            axis.title = element_text(size = 9)) +
    labs(title = "Total euk cell counts for each experiment", y = bquote("Average eukaryote cells "~mL^-1), x = "Time point")
# dev.off()
```

> note there is an overall drop in euk cells/ml in the final time point. Especially with the IGT samples. Take this into consideration

## Plot T0 only counts for cells/ml plot

For Figure 1a
```{r}
# Plot trend line of euk cell count for all experiments
euk_plot <- counts_cellsml_avg %>%
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(EXP_CATEGORY_WREP = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  # Factor name order and label
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% 
  filter(VARIABLE == "eukCONC") %>%
  filter(TimePoint == "T0") %>% 
  filter(!(grepl("b", IGT_REP))) %>% 
  unite("SITE_TYPE", Site, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  unite("Experiment", Name, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  unite("Experiment_rep", Name, EXP_CATEGORY_WREP, sep = "-", remove = FALSE) %>%
  ggplot(aes(x = NameOrder, y = MEAN, shape = SITE_TYPE, fill = SITE_TYPE, 
             color = SITE_TYPE)) +
    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2, color = "black") +
    geom_point(stat = "identity", size = 2, stroke = 2, aes(shape = SITE_TYPE, 
                                                fill = SITE_TYPE, 
                                                color = SITE_TYPE)) +
    scale_shape_manual(values = c(21, 21, 21, 21)) +
    scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
    scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
    scale_y_log10() +
    # cfacet_grid(. ~ SiteOrder, scales = "free") +
    facet_grid(.~SiteOrder, space = "free", scales = "free") +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title =element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank()) +
  labs(x = "", y = bquote("Eukaryote cells "~mL^-1),
       title = "")

euk_plot
```

```{r}
# Last saved - April 13, 2023
save(counts_cellsml_all, counts_cellsml_avg, counts_occur, file = "output-data/MCR-cellcount-dfs")
```

# Bacteria & archaea cell counts

DAPI slide counts from prokaryotes from same sites. Import and compare.

```{r}
prok <- read.delim("input-data/prokINSITU-counts-compiled.txt")

insitu_proks <- prok %>% 
  filter(CELLML != "not countable") %>% 
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>% 
  group_by(SAMPLE, Site, Name) %>% 
  summarise(MEAN = mean(as.numeric(CELLML)),
            SD = sd(CELLML),
            SEM = (sd(CELLML)/sqrt(length(CELLML))),
            MIN = min(CELLML),
            MAX = max(CELLML),
            .groups = "rowwise") %>% 
  data.frame
```

## Cells per ml (prok)

Visualize counts from proks. Get summary of prok counts, and incorporate into plot

```{r}
# head(insitu_proks)
# insitu_proks$Name
insitu_proks %>% filter(Name != "Quakeplume") %>% 
  mutate(type = case_when(
  Name == "BSW" ~ "non-vent",
  Name == "Plume" ~ "non-vent",
  TRUE ~ "vent"
)) %>% 
    # group_by(type) %>% 
  group_by(type, Site) %>% 
      summarize(mean = mean(MEAN),
            min = min(MEAN),
            max = max(MEAN))
    
```

Factor site names, etc.

```{r}
# Ordered by temperature
insitu_proks$Name_order <- factor(insitu_proks$Name, levels = c("BSW", "Plume",
                                                                "ShrimpHole", "X18", "MustardStand", 
                                                                "Rav2", "OMT","Bartizan","ArrowLoop", "Rav1",
                                                                "Quakeplume", "LotsOShrimp", "SouthofHotChimlet",
                                                                "SouthofLungSnack", "Shrimpocalypse", "ShrimpGulley", 
                                                                "HotChimlet1"), 
                                  labels = c("Background","Plume", 
                                             "Shrimp Hole", "X-18","Mustard Stand",
                                             "Ravelin #2", "Old Man Tree", "Bartizan", "Arrow Loop", "Ravelin #1",
                                          
                                             "Quakeplume", "Lots 'O Shrimp", "South of Hot Chimlet", 
                                             "South of LungSnack", "Shrimpocalypse", "Shrimp Gulley", "Hot Chimlet #1"))

site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
insitu_proks$Site_order <- factor(insitu_proks$Site, levels = site_ids, labels = site_fullname)
site_color <- c("#E76F51", "#264653")
site_fill <- c("#E76F51", "#264653")
# names(site_color) <- site_fullname
```

Write function to output scientific notation in the plot with `x 10^a`
```{r}
library(scales)
scientific_10 = function(x) {
  ifelse(
    x==0, "0",
    parse(text = sub("e[+]?", " %*% 10^", scales::scientific_format()(x)))
  )
} 
```


```{r}
prok_plot <- ggplot(insitu_proks, aes(x = Name_order, y = MEAN)) +
  geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +
  geom_point(stat = "identity", shape = 21, stroke = 2, aes(fill = Site_order,
                                                            color = Site_order), size = 3) +
  facet_grid(.~ Site_order, space = "free", scales = "free") +
  scale_fill_manual(values = c("#E76F51", "#264653")) +
  scale_color_manual(values = c("#E76F51", "#264653")) +
  labs(y = bquote("Prokaryote cells "~mL^-1), x = "", title = "") +
  scale_y_log10(label = scientific_10) +
  # scale_y_log10(label=trans_format("log10",math_format(10^.x))) +
  # scale_y_continuous(label = scientific_10) +
  theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title =element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank())
prok_plot
```

### Euk and prok counts

Combined eukaryote and prokaryote cell counts
## Figure 1a-b
```{r}
euk_prok_ab <- (euk_plot + theme(legend.position = "top")) + (prok_plot + theme(legend.position = "top")) + patchwork::plot_layout(ncol = 2) + patchwork::plot_annotation(tag_levels = "a")
euk_prok_ab
```

### Combine with previous MCR cell counts

Compare *in situ* prokaryote cell counts from 2020 to previous years

```{r}
prok_prev <- read.csv("input-data/cellcount_previousyr.csv")

prok_prev_formatted <- prok_prev %>% 
  mutate(VENTSITE = case_when(
    grepl("Piccard", Site) ~ "Piccard",
    grepl("Von Damm", Site) ~ "VD"
  )) %>% 
  filter(!is.na(YEAR)) %>% #QC of 
  # filter(cells_ml != "NC") %>% 
  # filter(cells_ml != "") %>% 
  # filter(cells_ml != "no data") %>% 
  type.convert(as.is = TRUE, numerals = "no.loss") %>%
  select(YEAR, VENTSITE, NAME = Name, REP=Replicate, CELLML = cells_ml, ORIGSAMPLE = Orig_vent_site_ID, ID_number, Origin)
```

Re-import 2020 data to compare.

```{r}
# Re-import 2020
prok <- read.delim("input-data/prokINSITU-counts-compiled.txt")
# View(prok)
proks_allyrs <- prok %>% 
  separate(SAMPLE, c("VENTSITE", "NAME"), sep = "-", remove = FALSE) %>% 
  mutate(YEAR = 2020) %>%
  select(YEAR, VENTSITE, NAME, REP, CELLML, ORIGSAMPLE = BAC) %>% 
  bind_rows(prok_prev_formatted %>% select(-ID_number, -Origin)) %>% 
  type.convert(as.is = TRUE) %>%
  # Remove not countable or not data samples:
  filter(CELLML != "NC") %>%
  filter(CELLML != "") %>%
  filter(CELLML != "no data") %>%
  filter(CELLML != "not countable") %>% 
  data.frame

# View(proks_allyrs)
# View(as.data.frame(unique(proks_allyrs$NAME)))

vent_order <- c("BSW","Plume","Quakeplume","NearsummitBeebee","MainOrifice","NearMainOrifice","Rav1","HotChimlet1","HotChimlet","SouthofHotChimlet","NearHotChimlet","HotCracks1","HotCracks2","ShrimpHole","ShrimpHole(X18)","X18","X19","SouthofLungSnack","TwinPeaks","OMT","WhiteCastle","GingerCastle","ArrowLoop","Bartizan","LotsOShrimp","MustardStand","ShrimpButtery","ShrimpCanyon","ShrimpGulley","Shrimpocalypse","ShrimpVegas")
vent_names <- c("Background","Plume","Quakeplume","Near summit Beebee Vents Mound","Main Orifice","Near Main Orifice","Ravelin #1","Hot Chimlet #1","Hot Chimlet","South of Hot Chimlet","Near Hot Chimlet","Hot Cracks #1","Hot Cracks #2","Shrimp Hole","Shrimp Hole (X-18)","X-18","X-19","South of Lung Snack","Twin Peaks","Old Man Tree","White Castle","Ginger Castle","Arrow Loop","Bartizan","Lots O Shrimp","Mustard Stand","Shrimp Buttery","Shrimp Canyon","Shrimp Gulley","Shrimpocalypse","Shrimp Vegas")
proks_allyrs$NAME_ORDER <- factor(proks_allyrs$NAME, levels = vent_order, labels = vent_names)
proks_allyrs$VENTSITE_ORDER <- factor(proks_allyrs$VENTSITE, levels = c("Piccard", "VD"), labels = c("Piccard", "Von Damm"))
```

Plot by year.

```{r}
# pdf("compare-across-yr-cellcount-04052021.pdf", h = 8, w = 7)
ggplot(proks_allyrs, aes(x = NAME_ORDER, y = as.numeric(CELLML), fill = factor(YEAR), shape = VENTSITE_ORDER)) +
  geom_point(stat = "identity", aes(fill = factor(YEAR)), size = 3) +
  scale_shape_manual(values = c(21,23)) +
  coord_flip() +
  facet_grid(VENTSITE_ORDER ~ ., space = "free", scales = "free") +
  scale_y_log10() +
  scale_fill_manual(values = c("#1c9099", "#ffeda0", "#fc4e2a")) +
  theme_linedraw() +
  theme(axis.text = element_text(color = "black", size = 10),
        strip.background = element_blank(),
        strip.text.y = element_text(color = "black", size = 11, hjust = 0, vjust = 1),
        legend.title = element_blank(),
        legend.position = "bottom",
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "grey")) +
  labs(y = bquote("Cells "~mL^-1), x = "") +
  guides(fill=guide_legend(override.aes=list(shape=22)))
# dev.off()
```
```{r}
# head(insitu_proks)
# names(counts_cellsml_avg)
prok_tojoin <- insitu_proks %>% 
  mutate(MEAN_SIG = signif(as.numeric(MEAN), digits = 5),
         MIN_sig = signif(as.numeric(MIN), digits = 4),
         MAX_sig = signif(as.numeric(MAX), digits = 4)) %>% 
  unite("PROK_MinMax", MIN_sig, MAX_sig, sep = " / ") %>%
  select(Site, Name, PROK_ml = MEAN_SIG, PROK_MinMax, PROK_sem = SEM)
# prok_tojoin
```


## Compile table with euk and prok counts

Part of Table 1.
```{r}
euk_prok_counts <- counts_cellsml_avg %>%
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(EXP_CATEGORY_WREP = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  # Factor name order and label
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% 
  filter(VARIABLE == "eukCONC") %>%
  filter(TimePoint == "T0") %>% 
  filter(!(grepl("b", IGT_REP))) %>% 
  unite("SITE_TYPE", Site, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  unite("Experiment", Name, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  unite("Experiment_rep", Name, EXP_CATEGORY_WREP, sep = "-", remove = FALSE) %>% 
  mutate(MEAN_SIG = signif(MEAN, digits = 5),
         MIN_sig = signif(MIN, digits = 4),
         MAX_sig = signif(MAX, digits = 4)) %>% 
  unite("EUK_MinMax", MIN_sig, MAX_sig, sep = " / ") %>% 
  select(Site, Name, SITE_TYPE, Experiment, Experiment_rep, VARIABLE, EUK_ml = MEAN_SIG, EUK_MinMax, EUK_sem = SEM) %>% 
  left_join(prok_tojoin)

euk_prok_counts # add to this later for Table 1
```

# Estimate grazing effect

Calculate FLP per eukaryotic cell over time. Goal is to make these calculations and then determine best fit line. Slope of best fit line is the grazing rate. Need to take into account euk cells with FLPs and then the euk cells withOUT FLPs, these will be zeroes to take into account for FLPs/euk averages.

```{r}
load("output-data/MCR-cellcount-dfs", verbose = TRUE)
```

## Determine FLP per euk cell

Isolate euk cell counts with FLPs (comma separated for counts). These need to be separated into rows, use `counts_occur` data frame from above.

```{r}
# Select nano and micro counts with FLPs
counts_sepflp <- counts_occur %>% 
  filter(!NOTES == "Discard") %>% 
  filter(!(NOTES == "DTAF stain prevented counts of FLP, Euks only")) %>%
  select(DATE, SAMPLE, EXPID, VOL, MAG, FOV, nanoFLP, microFLP) %>%
  # Inputs that are comma separated will be split into a new row
  separate_rows(microFLP, sep = ",", convert = TRUE) %>%
  separate_rows(nanoFLP, sep = ",", convert = TRUE) %>%
  # Replace NAs with zeroes
  replace_na(list(microFLP = 0, nanoFLP = 0)) %>% 
  data.frame
```

*optional gut check of data table modification*

```{r}
## Check, see FOV 23, separated into rows.
# View(counts_sepflp %>%
# filter(SAMPLE == "VD-Rav2" & EXPID == "T10-Rep1"))
# View(counts_occur %>%
# filter(SAMPLE == "VD-Rav2" & EXPID == "T10-Rep1"))
```

Isolate counts that are \>0, so only eukaryote cells that were observed to have FLPs are included. Then calculate FLP per euk cell by dividing by 1 (each row is a euk cell, based on data transformation above).

```{r}
counts_flp <- counts_sepflp %>%
  select(SAMPLE, EXPID, nano_size = nanoFLP, micro_size = microFLP) %>%
  pivot_longer(cols = ends_with("_size"), names_to = "SizeFrac", values_to = "num_of_FLP") %>%
  filter(num_of_FLP > 0) %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>%
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  summarise(total_FLP = sum(num_of_FLP),
            total_euks_wflp = n(),
            .groups = "rowwise") %>%
  data.frame

head(counts_flp)
```

OUTPUT COLUMNS: (1) total_FLP = sum of FLPs found inside a euk cell (2) total_euks_wflp = number of euks counted with ingested FLP

Repeat above operation for euk cells without any FLP. Here, subset total number of observations where there was a euk cell without FLP. These need to be counted as euk cell without an FLP.

> Below code repeats process and compiles with other FLP/euk cell data.

Repeat above process for euk cells without FLPs (0 FLP per euk cell needs to be included in overall average).

```{r}
counts_flp_compiled <- counts_occur %>% 
  filter(!(NOTES == "Discard")) %>% #Discard bad counts
  filter(!(NOTES == "DTAF stain prevented counts of FLP, Euks only")) %>%
  type.convert(as.is = TRUE) %>% #modify str() for columns
  select(SAMPLE, EXPID, nano_size = nanoNoFLP, micro_size = microNoFLP) %>% #select non flp
  pivot_longer(cols = ends_with("_size"), names_to = "SizeFrac", values_to = "num_of_euks") %>%
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate"), sep = "-", remove = FALSE) %>%
  mutate(EXP_TYPE = case_when(
    grepl("IGT", Replicate) ~ "IGT",
    grepl("Rep", Replicate) ~ "Bag"
  )) %>%
  mutate(IGT_REP = case_when(
    EXP_TYPE == "IGT" ~ Replicate,
    EXP_TYPE == "Bag" ~ "Bag")) %>% 
  # filter(num_of_euks > 0) %>% # Remove observed zero counts
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  summarise(total_euks_noFLP = sum(num_of_euks),
            .groups = "rowwise") %>%
  # Join with FLP count information
  ## SAMPLE, EXPID, EXPTYPE, IGTREP, and SizeFrac variables should match
  left_join(counts_flp) %>% # Join with the counts of FLP per euk cell
  replace_na(list(total_FLP = 0, total_euks_wflp = 0)) %>% #Replace NAs with zero
  data.frame
```

Extract total eukaryote cell value by adding across nano and micro. Then combine the nano and micro cell counts.

```{r}
counts_flp_compiled_all <- counts_flp_compiled %>% 
  # Exclude size fraction:
  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP) %>%
  summarise(total_euks_noFLP = sum(total_euks_noFLP),
            total_FLP = sum(total_FLP), 
            total_euks_wflp = sum(total_euks_wflp),
            .groups = "rowwise") %>% 
  add_column(SizeFrac = "total_euks") %>% #Add SizeFrac column
  bind_rows(counts_flp_compiled) %>% # Combine back with flp compiled list
  data.frame
```

## Calculate FLP per euk cell calculation

First need to import and compile with metadata to get exact timing of experiments.

```{r}
metadata <- read.delim("input-data/flp-exp-metadata-compiled.txt")
exp_metadata <- read.csv("input-data/flp_exp_metadata.csv")
```

Add metadata. 

### Consider IGT replicates.

IGT_#_ denotes a separate IGT experiment. Due to bottle effects and the need to look at how replicate experiments compared, lets keep these separate.
For IGT experiments labeled "b", this means the OTHER HALF of the filter was counted or re-counted as a way to confirm my euk counting was precise. 

```{r}
counts_flp_calcs_all <- counts_flp_compiled_all %>% 
  # Add in metadata
  # IGTXb are replicate counts, use this to include them as replicates
  separate(EXPID, c("TimePoint", "REP"), sep = "-", remove = FALSE) %>% 
  mutate(
    REP = ifelse(grepl("IGT5b", REP), "IGT5", REP),
    REP = ifelse(grepl("IGT4b", REP), "IGT4", REP),
    REP = ifelse(grepl("Bag", EXP_TYPE), "Bag", REP)) %>% 
  left_join(metadata, by = c("SAMPLE" = "SAMPLE", "TimePoint" = "TimePoint", "REP" = "REP")) %>% 
  left_join(exp_metadata, by = c("SAMPLE" = "SAMPLE", "REP" = "REP")) %>% 
  separate(SAMPLE, c("Site", "Name"), sep = "-", remove = FALSE) %>%
  separate(EXPID, c("TimePoint", "Replicate_ID"), sep = "-", remove = FALSE) %>%
  ## Treat repeated IGT counts completely separate
  group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, IGT_REP, SizeFrac) %>%
  ## Treat repeated IGT counts as replicates (e.g., IGT4b and IGT4 == IGT4)
  # group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, REP, SizeFrac) %>%
  # FLPperEuk is the total FLP divided by the total number of euk cells counted
  mutate(FLPperEuk = total_FLP/(sum(total_euks_noFLP, total_euks_wflp))) %>%
  unite("Experiment", Name, REP, sep = "-", remove = FALSE) %>%
  data.frame
counts_flp_calcs_all
```

> COLS: Timepoint, Minutes = time point label, actual incubated minutes

> COLS: Replicate_ID, REP, and IGT_REP = full replicate identified for IGTs and Bags, designation of biological replicates, and designation of technical replicates for IGT experiments

## Calculate linear regression to obtain slope

Use `lm()` function in R to calculate linear regression for each experiment. Slope equates to grazing rate. Function inputs the FLP per euk cell data, performs regression and then adds a column for slope and r-squared values.

Function to estimate slope. Uses broom and tidymodels, then extracts slope.

```{r}
calculate_lm <- function(df){
  regression_1 <- df %>%
  type.convert(as.is = TRUE) %>%
  ## Keep technical replicates separate for IGTs
  group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%
  nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%
  ## Combine technical replicates for IGTs
  # group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%
  # nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%
  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),
         tidied = map(lm_fit, tidy)) %>% 
  unnest(tidied) %>% 
  select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, term, estimate) %>%
  # select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, term, estimate) %>% 
  pivot_wider(names_from = term, values_from = estimate) %>% 
  data.frame
  # Reset column names
  colnames(regression_1) <- c("SAMPLE", "Site", 
                              "Experiment", "Name", "IGT_REP",
                              "SizeFrac", "INTERCEPT", "SLOPE")
  # Repeat broom model to get R2
  out_regression <- df %>%
  ## Keep technical replicates separate for IGTs
  group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%
  nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%
  # group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%
  # nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%
  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),
         glanced = map(lm_fit, glance)) %>% 
  unnest(glanced) %>% 
    select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, r.squared) %>%
    # select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, r.squared) %>% 
  right_join(regression_1) %>% 
  right_join(df) %>% 
  data.frame
  out_regression$SITE <- factor(out_regression$Site, levels = c("VD", "Piccard"))
  out_regression$TYPE <- factor(out_regression$EXP_TYPE, levels = c("Bag", "IGT"))
  return(out_regression)
}
```

> Note that an error may occur when running the below function. This is due to the fact that some experiments did not have replicates.

Apply to all data to obtain slope.

```{r}
calcs_wslope_regression <- calculate_lm(counts_flp_calcs_all)
```

*gut check* linear regression work. Use below commands out to recalculate one linear regression. Above function uses the `nest()` capability of tidyverse. Below, one experiment is subset to check the value.

```{r}
# Extract only plume-bag experiment from VD
# tmp_plume <- filter(counts_flp_calcs_all, Experiment == "Plume-Bag") %>% filter(Site == "VD") %>% filter(SizeFrac == "total_euks")
# tmp_plume # View
# Perform linear regression
# lm_out <- lm(FLPperEuk ~ Minutes, data = tmp_plume)
# # Check output
# summary(lm_out)
# lm_out$coefficients #Intercept=intercept #Minutes = SLOPE
# # Compare with nested function output
# filter(calcs_wslope_regression, Experiment == "Plume-Bag") %>% filter(Site == "VD") %>% filter(SizeFrac == "total_euks") %>% head
```

### Plot linear regression trend

Plot all shipboard experiments with estimated slope.

```{r, fig.height=5.5, fig.width=6}
# | fig-width: 7
# | fig-height: 8
shipboardregression <- calcs_wslope_regression %>% 
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(EXP_CATEGORY_WREP = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  # Factor name order and label
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% 
  filter(SizeFrac == "total_euks") %>%
  ## Filter out IGT samples for now
  filter(TYPE != "IGT") %>%
  unite(EXPERIMENT, NameOrder, EXP_CATEGORY, sep = " ", remove = FALSE) %>% 
    ggplot(aes(x = Minutes, y = FLPperEuk, 
               fill = SiteOrder, color = SiteOrder, shape = EXP_CATEGORY)) +
    geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = "black", linetype = "dashed", size = 1) +
    geom_point(stat = "identity", 
               size = 2, aes(shape = EXP_CATEGORY, 
                             fill = SiteOrder, color = SiteOrder)) +
    scale_shape_manual(values = c(21, 21)) +
    scale_fill_manual(values = c("#E76F51", "#264653")) +
    scale_color_manual(values = c("#E76F51", "#264653")) +
  # scale_shape_manual(values = c(21, 21, 21, 21)) +
  #   scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
  #   scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
    labs(x = "Minutes", y = bquote("FLP"~eukaryote^-1), title = "") +
    facet_wrap(SiteOrder ~ EXPERIMENT) +
    # Report r.squared
    geom_text(aes(x = 42, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), 
              vjust = 1, hjust = 0, size = 3, color = "black") +
    theme_bw() + 
    theme(strip.background = element_blank(),
          strip.text = element_text(color = "black", size = 7),
                       legend.title = element_blank(),
                       legend.position = "right")
shipboardregression
```

Data points represent the FLP per euk cells (based on total eukaryote cells counts). Y-axis represents the duration of incubation (in minutes). The dashed purple line reprents the slope and intercept of the experiment.

## Remove IGT Tf time points.

IGT experiment results appear to have bottle effect, especially in the final time point. Additionally, due to the lack of biological replicates in the IGT experiments, technical replicates are treated as biological replicates in the regression below.

```{r}
IGT_lm_woTf <- counts_flp_calcs_all %>% 
  # Select only IGT experiments with total eukaryotes, remove Tf (T3)
  filter(SizeFrac == "total_euks") %>% 
  filter(EXP_TYPE == "IGT" & !(TimePoint == "T3")) %>% 
  # Remove repeated counts. Use this in supplement
  filter(!grepl("b", Replicate_ID)) %>% 
  add_column(IGT_cor = "rm Tf") %>% 
  data.frame

# Recalculate lm(), keep replicates separate
igt_regression_noTf <- calculate_lm(IGT_lm_woTf) # Recalculate
```

Plot IGT grazing experiments with newly calculated grazing effect.

```{r}
igtregression <- igt_regression_noTf %>% 
  # filter(SizeFrac == "total_euks") %>% 
  # filter(TYPE != "IGT") %>% 
  mutate(SITE_ORDER = factor(SITE, levels = site_ids, labels = site_fullname)) %>%
  unite(EXPERIMENT, SITE, Experiment, sep = " ", remove = FALSE) %>% 
  ggplot(aes(x = Minutes, y = FLPperEuk, fill = SITE_ORDER, shape = TYPE, group = Experiment)) +
  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = "black", linetype = "dashed", size = 1) +
  geom_point(stat = "identity", fill = "white", 
             size = 3, stroke = 2, aes(shape = TYPE, color = SITE_ORDER)) +
  scale_shape_manual(values = c(21, 21)) +
  scale_color_manual(values = site_color) +
  labs(x = "Minutes", y = bquote("FLP"~eukaryote^-1), title = "") +
  facet_wrap(. ~ EXPERIMENT) +
  # Report r.squared
  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), 
            vjust = 1, hjust = 0, size = 3) +
  theme_bw() + 
  theme(strip.background = element_blank(),
        strip.text = element_text(color = "black", size = 7),
                     legend.title = element_blank(),
                     legend.position = "right")
igtregression
```

> Results are more consistent across experiments when we remove Tf from the IGT experiments

#### Figure S4

```{r, fig.height=12, fig.width=7}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS3.svg", h = 12, w = 7)
shipboardregression + igtregression +
  patchwork::plot_layout(ncol = 1, heights = c(1, 0.7)) + patchwork::plot_annotation(tag_levels = "a")
# dev.off()
```

### Repeat, but include technical replicates

Assess technical replicates for supplemental.

```{r}
IGT_lm_woTf_wb <- counts_flp_calcs_all %>% 
  # Select only IGT experiments with total eukaryotes, remove Tf (T3)
  filter(SizeFrac == "total_euks") %>% 
  filter(EXP_TYPE == "IGT" & !(TimePoint == "T3")) %>% 
  # Remove repeated counts. Use this in supplement
  # filter(!grepl("b", Replicate_ID)) %>% 
  add_column(IGT_cor = "rm Tf") %>% 
  # mutate(EXP_TYPE = IGT_REP) %>% 
  mutate(IGT_REP = Replicate_ID) %>% 
  unite("Experiment", Name, Replicate_ID, sep = "-", remove = FALSE) %>% 
  select(-REP, everything()) %>% 
  data.frame

# Recalculate lm(), keep replicates separate
igt_regression_noTf_wb <- calculate_lm(IGT_lm_woTf_wb) # Recalculate
```

Plot IGT grazing experiments with newly calculated grazing effect.

#### Figure S9
```{r}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS9_new.svg")
igt_regression_noTf_wb %>% 
  # filter(SizeFrac == "total_euks") %>% 
  # filter(TYPE != "IGT") %>% 
  # Only isolate IGT 4s, where the technical replicates were done
  filter(grepl("IGT4", IGT_REP)) %>% 
  mutate(SITE_ORDER = factor(SITE, levels = site_ids, labels = site_fullname)) %>%
  unite(EXPERIMENT, SITE, Name, IGT_REP, sep = " ", remove = FALSE) %>% 
  ggplot(aes(x = Minutes, y = FLPperEuk, fill = SITE_ORDER, shape = TYPE, group = Experiment)) +
  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = "black", linetype = "dashed", size = 1) +
  geom_point(stat = "identity", fill = "white", 
             size = 3, stroke = 2, aes(shape = TYPE, color = SITE_ORDER)) +
  scale_shape_manual(values = c(21, 21)) +
  scale_color_manual(values = site_color) +
  labs(x = "Minutes", y = bquote("FLP"~eukaryote^-1), title = "Grazing experiment regression") +
  facet_wrap(. ~ EXPERIMENT) +
  # Report r.squared
  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), 
            vjust = 1, hjust = 0, size = 3) +
  theme_bw() + 
  theme(strip.background = element_blank(),
        strip.text = element_text(color = "black", size = 7),
                     legend.title = element_blank(),
                     legend.position = "right")
# dev.off()
```

## Compile and save grazing experiment results

```{r}
calcs_wslope_regression_update <- calcs_wslope_regression %>% 
  filter(TYPE != "IGT") %>% 
  bind_rows(igt_regression_noTf %>% select(-IGT_cor)) %>% 
  data.frame

# Factor
vent_ids <- c("BSW","Plume", "LotsOShrimp", "Shrimpocalypse", 
              "ShrimpHole", "X18", "Rav2", "MustardStand", "OMT")
vent_fullname <- c("Background","Plume", "Lots 'O Shrimp", "Shrimpocalypse",  
                   "Shrimp Hole", "X-18", "Ravelin #2", "Mustard Stand", "Old Man Tree")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
# Factor for shipboard
calcs_wslope_regression_update$SiteOrder <- factor(calcs_wslope_regression_update$Site, levels = site_ids, labels = site_fullname)
calcs_wslope_regression_update$NameOrder <- factor(calcs_wslope_regression_update$Name, levels = vent_ids, labels = vent_fullname)

# View(calcs_wslope_regression_update)
calcs_wslope_regression_update %>%
  select(SiteOrigin, SiteOrder, NameOrder, Experiment, SizeFrac, r.squared, INTERCEPT, SLOPE) %>% distinct()
# write.csv(calcs_wslope_regression_update, file = "output-data/estimated-slopes-grazingexp.csv")
```

# Check FLP control experiments

All incubations had control experiments run alongside them. This was to ensure added FLP did not decrease or change in concentration over time.

```{r}
bac_ctrl <- read.delim("input-data/bac-counts-compiled.txt")
# dim(bac_ctrl)
dtaf <- bac_ctrl %>% 
  mutate(ORIG_ID = Site) %>% 
  separate(SampleID, c("exp", "Replicate", "TimePoint"), sep = "-", remove = FALSE) %>% 
  separate(Site, c("Site", "Name"), sep = "-", remove = FALSE) %>% 
  filter(Stain == "DTAF") %>% 
  filter(!(Name == "Rav2" & Cells.ml > 90000)) %>% # remove inconsistent replicate from Ravelin #2
  filter(!(Name == "Rav2" & Replicate == "REP1")) %>% # remove inconsistent replicate from Ravelin #2
  data.frame

# 
dtaf_avg <- dtaf %>%
  group_by(TimePoint, Stain, Site, Name) %>%
  summarise(Avg_cellsperml = mean(Cells.ml),
            MIN = min(Cells.ml),
            MAX = max(Cells.ml)) %>%
  data.frame
# dtaf_avg
```

## Bag grazing experiment controls

Option to plot averages. However, consistency between Replicate 1 and 2 was not always great. So plotting individually is best to show that the FLP do not disappear due to anomalous reasons.

```{r, fig.height=7, fig.width=7}
# bag_ctrls <- dtaf_avg %>% 
#   filter(Site != "IGT") %>% 
#   ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +
#   geom_errorbar(aes(ymin = MIN, ymax = MAX), width = 0.1) +
#   geom_rect(data = filter(dtaf_avg, TimePoint == "T0", Site != "IGT"), aes(
#                                            ymin = (Avg_cellsperml-(0.15*Avg_cellsperml)),
#                                            ymax = (Avg_cellsperml+(0.15*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = "black") +
#   geom_line(aes(group = Name)) +
#   geom_point(stat = "identity", aes(shape = Site, fill = Name), size = 2) +
#   # scale_fill_manual(values = c("black","#9970ab", "#5aae61")) +
#   facet_wrap(Name ~ Site) +
#   scale_y_log10(labels = scientific_10) +
#   theme_bw() + theme(strip.background = element_blank(), 
#                           legend.title = element_blank(),
#                      axis.text = element_text(size = 10, color = "black"),
#                           title = element_text(size = 10, face = "bold"),
#                           axis.title = element_text(size = 9)) +
#   labs(title = "FLP counts for controls", y = bquote("Log FLP "~mL^-1), x = "Time point")
# bag_ctrls
```

```{r, fig.height=7, fig.width=8}
# View(dtaf)
ship_ctrls_reps <- dtaf %>% 
  filter(Site != "IGT") %>% 
  ggplot(aes(x = TimePoint, y = Cells.ml, fill = Name, shape = Replicate)) +
  geom_rect(data = filter(dtaf, TimePoint == "T0", Site != "IGT"), aes(
                                           ymin = (Cells.ml-(0.15*Cells.ml)),
                                           ymax = (Cells.ml+(0.15*Cells.ml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = "black") +
  geom_line(aes(group = Replicate)) +
  geom_point(stat = "identity", aes(shape = Replicate), size = 2) +
  # scale_fill_manual(values = c("black","#9970ab", "#5aae61")) +
  facet_wrap(Name ~ Site) +
  scale_y_log10(labels = scientific_10) +
  theme_bw() + theme(strip.background = element_blank(), 
                          legend.title = element_blank(),
                     axis.text = element_text(size = 10, color = "black"),
                          title = element_text(size = 10, face = "bold"),
                          axis.title = element_text(size = 9)) +
  labs(title = "FLP counts for controls", y = bquote("Log FLP "~mL^-1), x = "Time point")
ship_ctrls_reps
```


## IGT experiment controls

Repeat for IGT experiments.

```{r, fig.width=6, fig.height=5}
igt_ctrl_reps <- dtaf %>% 
  filter(Site == "IGT") %>% 
  ggplot(aes(x = TimePoint, y = Cells.ml, shape = Replicate)) +
    geom_rect(data = filter(dtaf, TimePoint == "T0", Site == "IGT"), aes(
                                           ymin = (Cells.ml-(0.15*Cells.ml)),
                                           ymax = (Cells.ml+(0.15*Cells.ml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = "black") +
  geom_line(aes(group = Replicate)) +
  geom_point(stat = "identity", aes(shape = Replicate), size = 2) +
  facet_wrap(Name ~ ORIG_ID) +
  scale_y_log10(labels = scientific_10) +
  theme_bw() + theme(strip.background = element_blank(), 
                          legend.title = element_blank(),
                     axis.text = element_text(size = 10, color = "black"),
                          title = element_text(size = 10, face = "bold"),
                          axis.title = element_text(size = 9)) +
  labs(title = "FLP counts for controls", y = bquote("Log FLP "~mL^-1), x = "Time point")
igt_ctrl_reps
```

##### Figure S6

```{r}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS6_1.svg", w = 9, h = 7)
ship_ctrls_reps
# dev.off()

# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS6_2.svg", w = 7, h = 5)
igt_ctrl_reps
# dev.off()
```


# Generate complete table with grazing rates and values

```{r}
# head(calcs_wslope_regression_update)
# View(calcs_wslope_regression_update)
# Generate final table
bsw <- c("Plume", "Background")

table_grazerate <- calcs_wslope_regression_update %>% 
  filter(SizeFrac == "total_euks") %>% 
  select(SAMPLE, FLUID_ORIGIN, CRUISE_SAMPLE, SiteOrder, NameOrder, SLOPE, EXP_TYPE, EXP_REPS, EXP_VOL, CTRL_REPS, CTRL_VOL, IGT_REP, Site, Name, RATE = SLOPE, Minutes) %>% 
  distinct() %>% 
  group_by(SAMPLE, FLUID_ORIGIN, CRUISE_SAMPLE, IGT_REP, EXP_TYPE, EXP_REPS, EXP_VOL, CTRL_REPS, CTRL_VOL, Site, Name, SiteOrder, NameOrder, RATE) %>% 
  summarise(TimePoints = str_c(Minutes, collapse = ", ")) %>% 
  ungroup() %>%
  mutate(GRAZE_RATE = case_when(
    RATE < 0 ~ 0,
    TRUE ~ RATE
  ),
  type = case_when(
    Name == "Plume" ~ "Plume-Shipboard",
    Name == "Background" ~ "Background-Shipboard",
    EXP_TYPE == "IGT" ~ "Vent-IGT",
    EXP_TYPE == "Bag" ~ "Vent-Shipboard"
  ),
  LABEL_REPS = case_when(
    IGT_REP == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>%
  unite("Experiment_rep", Name, LABEL_REPS, sep = "-", remove = FALSE) %>% 
  data.frame
table_grazerate # view complete table of grazing rate results

table_grazerate %>% 
  group_by(Experiment_rep, Site) %>% 
  summarise(mean_rate = mean(GRAZE_RATE),
            min_rate = min(GRAZE_RATE),
            max = max(GRAZE_RATE))

table_grazerate %>% 
  mutate(TYPE = case_when(
    Name == "Plume" ~ "non-vent",
    Name == "Background" ~ "non-vent",
    TRUE ~ "vent"
  )) %>% 
  # group_by(Site, TYPE) %>% 
  # group_by(TYPE) %>%
  group_by(TYPE, EXP_TYPE) %>% 
  summarise(mean_rate = mean(GRAZE_RATE),
            min_rate = min(GRAZE_RATE),
            max = max(GRAZE_RATE))
```

Amend table with estimated FLP concentration

```{r}
# head(table_grazerate)
dtaf_igt <- 5352.8278 # Manually insert FLP concentration for IGT experiments; this value is estimated from how IGT FLP spike-ins were calculated
# 
table_grazerate_wflp <- bac_ctrl %>%
  filter(FLP_t0 == "use") %>%
  add_column(EXP_TYPE = "Bag") %>%
  group_by(Site, EXP_TYPE) %>%
  summarise(FLP_conc = mean(Cells.ml)) %>%
  right_join(table_grazerate, by = c("Site" = "SAMPLE", "EXP_TYPE" = "EXP_TYPE")) %>%
  mutate(FLP_ml = ifelse(EXP_TYPE == "IGT", dtaf_igt, FLP_conc)) %>%
  select(everything(), FIELD = `Site.y`, -FLP_conc) %>% 
  data.frame
```

Introduce factors in table for visualizations

```{r}
type_order <- c("Vent-Bag", "Vent-IGT", "Plume", "Background")
table_grazerate_wflp$TYPE <- factor(table_grazerate_wflp$type, levels = type_order)
vent_ids <- c("BSW","Plume", "LotsOShrimp", "Shrimpocalypse", 
              "ShrimpHole", "X18", "Rav2", "MustardStand", "OMT")
vent_fullname <- c("Background","Plume", "Lots 'O Shrimp", "Shrimpocalypse",  
                   "Shrimp Hole", "X-18", "Ravelin #2", "Mustard Stand", "Old Man Tree")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")
site_color <- c("#E76F51", "#264653")
names(site_color) <- site_fullname
table_grazerate_wflp$FIELDORDER <- factor(table_grazerate_wflp$FIELD, levels = site_ids, labels = site_fullname)
table_grazerate_wflp$VENTORDER <- factor(table_grazerate_wflp$Name, levels = vent_ids, labels = vent_fullname)

# table_grazerate_wflp
```

## Plot FLP/grazer /minute

```{r}
# svg("", h =, w = )
grazing_min_plot <- table_grazerate_wflp %>% 
  mutate(EXP_CATEGORY = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ "IGT"
  )) %>% 
  mutate(EXP_CATEGORY_WREP = case_when(
    EXP_TYPE == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  unite("SITE_TYPE", FIELD, EXP_CATEGORY, sep = "-", remove = FALSE) %>%
  ggplot(aes(y = GRAZE_RATE, x = VENTORDER, shape = SITE_TYPE, 
             fill = SITE_TYPE, color = SITE_TYPE)) +
  geom_jitter(stat = "identity", aes(shape = SITE_TYPE, 
                                     fill = SITE_TYPE, color = SITE_TYPE),
              stroke = 2, size = 3, width = 0.3) +
    scale_shape_manual(values = c(21, 21, 21, 21)) +
    scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
    scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
  facet_grid(.~FIELDORDER, space = "free", scales = "free") +
  # coord_flip() +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title =element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank(),
          legend.position = "top") +
    labs(x = "", y = bquote("Average FLP " ~grazer^-1 ~min^-1))
# dev.off()
grazing_min_plot
```


### Table 1

Create table with all base experiment results. Including, grazing rate derived from slope (and corrected), number of experiments, replicates, and prok and euk counts.

For IGT experiments, or experiments where in situ prok counts were not obtained, the average in situ prok count was used. 
```{r}
# Subset the average in situ prok cells/ml for non-background samples
tmp <- filter(insitu_proks, Name != "BSW", Name != "Plume") %>% select(MEAN)
avg_insitu <- mean(tmp$MEAN)

# View(table_grazerate_wflp)
# View(euk_prok_counts)

table_grazerate_wflp_wprok_weuk <- table_grazerate_wflp %>% 
  select(Experiment_rep, FIELD, Name, SiteOrder, NameOrder, FLUID_ORIGIN, CRUISE_SAMPLE, RATE, RATE_minute = GRAZE_RATE, FLP_ml, TimePoints, EXP_REPS, EXP_VOL, CTRL_REPS, CTRL_VOL) %>% 
  full_join(euk_prok_counts, join_by(Experiment_rep == Experiment_rep, Name == Name, FIELD == Site)) %>% 
  mutate(PROK_ml = ifelse(is.na(PROK_ml), avg_insitu, PROK_ml))

# table_grazerate_wflp_wprok_weuk
# names(table_grazerate_wflp_wprok_weuk)
```

Description of variables above:

-   FIELD - vent location
-   NAME - name of vent site, or plume/background
-   EXP - experiment type, bag or IGT
-   SAMPLE - vent site
-   RATE_minute = GRAZE_RATE - FLPs per grazer per minute (SLOPE of best fitline)
-   FLP_ml - FLP concentration at T0
-   Prok_ml, sem - concentration and standard mean error of concentration of prokaryotes
-   Euk_ml, sem - concentration and standard mean error of concentration of eukaryotes.

# Grazing rate calculations

Based on Unrein et al. 2007, we use the estimated grazing rate, in situ prok abundance, in situ euk abundance, and the concentration of FLP to make additional estimates.

```{r}
# head(table_grazerate_wflp_wprok_weuk)
table_wcalcs <- table_grazerate_wflp_wprok_weuk %>%
  # Ingestion rate per hour
  mutate(RATE_hr = (RATE_minute * 60),
         RATE_day = (RATE_hr * 24), #Compare to GR?
         # FLP concentration per L
         FLP_L = (FLP_ml * 1000),
         # mL per grazer per hr
         CLEARANCE_RATE_ml = (RATE_hr/FLP_ml),
         # nL per grazer per hour
         CLEARANCE_RATE_nL = ((RATE_hr/FLP_ml)/1.00E+6), 
         # proks per grazer per hr
         SPEC_GRAZE_RATE_hr = (CLEARANCE_RATE_ml * PROK_ml), 
         # proks per grazer per day
         GRAZE_RATE_DAY = (24 * SPEC_GRAZE_RATE_hr),
         # proks per ml per hr
         GRAZING_EFFECT_hr = (SPEC_GRAZE_RATE_hr * EUK_ml),
         GRAZING_EFFECT_hr_min = (SPEC_GRAZE_RATE_hr * (EUK_ml - EUK_sem)),
         GRAZING_EFFECT_hr_max = (SPEC_GRAZE_RATE_hr * (EUK_ml + EUK_sem)),
         # cells per ml per day
         GRAZING_EFFECT_day = ((SPEC_GRAZE_RATE_hr * 24) * EUK_ml),
         # Percentage per day
         BAC_TURNOVER_PERC = 100*(GRAZING_EFFECT_day / PROK_ml),
         BAC_TURNOVER_PERC_min = 100*(GRAZING_EFFECT_day / (PROK_ml - PROK_sem)),
         BAC_TURNOVER_PERC_max = 100*(GRAZING_EFFECT_day / (PROK_ml + PROK_sem))) %>% 
  data.frame
# View(table_wcalcs)
```

Explanation of units for table with calculated values.

-   RATE_min & RATE_hr = Grazing rate as 'FLPs per grazer per minute' and per hour

-   CLEARANCE_RATE = ml or nL per grazer per hour

-   SPEC_GRAZE_RATE (Specific grazing rate) = Prokaryotes per grazer per hour

-   GRAZING EFFECT = bacteria per ml per hour

-   Bacterial turnover rate = % per day

### gt table options

```{r}

# bkgd <- c("Background", "Plume")
# 
# library(gt)
# 
# table_wcalcs %>% 
#   mutate(loc_type = case_when(
#     NAME %in% bkgd ~ "Background",
#     TRUE ~ "Vent fluid"
#   )) %>%
#   # group_by(loc_type, SITE, EXP) %>% 
#   select(-SAMPLE) %>% 
#   gt(
#     groupname_col = c("FIELD", "EXP", "loc_type"),
#     rowname_col = "NAME"
#   ) %>% 
#   cols_label(RATE_min = html("minute<sup>-1</sup>"),
#              RATE_hr = html("hour<sup>-1</sup>"),
#              RATE_day = html("day<sup>-1</sup>"),
#              EXP_REPS = html("# of incubations"),
#              FLP_ml = html("FLP ml<sup>-1</sup>"),
#              PROK_ml = html("Prokaryote cells ml<sup>-1</sup>"),
#              PROK_sem = html("SEM prokaryote cells ml<sup>-1</sup>"),
#              EUK_ml = html("Eukaryote cells ml<sup>-1</sup>"),
#              EUK_sem = html("SEM eukaryote cells ml<sup>-1</sup>"),
#              FLP_L = html("FLP L<sup>-1</sup>"),
#              CLEARANCE_RATE_ml = html("ml grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              CLEARANCE_RATE_nL = html("nl grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              SPEC_GRAZE_RATE_hr = html("Prokaryote grazer<sup>-1</sup> hr<sup>-1</sup>"),
#              GRAZE_RATE_DAY = html("Prokaryote grazer<sup>-1</sup> day<sup>-1</sup>"),
#              GRAZING_EFFECT_hr = html("Prokaryote ml<sup>-1</sup> hr<sup>-1</sup>"),
#              GRAZING_EFFECT_hr_min = html("MIN"),
#              GRAZING_EFFECT_hr_max = html("MAX"),
#              GRAZING_EFFECT_day = html("Prokaryote ml<sup>-1</sup> day<sup>-1</sup>"),
#              BAC_TURNOVER_PERC = html("Bacteria turnover % day<sup>-1</sup>"),
#              BAC_TURNOVER_PERC_min = html("MIN"),
#              BAC_TURNOVER_PERC_max = html("MAX")) %>% 
#   tab_spanner(
#     label = (html("Turnover")),
#     columns = starts_with("BAC_TURNOVER")
#   ) %>% 
#   tab_spanner(
#     label = (html("Grazing rate: prokaryote cells consumed")),
#     columns = starts_with("GRAZING_EFFECT")
#   ) %>% 
#   tab_spanner(
#     label = (html("ml grazer<sup>-1</sup> hr<sup>-1</sup>")),
#     columns = c(CLEARANCE_RATE_ml, CLEARANCE_RATE_nL)
#   ) %>% 
#   tab_spanner(
#     label = html("Specific grazing rate"),
#     columns = c(SPEC_GRAZE_RATE_hr, GRAZE_RATE_DAY)
#   ) %>% 
#   tab_spanner(
#     label = (html("FLPs grazer<sup>-1</sup>")),
#     columns = c(RATE_hr, RATE_min, RATE_day),
#   ) %>% 
#   tab_spanner(
#     label = (html("Cell counts")),
#     columns = c(PROK_ml, PROK_sem, EUK_ml, EUK_sem, FLP_L, FLP_ml),
#   ) %>% 
#   tab_source_note(source_note = "NAs indicate values were unavailable.
#                   Zero values for rates indicate no grazing pressure detected.") %>% 
#   fmt_scientific(columns = everything()) %>% 
#   tab_options(
#     table.font.size = 12,
#     table.border.top.color = "black",
#     column_labels.border.bottom.color = "black",
#     column_labels.border.bottom.width= px(3),
#     table.width = pct(100))
```

Table 1 and S1 - grazing experiment information only
```{r}
# April 18, 2023
# ## Table 1
# write_delim(table_wcalcs %>%
#               select(SiteOrder, NameOrder, FLUID_ORIGIN, CRUISE_SAMPLE, EUK_ml, EUK_MinMax, PROK_ml, PROK_MinMax, GRAZING_EFFECT_hr, RATE_minute, CLEARANCE_RATE_ml, BAC_TURNOVER_PERC),
#             file = "output-data/table1-grazing-exp-list.txt", delim = "\t")
# # 
# # ## Table S2
# write_delim(table_wcalcs %>%
#               select(SiteOrder, NameOrder, FLUID_ORIGIN, CRUISE_SAMPLE,
#                      TimePoints, starts_with("EXP"), starts_with("CTRL"), EUK_ml, EUK_MinMax, EUK_sem, PROK_ml, PROK_MinMax, PROK_sem, FLP_ml, GRAZE_RATE_DAY, Slope = RATE, RATE_minute, GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, BAC_TURNOVER_PERC),
#             file = "output-data/tableS2-grazing-exp-list.txt", delim = "\t")
```


# Carbon biomass for eukaryotes

References for estimating biovolume *Pernice, M.C., Forn, I., Gomes, A., Lara, E., Alonso-Sáez, L., Arrieta, J.M., et al. (2015) Global abundance of planktonic heterotrophic protists in the deep ocean. ISME J 9: 782--792.*

```{r}
# Import manual biovolume measurements
biov <- read.delim("input-data/biovol-euk-12-10-2020.txt")
# head(biov)
```

## C factor based on biovolume

(1) Calculate biovolume based on observed/imaged cells

```{r}
# Calculate biovolume, then apply carbon by biomass estimate for protists derived from biovolume.
# h = largest cell dimension "height"
# d = largest cross-section of h
biov_calc <- biov %>% 
  mutate(BIOVOLUME = ((pi/6) * (d^2) * h)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999
  mutate(pgC_cell_MD_dino = (0.760 * (BIOVOLUME^0.819))) %>% # Menden-Deuer and Lessard 2000
  mutate(pgC_cell_MD_nodiatom = (0.216 * (BIOVOLUME^0.939))) # Menden-Deuer and Lessard 2000
# head(biov_calc)
# biov_calc
# mean(c(80, 360))
# no diatom is what Pernice used.
```


Use ```pgC_cell_MD_nodiatom``` moving forward.

(2) Get a summary pg per cell for vent and background samples. This is derived from biovolume estimates.

## Biomass summaries
```{r}
c_factor_biov <- 
  biov_calc %>% select(-EXP, -h, -d) %>% 
  pivot_longer(cols = c(BIOVOLUME, starts_with("pgC_")), names_to = "VARIABLES", values_to = "VALUES") %>% 
  group_by(VENT_BSW, VARIABLES) %>% 
    summarise(mean = mean(VALUES),
              max = max(VALUES),
              min = min(VALUES)) %>% 
  pivot_wider(names_from = VENT_BSW, values_from = c(mean, max,min), names_sort = FALSE)
# View(c_factor_biov)
```



(3) Assign a C conversion factor for background and within vents based on biovolume

```{r}
# pg C per cell (pgC_cell)

pgC_cell_BSW <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$mean_BSW

pgC_cell_vent <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$mean_vent

pgC_cell_BSW_min <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$min_BSW

pgC_cell_vent_min <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$min_vent

pgC_cell_BSW_max <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$max_BSW

pgC_cell_vent_max <- subset(c_factor_biov, VARIABLES == "pgC_cell_MD_nodiatom")$max_vent

pgC_cell_BSW
pgC_cell_vent
```




(4) Combine with count table to estimate total standing stock in carbon

Isolate at T0 all the euk cells per ml counts. Then add in the mean, min/max for the pg C per cell, based on the vent vs non-vent.

```{r}
# counts_cellsml_avg
pgC_ml_biov_bysample <- counts_cellsml_avg %>% 
  filter(TimePoint == "T0") %>%
  filter(VARIABLE == "eukCONC") %>% 
  mutate(SAMPLE_TYPE_BIN = case_when(
    Name == "Background" ~ "Non-vent",
    Name == "Plume" ~ "Non-vent",
    TRUE ~ "Vent"
  )) %>% 
  # pg C per ml = (cells per ml)*(pg C per)
  ## Apply the non-vent and vent pg C per cell value to total cells per ml
  mutate(pgC_ml_mean = case_when(
    SAMPLE_TYPE_BIN == "Non-vent" ~ MEAN * pgC_cell_BSW,
    SAMPLE_TYPE_BIN == "Vent" ~ MEAN * pgC_cell_vent,
  )) %>% 
  mutate(pgC_ml_min = case_when(
    SAMPLE_TYPE_BIN == "Non-vent" ~ MEAN * pgC_cell_BSW_min,
    SAMPLE_TYPE_BIN == "Vent" ~ MEAN * pgC_cell_vent_min
  )) %>% 
  mutate(pgC_ml_max = case_when(
    SAMPLE_TYPE_BIN == "Non-vent" ~ MEAN * pgC_cell_BSW_max,
    SAMPLE_TYPE_BIN == "Vent" ~ MEAN * pgC_cell_vent_max
  )) %>% 
  mutate(IGT_REP = case_when(
    IGT_REP == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  unite("Experiment_rep", Name, IGT_REP, sep = "-", remove = FALSE)

pgC_ml_biov_bysample
```
Table reports the total pg of carbon per ml when we consider the whole eukaryote community (based on cell count).

Report in pg of C per ml. 

```{r}
vent_ids <- c("BSW","Plume", "LotsOShrimp", "Shrimpocalypse", 
              "ShrimpHole", "X18", "Rav2", "MustardStand", "OMT")
vent_fullname <- c("Background","Plume", "Lots 'O Shrimp", "Shrimpocalypse",  
                   "Shrimp Hole", "X-18", "Ravelin #2", "Mustard Stand", "Old Man Tree")
site_ids <- c("VD", "Piccard")
site_fullname <- c("Von Damm", "Piccard")

by_biovol_plot <- pgC_ml_biov_bysample %>% 
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>%
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  ggplot(aes(x = Experiment_rep, y = (pgC_ml_mean))) +
    geom_point(shape = 21, color = "black") + 
    geom_linerange(aes(ymin = (pgC_ml_min), ymax = (pgC_ml_max))) +
  facet_grid(.~SiteOrder + NameOrder, space = "free", scales = "free") +
  scale_y_continuous(labels = scientific_10) +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 12, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 12),
           axis.title =element_text(color="black", size = 12),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
       shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = bquote("Estimated total biomass: pg C " ~ml^-1),
         title = "Carbon pool of protists - derived from biovolume")

by_biovol_plot
```


## C biomass based on size fraction

Derived from Caron et al. 1995

(1) Assign by size class

Assuming conversion factor is 183 fg C per um.

For nanoplankton <20um, picoplankton are included for now. We are assuming the size range of nanoplankton are 3um.
```{r}
vol_nano <- (4/3) * pi * (3^3)
vol_nano # units are um^3
fg_nano_c <- 183 * vol_nano #units are now fg per C
c_n <- (fg_nano_c)/1000
c_n
```

For microplankton, we are assuming the cell diameter is 50 um.
```{r}
vol_micr <- (4/3) * pi * (50^3)
vol_micr # units are um^3
fg_micr_c <- 183 * vol_micr #units are now fg per C
c_m <- (fg_micr_c)/1000
c_m
```
```{r}
c_n
c_m * (1e-6)
# 1pg to 1e-6ug
```


```{r}
pgC_ml_sizefrac_bysample_tmp <- counts_cellsml_avg %>% 
  mutate(IGT_REP = case_when(
    IGT_REP == "Bag" ~ "Shipboard",
    TRUE ~ IGT_REP
  )) %>% 
  unite("Experiment_rep", Name, IGT_REP, sep = "-", remove = FALSE) %>% 
  filter(TimePoint == "T0") %>%
  filter(VARIABLE != "eukCONC") %>% # isolate micro vs. nano
  mutate(SAMPLE_TYPE_BIN = case_when(
    Name == "Background" ~ "Non-vent",
    Name == "Plume" ~ "Non-vent",
    TRUE ~ "Vent"
  )) %>% 
  mutate(pg_C_cell = case_when(
    VARIABLE == "microCONC" ~ c_m,
    VARIABLE == "nanoCONC" ~ c_n
  )) %>% 
  # multiply mean cells per ml of micro and nano by pg C for each size fraction:
  mutate(pg_C_ml_TMP = MEAN * pg_C_cell) %>% 
  group_by(Experiment_rep, Site, Name, TimePoint, EXP_TYPE, IGT_REP, SAMPLE_TYPE_BIN, VARIABLE) %>% 
  # Take the average of the micro and nano for each experiment.
  summarise(pg_C_ml = mean(pg_C_ml_TMP))

# Isolate total euk for each experiment by adding.
tmp2 <- pgC_ml_sizefrac_bysample_tmp %>% 
  group_by(Experiment_rep, Site, Name, TimePoint, EXP_TYPE, IGT_REP, SAMPLE_TYPE_BIN) %>% 
  # Add across micro and nano to get total
  summarize(pg_C_ml = sum(pg_C_ml)) %>% 
  add_column(VARIABLE = "totaleuk")

pgC_ml_sizefrac_bysample <- rbind(tmp2, pgC_ml_sizefrac_bysample_tmp)
pgC_ml_sizefrac_bysample
```

```{r}
pgC_ml_sizefrac_bysample %>% 
  group_by(SAMPLE_TYPE_BIN, VARIABLE) %>% 
  summarise(MEAN_pg_C_ml = mean(pg_C_ml),
            MAX_pg_C_ml = max(pg_C_ml),
            MIN_pg_C_ml = min(pg_C_ml))

head(pgC_ml_sizefrac_bysample)
```

```{r}
by_sizefrac_plot <- pgC_ml_sizefrac_bysample %>% 
   mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>%
  mutate(SiteOrder = factor(Site, levels = site_ids, labels = site_fullname)) %>% 
  ggplot(aes(x = Experiment_rep, y = (pg_C_ml))) +
    geom_point(color = "black", aes(shape = VARIABLE)) + 
    # geom_linerange(aes(ymin = (pgC_ml_min/1000), ymax = (pgC_ml_max/1000))) +
  facet_grid(.~SiteOrder + NameOrder, space = "free", scales = "free") +
  scale_y_continuous(labels = scientific_10) +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
           panel.background = element_blank(), 
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 12, 
                                      angle = 45, hjust = 1, vjust = 1), 
           axis.text.y = element_text(color="black", size = 12),
           axis.title =element_text(color="black", size = 12),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
       shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = bquote("Estimated total biomass: pg C " ~ml^-1),
         title = "Carbon pool of protists - based on size fraction")
```

Combined supplementary plot showing two routes of determining total biomass.

## Figure S3
```{r, fig.height=8, fig.width=7}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS3_new.svg", h = 8, w = 7)
by_biovol_plot + by_sizefrac_plot + patchwork::plot_layout(ncol = 1) +
  plot_annotation(tag_levels = "a")
# dev.off()
```

## Compare total carbon biomass - euks

Compilation table of carbon biomass values for microeukaryotes by sample type and vent field

### Table S4

```{r}
## Carbon biomass derived from biovolume, by vent field (vent only)
table4_cbiomass_total <- pgC_ml_biov_bysample %>% 
  group_by(VARIABLE, Site, EXP_TYPE, SAMPLE_TYPE_BIN) %>% 
  summarise(MEAN_pg_C_ml = mean(pgC_ml_mean),
            MAX_pg_C_ml = max(pgC_ml_mean),
            MIN_pg_C_ml = min(pgC_ml_mean)) %>% 
  add_column(ORIGIN = "bybiovolume") %>% 
  rbind(pgC_ml_sizefrac_bysample %>% 
  group_by(VARIABLE, Site, SAMPLE_TYPE_BIN, EXP_TYPE) %>% 
  summarise(MEAN_pg_C_ml = mean(pg_C_ml),
            MAX_pg_C_ml = max(pg_C_ml),
            MIN_pg_C_ml = min(pg_C_ml)) %>% 
  add_column(ORIGIN = "sizefrac")
  )

# table4_cbiomass_total
write.csv(table4_cbiomass_total, file = "output-data/tableS4-cbiomass.csv")
```



## Compare biovolumes from literature to measured in this study

Compare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10\^7 µm\^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell.

Import the heterotroph species volume and carbon content to compare to my measured values. Compare to md-lessard (Supplementary)

```{r}
c_prev <- read.delim("input-data/md-lessard-2000.txt") # Table 2, heterotrophs only
# c_prev
# biov
# combine and plot
carbon_compare <- c_prev %>% 
  add_column(source = "Menden-Deuer Lessard") %>% 
  select(source, Volume = vol, pgC_cell) %>% 
  rbind(biov_calc %>% add_column(source = "MCR") %>% select(source, Volume = BIOVOLUME, pgC_cell = pgC_cell_MD_nodiatom)) %>% 
    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +
      geom_point(aes(fill = source), shape = 23, color = "black", size = 3) +
      scale_y_log10() + scale_x_log10() +
      labs(title = "Compare literature to measured cell volume & C content",
           x = bquote("Volume" ~µm^3),
           y = bquote("pg C" ~cell^-1)) +
      theme_bw() + theme(legend.title = element_blank(),
                         axis.title = element_text(size = 14),
                         axis.text = element_text(size = 14),
                         legend.text = element_text(size = 14))

carbon_compare
```

Upon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall.

# Carbon biomass for prokaryotes

Now, report estimated carbon per cell for bacteria.

Units: fg C per cell.

```{r Incorporate prokaryote carbon estimates}
bac_carbon_Mor_fg <- (86) 
#From Derived from Morono et al. 2011 

bac_carbon_Lof_fg <- (173) 
# Derived from McNichol et al. 2018; LOFERER-KROBACHER, J. KLIMA & R. PSENNER 1998

# fg C per cell
bac_carbon_mean <- 15
bac_carbon_min <- 10
bac_carbon_max <- 20
```

Import main table with all estimates of cells

```{r}
# table_wcalcs <- read_delim(file = "output-data/table1-grazing-exp-list.txt", delim = "\t")
# head(table_wcalcs)
```

RATE_min units = FLPs per grazer per minute Clearance rate \_ml = ml per grazer per hour

```{r}
##
est_prok_carbon <- table_wcalcs %>% 
  select(SiteOrder, NameOrder, SiteOrder, FLUID_ORIGIN, CRUISE_SAMPLE,  starts_with("PROK_"), GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, RATE_minute) %>% 
  # Add in calcs by fg C per cell.
  ## Estimates of carbon pool of microbes per ml. 
  mutate(MOR_fgC_ml = bac_carbon_Mor_fg * PROK_ml,
         LOF_fgC_ml = bac_carbon_Lof_fg * PROK_ml,
         MEAN_fgC_ml = bac_carbon_mean * PROK_ml,
         MAX_fgC_ml = bac_carbon_max * PROK_ml,
         MIN_fgC_ml = bac_carbon_min * PROK_ml) %>% 
  pivot_longer(cols = ends_with("fgC_ml"), names_to = "prokC_category", values_to = "fgC_ml")

# head(est_prok_carbon)
```

Get summary of prokaryotic biomass

```{r}
est_prok_carbon %>% 
  mutate(SAMPLE_TYPE_BIN = case_when(
    NameOrder == "Background" ~ "Non-vent",
    NameOrder == "Plume" ~ "Non-vent",
    TRUE ~ "Vent"
  )) %>%
  group_by(SAMPLE_TYPE_BIN, prokC_category) %>% 
  # 1 fg == 0.001 pg
  # Convert to pg C per ml
  summarise(mean_pgC_ml = mean((fgC_ml)*(0.001)),
            min_pgC_ml = min((fgC_ml)*(0.001)),
            max_pgC_ml = max((fgC_ml)*(0.001))) 
# head(est_prok_carbon)
```

## Incorporate carbon biomass of prey and grazing rate

Clearance rate is mL per grazer per hour (Table S3).
Grazing effect is prokaryotes ml-1 hr-1 (Table S3).
```{r}
## Carbon consumed based on clearance rate
carbon_consumed <- est_prok_carbon %>% 
  #use only value from Morono et al., convert to pg C per cell.
  filter(prokC_category == "MOR_fgC_ml") %>% 
  add_column(bac_carbon_Mor_pg = (bac_carbon_Mor_fg * 0.001)) %>% 
  select(SiteOrder, NameOrder, SiteOrder, FLUID_ORIGIN, CRUISE_SAMPLE, PROK_ml, GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, bac_carbon_Mor_pg, fgC_ml) %>% 
  # Clearance rate * fg of prok == pg C per grazer per hr
  # bac_carbon_Mor_pg * grazing effect == pg C per ml per hr
  mutate(pgC_pergrazer_CLEARANCE = (fgC_ml*0.001) * CLEARANCE_RATE_ml,
         pgC_perml_perhr = bac_carbon_Mor_pg * GRAZING_EFFECT_hr)
carbon_consumed
```



# Environmental parameters - MCR

Import from Hu et al. (*Molecular Ecology*).

```{r}
env_tmp <- read.delim("../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/samplelist-metadata.txt")
# head(env_tmp)

mcr_metadata <- env_tmp %>% 
  filter(SITE == "VonDamm" | SITE  == "Piccard") %>% 
  mutate(FIELD =  case_when(
    SITE == "VonDamm"  ~ "Von Damm",
    SITE == "Piccard" ~ "Piccard")) %>% 
  filter(SAMPLETYPE != "Incubation") %>% 
  separate(SAMPLE, into = c("num", "loc", "loc2", "fluid_origin", "name", "FLUID_ORIGIN", "else"), remove = FALSE) %>% 
  select(-Sample_or_Control, -SAMPLEID, -ref_num, -SITE, SEQ_SAMPLE = SAMPLE,FLUID_ORIGIN, everything(), -num, -loc, -loc2, -fluid_origin, -name, -`else`)

# View(mcr_metadata)
```

Generate supplementary table.

```{r}
supp_table_env_mcr <- mcr_metadata %>% 
  select(FIELD, VENT, SAMPLETYPE, DEPTH, TEMP = temp, PH = pH, PERCSEA = percseawater, MG = mg, H2 = h2, H2S = h2s, CH4 = ch4, MICROBIAL = ProkConc, everything())

# Save supplementary metadata table:
write.csv(supp_table_env_mcr, file = "output-data/supp_table_MCR_metadata.csv")
```

# Analysis of grazing rate results

Re-import table from output table with all grazing values


Format and factor values to plot, and prioritize these values:

-   Grazing rate column == FLP per minute consumed
-   Grazing effect hr == cells per ml per hr
-   Specific ingestion rate == % of cell carbon per day, estimated with literature and measured carbon values

Report grazing rates
```{r}
# head(table_wcalcs)
# head(table_grazerate_wflp_wprok_weuk)
# head(pgC_ml_biov_bysample)
# head(pgC_ml_sizefrac_bysample)

# Saved April 29, 2023
save(table_grazerate_wflp_wprok_weuk, table_wcalcs, pgC_ml_biov_bysample, pgC_ml_sizefrac_bysample, carbon_consumed, file = "output-data/processed-dfs-mcr-grazing.RData")
load("output-data/processed-dfs-mcr-grazing.RData")
```


Plot grazing rates
```{r}
grazing_rate <- table_wcalcs %>%
  mutate(SAMPLE_TYPE_BIN = case_when(
    NameOrder == "Background" ~ "Non-vent",
    NameOrder == "Plume" ~ "Non-vent",
    TRUE ~ "Vent"
  )) %>%
  mutate(NameOrder = factor(Name, levels = vent_ids, labels = vent_fullname)) %>%
  mutate(SiteOrder = factor(FIELD, levels = site_ids, labels = site_fullname)) %>% 
  # group_by(SAMPLE_TYPE_BIN) %>%
  separate(Experiment_rep, into = c("name", "exptype_rep"), remove = FALSE) %>% 
  mutate(exptype = case_when(exptype_rep == "Shipboard" ~ "Shipboard",
                             TRUE ~ "IGT")) %>% 
  ggplot(aes(x = NameOrder, y = GRAZING_EFFECT_hr, shape = SITE_TYPE, 
                                      fill = SITE_TYPE, color = SITE_TYPE)) +
  geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), 
                  width = 0.2, color = "black", position = position_dodge(width = 0.75)) +
    geom_point(stat = "identity", aes(shape = SITE_TYPE, 
                                      fill = SITE_TYPE, color = SITE_TYPE),
               stroke = 2, size = 3, position = position_dodge(width = 0.75)) +
  scale_shape_manual(values = c(21, 21, 21, 21)) +
  scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
  facet_grid(.~SiteOrder, space = "free", scales = "free") +
  theme_minimal() +
  theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
        panel.background = element_blank(), 
        axis.line = element_line(colour = "black"), 
        axis.text.x = element_text(color="black", size = 13, 
                                   angle = 45, hjust = 1, vjust = 1), 
        axis.text.y = element_text(color="black", size = 13),
        axis.title =element_text(color="black", size = 13),
        axis.ticks = element_line(),
        strip.text =element_blank(), legend.title = element_blank(),
        legend.position = "top") +
  labs(x = "", y = bquote("Cells consumed " ~ml^-1 ~hr^-1))

grazing_rate + scale_y_log10()
```
```{r}
grazing_rate + scale_y_log10(labels = scientific_10, limits = c(1,1e5))
```

# Figure 1 compilation

```{r, fig.height=8, fig.width=10}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/fig1.svg", w = 10, h = 8)

  (euk_plot + theme(legend.position = "none")) +
  (prok_plot + theme(legend.position = "none")) +
  (grazing_min_plot + theme(legend.position = "none") + scale_y_continuous(limits = c(0, 0.02))) +
  (grazing_rate + scale_y_log10(labels = scientific_10, limits = c(1,1e5)) + theme(legend.position = "none")) + patchwork::plot_layout(ncol = 2) +
  patchwork::plot_annotation(tag_levels = "a")
# dev.off()
```

## Grazing rate vs. cells ml

Combine metadata from environment with grazing rate results.
```{r}
# head(table_wcalcs)
# View(mcr_metadata)
# Modify fluid origin to match metadata and results
mod_metadata <- mcr_metadata %>% 
  filter(SAMPLETYPE != "Incubation") %>%
  filter(VENT != "Quakeplume") %>% 
  separate(FLUID_ORIGIN, into = c("FLUID", "HOG"), sep = "HOG", remove = FALSE) %>% 
  separate(FLUID_ORIGIN, into = c("FLUID2", "excess"), sep = "J2", remove = FALSE) %>% 
  separate(excess, into = c("FLUID3", "hogexcess"), sep = "HOG", remove = FALSE) %>% 
  mutate(FLUID_ORIGIN = case_when(
    FLUID2 == "CTD003" ~ "CTD001", #Correction for plume VD
    is.na(FLUID3) ~ FLUID2,
    TRUE ~ paste("J2-", FLUID3, sep = "")
  )) %>% 
  select(-FLUID, -FLUID2, -FLUID3, -HOG, -excess, -hogexcess) %>% 
  mutate(Name = case_when(
    VENT == "OldManTree" ~ "OMT",
    TRUE ~ VENT
  ))
# unique(table_wcalcs$Name)
# mod_metadata
# setdiff(mod_metadata$FLUID_ORIGIN, table_wcalcs$FLUID_ORIGIN)

grazing_wenv <- table_wcalcs %>% 
  select(SiteOrder, Name, Experiment_rep, FLUID_ORIGIN, RATE_minute, starts_with("EUK_"), starts_with("PROK_"), starts_with("GRAZING_EFFECT"), CLEARANCE_RATE_ml, SPEC_GRAZE_RATE_hr, BAC_TURNOVER_PERC) %>%
  left_join(mod_metadata, join_by(Name == Name, FLUID_ORIGIN == FLUID_ORIGIN))

# View(grazing_wenv)
```


```{r}
# View(plot_metadata)
euk_temp <- grazing_wenv %>% 
    mutate(TEMP = as.numeric(temp)) %>% 
    mutate(EXP_TYPE = case_when(
      grepl("IGT", Experiment_rep) ~ "IGT",
      TRUE ~ "Shipboard"
    )) %>% 
  unite(SITE_TYPE, SiteOrder, EXP_TYPE, sep = "-", remove = FALSE) %>% 
  filter(!(SITE_TYPE == "NA-IGT")) %>% 
  ggplot(aes(x = GRAZING_EFFECT_hr, y = EUK_ml, 
             fill = TEMP, color = TEMP, shape = SITE_TYPE)) +
    # geom_errorbar(aes(ymin = (log10(EUK_ml)-(EUK_sem)),ymax = (log10(EUK_ml)+(EUK_sem)))) +
    #   geom_errorbarh(aes(xmin = log10(GRAZING_EFFECT_hr_min),xmax = log10(GRAZING_EFFECT_hr_max))) +
  geom_errorbar(aes(ymin = ((EUK_ml)-(EUK_sem)),ymax = ((EUK_ml)+(EUK_sem))), color = "black") +
      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max)), color = "black") +
  # geom_point(aes(shape = EXP_TYPE), size = 4, stroke = 2) +
  geom_point(aes(shape = SITE_TYPE), size = 4, stroke = 2) +
  scale_y_log10() + 
  scale_x_log10() +
  scale_shape_manual(values = c(2, 24, 6, 25)) +
  scale_fill_distiller(palette = "YlOrRd", direction=2, na.value = "grey50") +
  scale_color_distiller(palette = "YlOrRd", direction=2, na.value = "grey50") +
  theme_minimal() +
    theme(rect = element_rect(fill = "transparent"),
        # panel.background = element_rect(fill = "transparent"),
        panel.background = element_rect(fill = "#f0f0f0"),
        plot.background = element_rect(fill = "transparent", color = NA),
        panel.grid.major = element_line(color = "#737373"), panel.grid.minor = element_blank(),
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title =element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank()) +
  labs(x = bquote("Cells consumed "~mL^-1 ~hr^-1), y = bquote("Eukaryote cells "~mL^-1),
       title = "")

euk_temp
```

```{r}
prok_temp <- grazing_wenv %>% 
    mutate(TEMP = as.numeric(temp)) %>% 
    mutate(EXP_TYPE = case_when(
      grepl("IGT", Experiment_rep) ~ "IGT",
      TRUE ~ "Shipboard"
    )) %>% 
  unite(SITE_TYPE, SiteOrder, EXP_TYPE, sep = "-", remove = FALSE) %>% 
    filter(!(SITE_TYPE == "NA-IGT")) %>% 
  ggplot(aes(x = GRAZING_EFFECT_hr, y = PROK_ml, 
             fill = TEMP, color = TEMP, shape = SITE_TYPE)) +
  geom_errorbar(aes(ymin = ((PROK_ml)-(PROK_sem)),ymax = ((PROK_ml)+(PROK_sem))), color = "black") +
      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max)), color = "black") +
  geom_point(aes(shape = SITE_TYPE), size = 4, stroke = 2) +
  scale_y_log10(labels = scientific_10) + 
  scale_x_log10() +
  # scale_shape_manual(values = c(1, 19)) +
  scale_shape_manual(values = c(2, 24, 6, 25)) +
  scale_fill_distiller(palette = "YlOrRd", direction=2, na.value = "grey50") +
  scale_color_distiller(palette = "YlOrRd", direction=2, na.value = "grey50") +
  theme_minimal() +
    theme(rect = element_rect(fill = "transparent"),
        # panel.background = element_rect(fill = "transparent"),
       panel.background = element_rect(fill = "#f0f0f0"),
        plot.background = element_rect(fill = "transparent", color = NA),
        panel.grid.major = element_line(color = "#737373"), panel.grid.minor = element_blank(),
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title =element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text =element_blank(), legend.title = element_blank()) +
  labs(x = bquote("Cells consumed "~mL^-1 ~hr^-1), y = bquote("Microbial prey cells "~mL^-1),
       title = "")

prok_temp
```

# Figure 2 compilation

```{r, warnings=FALSE, fig.height=10, fig.width=7}
# fig2 <- (euk_temp + labs(x = "") + theme(legend.position = "none")) + prok_temp + patchwork::plot_layout(ncol = 1) + patchwork::plot_annotation(tag_levels = "a")
# 
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/fig2.svg", h = 10, w = 7)
# fig2
# dev.off()
# # 
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/fig2-a.svg", h = 5, w = 7)
# euk_temp
# dev.off()
# 
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/fig2-b.svg", h = 5, w = 7)
# prok_temp
# dev.off()
```


# Comparison with Gorda Ridge

Import data from Gorda Ridge

```{r}
gr <- read.delim("../../GordaRidgeCruise_2019/protist-gordaridge-2021/Grazing-at-GordaRidge-SKH-2021/data-input/Grazing-calc-wCarbon-results.txt")

temps <- read.delim("../../GordaRidgeCruise_2019/protist-gordaridge-2019-analysis/temperature-allvents.txt")

mcr_graze <- read.delim("output-data/table-wcalc.txt")
```

## Combine GR and MCR data

```{r}
all_vents <- mcr_graze %>%
  type.convert(as.is = TRUE) %>%
  select(FIELD, NAME, SAMPLE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, GRAZING_EFFECT_hr_min, GRAZING_EFFECT_hr_max, BAC_TURNOVER_PERC) %>% 
  rbind(gr %>%
          add_column(FIELD = "Gorda Ridge") %>% 
          add_column(EUK_ml = NA) %>% 
          separate(SAMPLE, c("SAMPLE", "NAME"), sep = "-") %>% 
          select(FIELD, NAME, SAMPLE, EXP = Bottle, PROK_ml = prok_avg, EUK_ml, GRAZING_EFFECT_hr = GrazingRate_hr, GRAZING_EFFECT_hr_min = GrazingRate_hr_min, GRAZING_EFFECT_hr_max = GrazingRate_hr_max, BAC_TURNOVER_PERC = Prok_turnover)) %>% 
  left_join(temps) %>% 
  mutate(SAMPLE_TYPE = case_when(
    grepl("BSW", NAME) ~ "Background",
    grepl("Near vent BW", NAME) ~ "Background",
    grepl("Background", NAME) ~ "Background", 
    grepl("Plume", NAME) ~ "Background",
    TRUE ~ "Vent"
  ))
# View(all_vents)
# all_vents
# write_delim(all_vents, file = "output-data/grazing-cellcounts-GR_MCR.txt", delim = "\t")
```

## Plot combined results

```{r}
# head(all_vents)
allrates <- all_vents %>% 
  mutate(EXPERIMENTTYPE = case_when(
    EXP == "IGT" ~ "IGT",
    TRUE ~ "Shipboard"
  )) %>% 
  select(EXPERIMENTTYPE, FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with("GRAZING_EFFECT_")) %>% 
  distinct() %>% 
    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, color = FIELD, shape = EXPERIMENTTYPE)) +
    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), 
                  width = 0.2, position = position_dodge(width = 0.4), color = "black") +
    geom_point(stat = "identity", aes(color = FIELD, shape = EXPERIMENTTYPE),
               size = 3, stroke = 2, position = position_dodge(width = 0.4)) +
    scale_shape_manual(values = c(1, 19)) +
    scale_color_manual(values = c("#addd8e", "#264653", "#E76F51")) +
    facet_grid(. ~ SAMPLE_TYPE, scales = "free", space = "free") +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"), 
          axis.text.x = element_text(color="black", size = 12, 
                                     angle = 45, hjust = 1, vjust = 1), 
          axis.text.y = element_text(color="black", size = 12),
          axis.title =element_text(color="black", size = 12),
          axis.ticks = element_line(),
          legend.title = element_blank(),
          strip.placement = "outside",
          strip.text.y = element_text(color="black", size = 12),
          strip.text.x = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
           shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = bquote("cells"~ml^-1~hr^-1))
#
 # scale_fill_manual(values = c("#E76F51", "#264653")) +
  # scale_color_manual(values = c("#E76F51", "#264653")) +
```

Add Gorda Ridge comparison to supplementary?

#### Figure S8
```{r, fig.height=4, fig.width=6}
# allrates
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS7.svg", h = 4, w = 6)
allrates + scale_y_log10()
# dev.off()
# allrates + scale_y_continuous(limits = c(0,1000))
```

### Remove undetected grazing rate

Repeat grazing rate plot, but removed undetectable

```{r}
# unique(all_vents$GRAZING_EFFECT_hr)
allrates_nonzero <- all_vents %>% 
  filter(GRAZING_EFFECT_hr > 0) %>% 
  select(FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with("GRAZING_EFFECT_")) %>% 
  distinct() %>% 
    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, fill = FIELD, shape = SAMPLE_TYPE)) +
    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), 
                  width = 0.2, position = position_dodge(width = 0.4)) +
    geom_point(stat = "identity", aes(fill = FIELD, shape = SAMPLE_TYPE),
               color = "black", size = 3, position = position_dodge(width = 0.4)) +
    scale_shape_manual(values = c(21, 24)) +
    scale_fill_manual(values = c("#de2d26", "#1c9099", "#addd8e")) +
    facet_grid(. ~ SAMPLE_TYPE, scales = "free", space = "free") +
    theme_minimal() +
    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),
          panel.background = element_blank(), 
          axis.line = element_line(colour = "black"), 
          axis.text.x = element_text(color="black", size = 11, 
                                     angle = 45, hjust = 1, vjust = 1), 
          axis.text.y = element_text(color="black", size = 11),
          axis.title =element_text(color="black", size = 11),
          axis.ticks = element_line(),
          legend.title = element_blank(),
          strip.placement = "outside",
          strip.text.y = element_text(color="black", size = 11),
          strip.text.x = element_blank())+
    guides(fill = guide_legend(override.aes = list(shape = c(21))),
           shape = guide_legend(override.aes = list(fill = "black"))) +
    labs(x = "", y = bquote("cells"~ml^-1~hr^-1))
```

```{r, fig.height=4, fig.width=7}
# svg("compare-all-rates-color-nonZero.svg", h = 4, w = 7)
allrates_nonzero + scale_y_log10()
# dev.off()
```


## Plot variables as a factor of grazing rate.

```{r}
head(grazing_wenv)
```
##### Figure S7
```{r, fig.height=8, fig.width=10}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS6.svg", h = 8, w = 10)
grazing_wenv %>% 
    mutate(TEMP = as.numeric(temp)) %>% 
    mutate(EXP_TYPE = case_when(
      grepl("IGT", Experiment_rep) ~ "IGT",
      TRUE ~ "Shipboard"
    )) %>% 
  unite(SITE_TYPE, SiteOrder, EXP_TYPE, sep = "-", remove = FALSE) %>% 
  filter(!(SITE_TYPE == "NA-IGT")) %>% 
  mutate(EUK_ml = as.character(EUK_ml)) %>% 
  mutate(PROK_ml = as.character(PROK_ml)) %>%
  mutate(temp = as.character(temp),
         pH = as.character(pH),
         mg = as.character(mg),
         h2 = as.character(h2),
         ch4 = as.character(ch4),
         percseawater = as.character(percseawater)) %>% 
  select(SITE_TYPE, SiteOrder, EXP_TYPE, Experiment_rep, GRAZING_EFFECT_hr, EUK_ml, PROK_ml, temp, DEPTH, pH, percseawater, mg, h2, ch4) %>% 
  pivot_longer(cols = EUK_ml:ch4, values_to = "VALUES", values_ptypes = list(VALUES = character())) %>% 
  mutate(VALUES = as.numeric(VALUES)) %>% 
  drop_na() %>% 
  ggplot(aes(x = GRAZING_EFFECT_hr, y = VALUES, 
             color = SITE_TYPE, fill = SITE_TYPE, shape = SITE_TYPE)) +
  geom_point(aes(shape = SITE_TYPE), size = 4, stroke = 2) +
  facet_wrap(~ name, scales = "free") +
  scale_y_continuous() +
  scale_x_log10() +
  scale_shape_manual(values = c(21, 21, 21, 21)) +
  scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title = element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text = element_text(color="black", size = 13), legend.title = element_blank()) +
  labs(x = bquote("Cells consumed "~mL^-1 ~hr^-1), y = bquote("Eukaryote cells "~mL^-1),
       title = "")
# dev.off()
```

```{r}
grazing_wenv_forLM <- grazing_wenv %>% 
  # filter(!(Name == "Shrimpocalypse" & grepl("IGT", Experiment_rep))) %>%
  filter(GRAZING_EFFECT_hr > 0) %>%
    mutate(TEMP = as.numeric(temp)) %>% 
    mutate(EXP_TYPE = case_when(
      grepl("IGT", Experiment_rep) ~ "IGT",
      TRUE ~ "Shipboard"
    )) %>% 
  unite(SITE_TYPE, SiteOrder, EXP_TYPE, sep = "-", remove = FALSE) %>% 
  filter(!(SITE_TYPE == "NA-IGT")) %>% 
  mutate(EUK_ml = as.character(EUK_ml)) %>% 
  mutate(PROK_ml = as.character(PROK_ml),
         PROK_EUK_RATIO = as.character(as.numeric(PROK_ml)/as.numeric(EUK_ml))) %>%
  mutate(temp = as.character(temp),
         pH = as.character(pH),
         mg = as.character(mg),
         h2 = as.character(h2),
         ch4 = as.character(ch4),
         percseawater = as.character(percseawater)) %>% 
  select(SITE_TYPE, SiteOrder, EXP_TYPE, Experiment_rep, GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, SPEC_GRAZE_RATE_hr, BAC_TURNOVER_PERC, EUK_ml, PROK_ml, PROK_EUK_RATIO, temp, DEPTH, pH, percseawater, mg, h2, ch4) %>% 
  pivot_longer(cols = c(GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, SPEC_GRAZE_RATE_hr, BAC_TURNOVER_PERC), names_to = "RATE", values_to = "RATE_VALUE") %>%
  pivot_longer(cols = c(PROK_ml, EUK_ml, temp, DEPTH, pH, percseawater, mg, h2, ch4, PROK_EUK_RATIO), names_to = "PARAMS", values_to = "PARAMS_VALUE") %>%
  data.frame

```


```{r}
library(broom)
regression_tmp <- grazing_wenv_forLM %>%
  mutate(PARAMS_VALUE = as.numeric(PARAMS_VALUE)) %>% 
  # Set up the linear regression
  group_by(RATE, PARAMS) %>%
  nest(data = c(-RATE, -PARAMS)) %>%
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    tidied = map(lm_fit, tidy)) %>%
  unnest(tidied) %>%
  select(RATE, PARAMS,
    term, estimate) %>%
  pivot_wider(names_from = term, values_from = estimate) %>%
  select(everything(), SLOPE = PARAMS_VALUE) %>%
  data.frame

regression_results_S8 <- grazing_wenv_forLM %>%
  group_by(RATE, PARAMS) %>%
  nest(data = c(-RATE, -PARAMS)) %>%
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    glanced = map(lm_fit, glance)) %>%
  unnest(glanced) %>%
  select(RATE, PARAMS, r.squared, adj.r.squared) %>%
  right_join(grazing_wenv_forLM) %>%
  right_join(regression_tmp) %>%
  data.frame


```
Supplementary Table
```{r}
regression_results_TABLE <- regression_results_S8 %>% 
  select(RATE, PARAMS, r.squared, adj.r.squared, SLOPE) %>% 
  distinct()
# write.csv(regression_results_TABLE, file = "output-data/LM-results-table.csv")
```


```{r, fig.height=8, fig.width=18}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS6.svg", h = 8, w = 10)
grazing_for_supp <- regression_results_S8

# y = mx+b
# 0 = slope (x) + b
# solve for b
plot_r2 <- grazing_for_supp %>% 
  ggplot(aes(x = as.numeric(RATE_VALUE), y = as.numeric(PARAMS_VALUE), 
             color = SITE_TYPE, fill = SITE_TYPE, shape = SITE_TYPE)) +
  geom_point(aes(shape = SITE_TYPE), size = 4, stroke = 2) +
  facet_wrap(~ PARAMS + round(r.squared, 3), scales = "free", ncol = 5,
             labeller = label_parsed) +
  scale_y_continuous() +
  scale_x_log10(labels = scientific_10) +
  scale_shape_manual(values = c(21, 21, 21, 21)) +
  scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title = element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text = element_text(color="black", size = 13), legend.title = element_blank()) +
  labs(x = bquote("Cells consumed "~mL^-1 ~hr^-1), y = bquote("Eukaryote cells "~mL^-1),
       title = "")

plot_wslope <- grazing_for_supp %>% 
    mutate(b = (SLOPE)*(`X.Intercept.`)) %>% 
  mutate(new_xint = ((0 - b)/SLOPE)) %>% 
    mutate(new_xint_2 = case_when(
      `X.Intercept.` < 0 ~ (`X.Intercept.`)*(-1),
      `X.Intercept.` > 0 ~ (`X.Intercept.`),
    )) %>% 
  filter(!is.na(PARAMS_VALUE)) %>% 
  ggplot(aes(x = as.numeric(RATE_VALUE), y = as.numeric(PARAMS_VALUE), 
             color = SITE_TYPE, fill = SITE_TYPE, shape = SITE_TYPE)) +
  geom_point(aes(shape = SITE_TYPE), size = 4, stroke = 2) +
  facet_wrap(~ PARAMS + round(r.squared, 3), scales = "free", ncol = 5,
             labeller = label_parsed) +
  # scale_y_continuous() +
  # scale_x_log10() +
  scale_x_continuous(trans=log10_trans(),
                       breaks = trans_breaks("log10", function(x) 10^x),
                       labels = trans_format("log10", math_format(10^.x))) +
    geom_abline(aes(slope = (SLOPE), intercept = (`X.Intercept.`)), color = "black", linetype = "dashed", size = 0.5) +
  # geom_abline(aes(slope = (SLOPE), yintercept = (b)), color = "black", linetype = "dashed", size = 0.5) +
  scale_shape_manual(values = c(21, 21, 21, 21)) +
  scale_fill_manual(values = c("white", "#264653", "white", "#E76F51")) +
  scale_color_manual(values = c("#264653", "#264653", "#E76F51", "#E76F51")) +
  theme_minimal() +
    theme(panel.grid.minor = element_blank(),
           axis.line = element_line(colour = "black"), 
           axis.text.x = element_text(color="black", size = 13), 
           axis.text.y = element_text(color="black", size = 13),
           axis.title = element_text(color="black", size = 13),
           axis.ticks = element_line(),
           strip.text = element_text(color="black", size = 13), legend.title = element_blank()) +
  labs(x = bquote("Cells consumed "~mL^-1 ~hr^-1), y = bquote("Eukaryote cells "~mL^-1),
       title = "")

# plot_wslope
```

### Figure S7 #2

Supplementary figure
```{r, fig.height=8, fig.width=16}
# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS7_log.svg", h = 8, w = 16)

# plot_r2

# svg("../../../Manuscripts_presentations_reviews/MCR-grazing-2023/svg-files-figures/figS7_slope.svg", h = 8, w = 16)
# 
# plot_wslope

# dev.off()
```


# Linear regression & tidy models

Use tidymodels to perform linear regression.

## MCR and GR data as input

```{r}
library(broom)
# ?pivot_longer
# e	IGT
head(all_vents)
regression_input <- all_vents %>%
  # filter(!(SAMPLE == "Piccard-Shrimpocalypse" & EXP == "IGT")) %>%
  filter(!is.na(Highest.Temp)) %>%
    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>%
  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>%
  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = "RATE", values_to = "RATE_VALUE") %>%
  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = "PARAMS", values_to = "PARAMS_VALUE") %>%
  data.frame

regression_tmp <- regression_input %>%
  # Set up the linear regression
  group_by(RATE, PARAMS) %>%
  nest(-RATE, -PARAMS) %>%
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    tidied = map(lm_fit, tidy)) %>%
  unnest(tidied) %>%
  select(RATE, PARAMS,
    term, estimate) %>%
  pivot_wider(names_from = term, values_from = estimate) %>%
  select(everything(), SLOPE = PARAMS_VALUE) %>%
  data.frame

regression_results <- regression_input %>%
  group_by(RATE, PARAMS) %>%
  nest(-RATE, -PARAMS) %>%
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    glanced = map(lm_fit, glance)) %>%
  unnest(glanced) %>%
  select(RATE, PARAMS, r.squared, adj.r.squared) %>%
  right_join(regression_tmp) %>%
  right_join(regression_input) %>%
  data.frame

# View(regression_results)
```

Plot results from regression

```{r, fig.height=10, fig.width=15}
regression_results %>%
  # filter(RATE == "GRAZING_EFFECT_hr") %>%
  # filter(PARAMS == "TEMP") %>%
  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +
    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = "black", linetype = "dashed", size = 0.5) +
    geom_point(color = "black", aes(shape = SAMPLE_TYPE, fill = FIELD)) +
    scale_shape_manual(values = c(21, 24)) +
    scale_fill_manual(values = c("#476AA7","#7299CE", "#A2937A")) +
    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = "free", ncol = 5,
             strip.position = "bottom", labeller = label_parsed) +
  theme_bw() +
  theme(
    strip.background = element_blank(),
    strip.placement = "outside",
    strip.text = element_text(color = "black", size = 10),
    axis.title = element_text(color = "black", size = 10),
    legend.title = element_blank()) # +
labs(y = bquote("Cells "~mL^-1 ~hr^-1), x = "Temperature (C)")
```

## MCR only

repeat MCR only

```{r}
library(broom)
# ?pivot_longer
# unique(all_vents$FIELD)
regression_input <- all_vents %>% 
  filter(!(FIELD == "Gorda Ridge")) %>% 
  # filter(!(SAMPLE == "Piccard-Shrimpocalypse" & EXP == "IGT")) %>% 
  filter(!is.na(Highest.Temp)) %>% 
    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>% 
  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>% 
  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = "RATE", values_to = "RATE_VALUE") %>% 
  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = "PARAMS", values_to = "PARAMS_VALUE") %>% 
  data.frame

regression_tmp <- regression_input %>% 
  # Set up the linear regression
  group_by(RATE, PARAMS) %>% 
  nest(-RATE, -PARAMS) %>% 
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)), 
    tidied = map(lm_fit, tidy)) %>% 
  unnest(tidied) %>% 
  select(RATE, PARAMS, 
    term, estimate) %>% 
  pivot_wider(names_from = term, values_from = estimate) %>% 
  select(everything(), SLOPE = PARAMS_VALUE) %>%
  data.frame

regression_results_mcr <- regression_input %>% 
  group_by(RATE, PARAMS) %>% 
  nest(-RATE, -PARAMS) %>% 
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    glanced = map(lm_fit, glance)) %>% 
  unnest(glanced) %>% 
  select(RATE, PARAMS, r.squared, adj.r.squared) %>% 
  right_join(regression_tmp) %>%
  right_join(regression_input) %>%
  data.frame

# View(regression_results_mcr)
```

Plot results from regression

```{r, fig.height=10, fig.width=15}
regression_results_mcr %>% 
  # filter(RATE == "GRAZING_EFFECT_hr") %>%
  # filter(PARAMS == "TEMP") %>% 
  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +
    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = "black", linetype = "dashed", size = 0.5) +
    geom_point(color = "black", aes(shape = SAMPLE_TYPE, fill = FIELD)) +
    scale_shape_manual(values = c(21, 24)) +
    scale_fill_manual(values = c("#476AA7","#7299CE", "#A2937A")) +
    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = "free", ncol = 5,
             strip.position = "bottom", labeller = label_parsed) +
  theme_bw() +
  theme(
    strip.background = element_blank(),
    strip.placement = "outside",
    strip.text = element_text(color = "black", size = 10),
    axis.title = element_text(color = "black", size = 10),
    legend.title = element_blank()) # +
  # labs(y = bquote("Cells "~mL^-1 ~hr^-1), x = "Temperature (C)")
```

## MCR vent sites only

Repeat with only vent sites & remove undetected grazing.

```{r}
# head(all_vents)
# range(all_vents$GRAZING_EFFECT_hr)
```

```{r}
library(broom)
# ?pivot_longer
# unique(all_vents$FIELD)
regression_input <- all_vents %>% 
  filter(!(FIELD == "Gorda Ridge")) %>% 
  filter(!(NAME == "Background")) %>% filter(!(NAME == "Plume")) %>% 
  filter(GRAZING_EFFECT_hr > 0) %>% 
  # filter(!(SAMPLE == "Piccard-Shrimpocalypse" & EXP == "IGT")) %>% 
  filter(!is.na(Highest.Temp)) %>% 
    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>% 
  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>% 
  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = "RATE", values_to = "RATE_VALUE") %>% 
  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = "PARAMS", values_to = "PARAMS_VALUE") %>% 
  data.frame

regression_tmp <- regression_input %>% 
  # Set up the linear regression
  group_by(RATE, PARAMS) %>% 
  nest(-RATE, -PARAMS) %>% 
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)), 
    tidied = map(lm_fit, tidy)) %>% 
  unnest(tidied) %>% 
  select(RATE, PARAMS, 
    term, estimate) %>% 
  pivot_wider(names_from = term, values_from = estimate) %>% 
  select(everything(), SLOPE = PARAMS_VALUE) %>%
  data.frame

regression_results_vent <- regression_input %>% 
  group_by(RATE, PARAMS) %>% 
  nest(-RATE, -PARAMS) %>% 
  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),
    glanced = map(lm_fit, glance)) %>% 
  unnest(glanced) %>% 
  select(RATE, PARAMS, r.squared, adj.r.squared) %>% 
  right_join(regression_tmp) %>%
  right_join(regression_input) %>%
  data.frame

# View(regression_results_vent)
```

Plot results from regression

```{r, fig.height=10, fig.width=15}
regression_results_vent %>% 
  # filter(RATE == "GRAZING_EFFECT_hr") %>%
  # filter(PARAMS == "TEMP") %>% 
  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +
    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = "black", linetype = "dashed", size = 0.5) +
    geom_point(color = "black", aes(shape = SAMPLE_TYPE, fill = FIELD)) +
    scale_shape_manual(values = c(21, 24)) +
    scale_fill_manual(values = c("#476AA7","#7299CE", "#A2937A")) +
    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = "free", ncol = 5,
             strip.position = "bottom", labeller = label_parsed) +
  theme_bw() +
  theme(
    strip.background = element_blank(),
    strip.placement = "outside",
    strip.text = element_text(color = "black", size = 10),
    axis.title = element_text(color = "black", size = 10),
    legend.title = element_blank()) # +
  # labs(y = bquote("Cells "~mL^-1 ~hr^-1), x = "Temperature (C)")
```

*Regression thoughts*: Unremarkable r squared values (numbers at the bottom of each plot). Some trends, mainly associated with temperature.

Bacterial abundance typically increases with temperature (White et al. 1991) - which could ultimately increase bacterial ingestion rate and total protist cells. But at this type of niche environment, I hypothesize that there is a trend but threshold of not detected grazing under certain conditions.

If euk per ml numbers are high, but we see lower grazing rates, could this be competition? Curds and Cockburn 1968. Additionally with temperature... in Vaque et al GRF (specific grazing rates of flagellates) increased with temperature, but overall grazing rate reached a plateau at 18C. Does this mean that temperature will be an important factor depending on the community diversity?

```{r}
head(all_vents)
allvent_data <- all_vents %>% 
  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml))
# head(allvent_data)
```

Function to plot results by two parameters.

```{r}
two_params <- function(df, x_var, y_var, x_title, y_title){
  X_VAR <- enquo(x_var)
  Y_VAR <- enquo(y_var)
  df %>% 
  select(FIELD, NAME, SAMPLE, EXP, X = !!X_VAR, Y = !!Y_VAR) %>% 
  distinct() %>% 
  ggplot(aes(x = X, y = Y)) +
    geom_point(size = 3, shape = 21, color = "black", aes(fill = FIELD)) +
    geom_abline(slope = 1, intercept = 0) +
    theme_minimal() +
    labs(x = x_title, y = y_title)
}

```

## Plot temperature by euk:prok and then euk and prok

```{r}
two_params(allvent_data, `PROK_EUK_RATIO`, `Highest.Temp`, "Prok:Euk ratio", "Temperature (max)")
```

## Plot temperature by grazing rate

```{r}
names(allvent_data)
# two_params(allvent_data, ugC_L_perday, `Highest.Temp`, "ugC_L_perday", "Temperature (max)")
# two_params(allvent_data, ugC_L_perday, EUK_ml, "ugC_L_perday", "Euk cells per ml") + scale_y_log10()

# two_params(allvent_data, EUK_ml, PROK_ml, "Euk", "Prok") + scale_y_log10() + scale_x_log10()
```

# Carbon biomass investigation

```{r}
# head(all_vents)
# GRAZING_EFFECT_hr = "Cells~mL^{-1}~hr^{-1}"
```

If we assume that carbon content per prey cell is between 86 - 300 fgC per cell. What does the amount consumed look like?

```{r}
# Create a new data frame
# carbon_density <- crossing(fgC_cell = seq(86, 300, by = 1), 
#                              GRAZING_EFFECT_hr = seq(min(all_vents$GRAZING_EFFECT_hr),
#                                                   max(all_vents$GRAZING_EFFECT_hr),
#                                                   length.out = 215))  %>%
#   mutate(fgC_ml_perday = ((GRAZING_EFFECT_hr*24) * fgC_cell),
#     ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000)
#     ) %>%
#   data.frame
# 
# # unique(all_vents$GRAZING_EFFECT_hr)
# 
# samples_lines <- select(all_vents, GRAZING_EFFECT_hr, FIELD) %>% 
#   distinct() %>% 
#   crossing(fgC_cell = seq(86, 300, by = 20)) %>%
#   mutate(fgC_ml_perday = ((GRAZING_EFFECT_hr*24) * fgC_cell),
#     ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000)
#     )
```

```{r}
# ggplot(carbon_density, aes(x = fgC_cell, y = GRAZING_EFFECT_hr)) +
#   geom_raster(aes(fill = ugC_L_perday)) +
#   scale_fill_gradientn(colors = c("#fef0d9", "#b30000"), name = bquote("ug C"~L^-1 ~day^-1)) +
#   # scale_fill_discrete(name = "New Legend Title")
#   scale_y_continuous(expand = c(0,0)) +
#   scale_x_continuous(expand = c(0,0)) +
#   theme_bw() +
#   theme(axis.text = element_text(color = "black"),
#         rect = element_rect(fill = "transparent"),
#         panel.background = element_rect(fill = "transparent"),
#         plot.background = element_rect(fill = "transparent", color = NA)) +
#   labs(y = bquote("Cells "~mL^-1 ~consumed ~hr^-1), x = bquote("fg C"~cell^-1)) +
#   geom_point(data = samples_lines,
#             aes(x = 87,
#             y = GRAZING_EFFECT_hr, shape = FIELD), size = 1)
```

Eukaryote biomass comparison with measured vs. literature

```{r}
# Repeated in ASV code right now!
# plot_metadata <- env_params %>% 
#   filter(SAMPLETYPE != "Incubation") %>%
#   filter(VENT != "Quakeplume") %>% 
#   select(SITE, VENT, SAMPLETYPE, TEMP, DEPTH, starts_with("PROK_"), starts_with("EUK_"), starts_with("GRAZING_EFFECT_hr"))
```

```{r, fig.height=6, fig.width=5}
# head(plot_metadata)
# plot_metadata %>% 
#   filter(!is.na(Euk_biomass_Hu)) %>% 
#   mutate(Euk_biomass_Hu_fg = Euk_biomass_Hu * 1000000000,
#          Euk_biomass_lit_fg = Euk_biomass_lit * 1000000000) %>% 
#   ggplot(aes(y = VENT)) +
#   geom_point(aes(x = Euk_biomass_Hu_fg), color = "black", fill = "darkgreen", shape = 21, size = 4) +
#   geom_point(aes(x = Euk_biomass_lit), color = "black", fill = "lightgreen", shape = 21, size = 4) +
#   scale_x_log10(labels = function(x) format(x, scientific = TRUE)) +
#   theme_minimal() +
#   theme(axis.text = element_text(color = "black")) +
#   facet_grid(SAMPLETYPE ~ ., space = "free", scales = "free") +
#   labs(x = "fg C of eukaryote population", y = "")
```

# Prediction of MCR data with parameters

Best model to estimate community grazing rate in Vaque et al. considered FLP uptake and similar experiments (in contrast to disappearance experiments).

From Vaque et al. 1994 paper equation (1):

See Figure 6

> log(GT) = -3.21 + 0.99 log (HNF) + 0.028 (T) + 0.55 log(BAC)

*GT* = grazing rate (cells ml-1 hr-1) *HNF* = heterotrophic nanoflagellates (cells ml-1) T = temperature (C) *BAC* = prokaryote abundance (cells ml-1)

Start with non-zero grazing rate values, etc. Where... *GT* == Grazing effect hr *HNF* == Euk_ml *BAC* == PROK_ml *T* == highest temp

We only have these for MCR data.. can include GR for the "predicting euk_ml"

Function to use above formula and estimate

```{r}
est_predicted <- function(df, TITLE){
  df_out <- df %>% 
  select(FIELD, NAME, SAMPLE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, Highest.Temp) %>% 
    filter(GRAZING_EFFECT_hr > 0) %>% 
  group_by(FIELD, NAME, SAMPLE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr) %>% 
  summarise(TEMP = mean(Highest.Temp)) %>% 
  distinct() %>% 
  mutate(PREDICTED_TEMP = (((log10(GRAZING_EFFECT_hr)) + 3.21 - (0.99*log10(EUK_ml)) - (0.55*log10(PROK_ml))) / 0.028),
         PREDICTED_GRAZING_EFFECT_hr = (10^(-3.21 + (0.99*log10(EUK_ml)) + (0.028*TEMP) + (0.55*(log10(PROK_ml))))),
         PREDICTED_EUK = (10^(((log10(GRAZING_EFFECT_hr)) + 3.21 - (0.55*log10(PROK_ml)) - (0.028*TEMP))/0.99)),
         PREDICTED_PROK = (10^(((log10(GRAZING_EFFECT_hr)) + 3.21 - (0.99*log10(EUK_ml)) - (0.028*TEMP))/0.55)))
  # Plots
  df_out %>% 
  ggplot(aes(x = PREDICTED_GRAZING_EFFECT_hr, y = GRAZING_EFFECT_hr)) +
    geom_point(size = 3, color = "black", fill = "red", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = log10(PREDICTED_GRAZING_EFFECT_hr), y = log10(GRAZING_EFFECT_hr))) +
    geom_point(size = 3, color = "black", fill = "red", shape = 21) + theme_bw() +  geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = PREDICTED_EUK, y = EUK_ml)) +
    geom_point(size = 3, color = "black", fill = "darkgreen", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = log10(PREDICTED_EUK), y = log10(EUK_ml))) +
    geom_point(size = 3, color = "black", fill = "darkgreen", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = PREDICTED_PROK, y = PROK_ml)) +
    geom_point(size = 3, color = "black", fill = "blue", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = log10(PREDICTED_PROK), y = log10(PROK_ml))) +
    geom_point(size = 3, color = "black", fill = "blue", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = PREDICTED_TEMP, y = TEMP)) +
    geom_point(size = 3, color = "black", fill = "orange", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  df_out %>% 
  ggplot(aes(x = log10(PREDICTED_TEMP), y = log10(TEMP))) +
    geom_point(size = 3, color = "black", fill = "orange", shape = 21) + theme_bw() + geom_abline(slope = 1, intercept = 0) +
  patchwork::plot_layout(ncol = 4) + plot_annotation(title = TITLE)
  # return(df_out)
  }
# head(all_vents)
# unique(all_vents$NAME)
# range(all_vents$Highest.Temp)
```

```{r, fig.width=, fig.height=6, fig.width=12}
est_predicted(all_vents, "all values")
```

```{r, fig.height=8, fig.width=15}
mcr <- c("Von Damm", "Piccard")
bsw <- c("Backgound", "BSW", "Plume", "Near vent BW")

# est_predicted(all_vents %>% filter(FIELD %in% mcr), "Mid-Cayman Rise only")

# est_predicted(all_vents %>% filter(FIELD %in% mcr) %>% filter(GRAZING_EFFECT_hr > 0), "Mid-Cayman Rise only, no undetected")

est_predicted(all_vents %>% filter(FIELD %in% mcr) %>% filter(GRAZING_EFFECT_hr > 0) %>% filter(!(NAME %in% bsw)), "Mid-Cayman Rise only, no undetected, vents only")
```

```{r, fig.height=8, fig.width=15}
# View(all_vents)
# est_predicted(all_vents %>% filter(!(NAME %in% bsw)), "Vent samples only")

est_predicted(all_vents %>% filter(!(NAME %in% bsw)) %>% filter(GRAZING_EFFECT_hr > 0), "Vent samples only where grazing was detected")
```

```{r, fig.height=8, fig.width=15}
# View(all_vents)
est_predicted(all_vents %>% 
                filter(!(NAME %in% bsw)) %>% 
                filter(FIELD %in% mcr) %>% 
                filter(GRAZING_EFFECT_hr > 0), "MCR vent samples only where grazing was detected")

est_predicted(all_vents %>% 
                filter(!(NAME %in% bsw)) %>% 
                filter(FIELD == "Von Damm") %>% 
                filter(GRAZING_EFFECT_hr > 0), "MCR vent samples only where grazing was detected")

# not really enough in Piccard to make this statistically sound.
# est_predicted(all_vents %>% 
#                 filter(!(NAME %in% bsw)) %>% 
#                 filter(FIELD == "Piccard") %>% 
#                 filter(GRAZING_EFFECT_hr > 0), "MCR vent samples only where grazing was detected")
```

```{r}
hist(all_vents$Highest.Temp)
```

What about a temperature threshold? Perhaps this exists, but maybe not enough data to include.

```{r, fig.height=8, fig.width=15}
est_predicted(all_vents %>% 
                # filter(!(NAME %in% bsw)) %>% 
                filter(Highest.Temp > 60), "All samples, temps higher than 60C")

est_predicted(all_vents %>% 
                # filter(!(NAME %in% bsw)) %>% 
                filter(Highest.Temp < 60), "All samples, temps lower than 60C")
```

```{r, fig.height=8, fig.width=15}
est_predicted(all_vents %>% 
                filter(GRAZING_EFFECT_hr > 0) %>%
                filter(Highest.Temp > 60), "Removed undetected, temps higher than 60C")

est_predicted(all_vents %>% 
                filter(GRAZING_EFFECT_hr > 0) %>%
                filter(Highest.Temp < 60), "Removed undetected, temps lower than 60C")
```
# Save Robjects for Results
```{r}
# Oct 22, 2023
save(euk_prok_counts, table_grazerate_wflp_wprok_weuk,
     table_wcalcs, biov_calc, c_factor_biov,
     pgC_ml_biov_bysample, pgC_ml_sizefrac_bysample,
     carbon_consumed, file = "input-data/all-dfs-for-Tables.RData")
```


# Session

```{r}
sessionInfo()
```
