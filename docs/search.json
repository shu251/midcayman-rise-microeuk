[
  {
    "objectID": "asv.html",
    "href": "asv.html",
    "title": "18S survey",
    "section": "",
    "text": "Set up R environment\n\n\nCode\nlibrary(tidyverse); library(phyloseq); library(ape)\nlibrary(ggupset)\n\n\nImport previously sequenced and analyzed tag-sequence data. See https://shu251.github.io/microeuk-amplicon-survey/ for additional information.\n\n\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose = T)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nCode\n# physeq_mcr\n\n\n\n\n\n\n\nCode\nvent_ids <- c(\"BSW\", \"Plume\")\n\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"OldManTree\", \"Rav2\", \"MustardStand\", \"ShrimpHole\", \"WhiteCastle\", \"ArrowLoop\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"White Castle\", \"Arrow Loop\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\n# Colors for VD and Piccard\nsite_colors <- c(\"#418b84\", \"#943b36\")\n# site_colors\n\n# Vent colors\nvent_colors <- c(\"#c2bfc2\",\"#ebdac9\", \"#c02c5b\", \"#cfae20\", \"#86952c\", \"#a88fab\", \"#a88fab\", \"#70b2aa\", \"#8c906d\", \"#806fa2\", \"#8cabcf\", \"#609482\")\n\nnames(vent_colors) <- vent_fullname\nnames(site_colors) <- site_fullname\n# Cooler colors for VD\n# c(\"#4e7d4b\") green\n#569c91 blue\n#ae8fbb purple\n#ce86ba a lighter purple\n#31464a dark dark green\n#8c906d grey green\n#bab446 yellow green\n#ebdac9 white - cream\n#c2bfc2 grey\n# Piccard\n#c02c5b pink - red\n#d65a9e pink\n##cfae20 yellow\n\nall_taxa_color = c(\"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#deebf7\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\", \"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\")"
  },
  {
    "objectID": "asv.html#import-decontam-results-to-qc-asv-table",
    "href": "asv.html#import-decontam-results-to-qc-asv-table",
    "title": "18S survey",
    "section": "Import decontam results to QC ASV table",
    "text": "Import decontam results to QC ASV table\n\nload(\"../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/seq-analysis/contam-asvs.RData\", verbose= TRUE)\n\nLoading objects:\n  list_of_contam_asvs\n\nclass(list_of_contam_asvs)\n\n[1] \"character\"\n\n\n\nasv_wtax_qc <- merged_asv %>%\n  select(FeatureID = '#OTU ID', everything()) %>%\n  filter(!(FeatureID %in% list_of_contam_asvs)) %>%\n  # In wide format, subsample 1000 random ASVs\n  # sample_n(1000, replace = FALSE) %>%\n  pivot_longer(cols = !FeatureID,\n               names_to = \"SAMPLE\", values_to = \"value\") %>%\n  filter(grepl(\"_MCR_\", SAMPLE)) %>%\n  left_join(merged_tax, by = c(\"FeatureID\" = \"Feature ID\")) %>%\n  left_join(filter(metadata_formatted, grepl(\"_MCR_\", SAMPLE))) %>%\n  unite(SAMPLENAME, SITE, SAMPLETYPE, YEAR, VENT, SAMPLEID, sep = \" \", remove = FALSE)\n# dim(asv_wtax_qc)\n# length(unique(asv_wtax_qc$FeatureID))\n\n\ntax_matrix <- asv_wtax_qc %>%\n  select(FeatureID, Taxon) %>%\n  distinct() %>%\n  separate(Taxon, c(\"Domain\", \"Supergroup\",\n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(tax_matrix)\nasv_matrix <- asv_wtax_qc %>%\n  select(FeatureID, SAMPLE, value) %>%\n  pivot_wider(names_from = SAMPLE, values_from = value, values_fill = 0) %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(asv_matrix)\n# dim(asv_matrix); dim(tax_matrix)\n\n# Align row names for each matrix\nrownames(tax_matrix) <- row.names(asv_matrix)\n# dim(asv_matrix)\nmcr_samples <- as.character(colnames(asv_matrix))\n\n# Set rownames of metadata table to SAMPLE information\nmetadata_mcr <- filter(metadata_formatted, SAMPLE %in% mcr_samples) %>%\n  rownames_to_column(var = \"X\") %>%\n  column_to_rownames(var = \"SAMPLE\")\n# dim(metadata_mcr)"
  },
  {
    "objectID": "asv.html#import-as-phyloseq-objects",
    "href": "asv.html#import-as-phyloseq-objects",
    "title": "18S survey",
    "section": "Import as phyloseq objects",
    "text": "Import as phyloseq objects\n\n# Import asv and tax matrices\nASV = otu_table(asv_matrix, taxa_are_rows = TRUE)\nTAX = tax_table(tax_matrix)\nphylo_obj <- phyloseq(ASV, TAX)\n# phylo_obj\n# Import metadata as sample data in phyloseq\nsamplenames <- sample_data(metadata_mcr)\n# samplenames\n# join as phyloseq object\nphyseq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# colnames(ASV)\n# TAX\n## Check\nphyseq_wnames\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 17878 taxa and 23 samples ]\nsample_data() Sample Data:       [ 23 samples by 16 sample variables ]\ntax_table()   Taxonomy Table:    [ 17878 taxa by 8 taxonomic ranks ]\n\nntaxa(physeq_wnames) #17878\n\n[1] 17878\n\nnsamples(physeq_wnames) #23\n\n[1] 23\n\n# # physeq_wnames # run with sample, 1000 tax.\n# # head(taxa_names(physeq_wnames))\nmcr_tree <- rtree(ntaxa(physeq_wnames), rooted = TRUE, tip.label = taxa_names(physeq_wnames))\n# class(mcr_tree)\n# ?merge_phyloseq\nphyseq_mcr <- merge_phyloseq(physeq_wnames, mcr_tree)"
  },
  {
    "objectID": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "href": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "title": "18S survey",
    "section": "Save output ASV tables for downstream analyses",
    "text": "Save output ASV tables for downstream analyses\n\n# phylo_obj <- phyloseq(ASV, TAX)\n# samplenames <- sample_data(metadata_formatted)\n# physeq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# dim(asv_wtax_qc)\n# physeq_wnames\n\n# save(phylo_obj, samplenames, physeq_wnames, metadata_mcr, asv_wtax_qc, TAX, tax_matrix, physeq_mcr, file = \"input-data/MCR-amplicon-data.RData\")"
  },
  {
    "objectID": "grazing.html",
    "href": "grazing.html",
    "title": "Protistan grazing analysis",
    "section": "",
    "text": "Code below details how to import cell count (FLP count) information from Mid-Cayman Rise protistan grazing incubations and estimate grazing rate and cell biomass.\n\n\n\n\nCode\nlibrary(tidyverse); library(cowplot); library(broom)\nlibrary(patchwork)\n\n\n\n\n\nImport eukaryotic cell count data from grazing experiments. In this section, we will calculate cells per ml from raw counts (Field of view, etc.) and use to estimate protist cell concentration. These will be used below in grazing experiment calculations.\n\n\nCode\ncounts <- read.delim(\"input-data/euk-counts-compiled.txt\", \n                     blank.lines.skip = FALSE,\n                     na.strings = c(\"\", \"NA\"),\n                     stringsAsFactors = FALSE) # Import\ncounts[is.na(counts)] <- 0 # Change blanks to zeroes\n\n\nRaw data table collected during microscopy count process. Below code reviews the structure of this raw data and updates column headers to be more ‘R’ friendly.\n\n\nCode\n# head(counts)\ncolnames(counts) <- c(\"DATE\", \"SAMPLE\", \"EXPID\", \"VOL\", \"MAG\", \"FOV\", \"nanoNoFLP\", \"microNoFLP\", \"nanoFLP\", \"microFLP\", \"NOTES\", \"DateCompiled\"); colnames(counts)\n\n\n [1] \"DATE\"         \"SAMPLE\"       \"EXPID\"        \"VOL\"          \"MAG\"         \n [6] \"FOV\"          \"nanoNoFLP\"    \"microNoFLP\"   \"nanoFLP\"      \"microFLP\"    \n[11] \"NOTES\"        \"DateCompiled\"\n\n\n\nTo count occurrence and number of FLP ingested by eukaryotic cells, the number of FLPs ingested was tallied and comma separated for multiple eukaryotic cells with FLP. These values need to separated and counted as 1 eukaryotic cell each, but retain the number of FLP per cell.\n\nParse raw microscopy count data.\n\n\nCode\ncounts_occur <- counts %>%\n  # remove incomplete\n  filter(NOTES != \"Not countable\") %>% \n  # Count number of euk cells observed with FLPs (ex. if \"1,2\", 'occur' will = 2)\n  mutate(nanoFLP_occur = as.numeric(str_count(nanoFLP, \"[1-9]\\\\d*\")), \n         microFLP_occur = as.numeric(str_count(microFLP, \"[1-9]\\\\d*\")),\n         # Add number of euk cells with FLPs to those without for total number of euk cells\n         nanoTOTAL = as.numeric(nanoNoFLP) + nanoFLP_occur, \n         microTOTAL = as.numeric(microNoFLP) + microFLP_occur,\n         euksTOTAL = nanoTOTAL + microTOTAL) %>%\n      data.frame"
  },
  {
    "objectID": "grazing.html#running-code",
    "href": "grazing.html#running-code",
    "title": "Protistan grazing analysis",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Microbial eukaryotic ecology and food web contributions at two Mid-Cayman Rise deep-sea vent fields",
    "section": "",
    "text": "For access to in prep data, please contact sarah.hu[at]whoi.edu"
  },
  {
    "objectID": "grazing.html#calculate-cells-per-ml-euk",
    "href": "grazing.html#calculate-cells-per-ml-euk",
    "title": "Protistan grazing analysis",
    "section": "Calculate cells per ml (euk)",
    "text": "Calculate cells per ml (euk)\nInput data are the raw microscopy counts by FOV. Code below calculations cells/ml based on these values. Additionaly, variance and standard deviation are also calculated. Eukaryotic cells were also classified by size, where micro equates to >20um and nano is <20um. All counts were done at 100x magnification, confirm this: unique(counts_occur$MAG).\nCalculate cell concentration (cells/ml).\n\n\nCode\ncounts_cellsml_all <- counts_occur %>%\n  group_by(SAMPLE, EXPID, VOL) %>% #Calculate averages by sample\n  summarise(totalFOV = n(), # Count total FOV counted\n            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV\n            nanoVar = var(nanoTOTAL), #Variance\n            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation\n            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks\n            microVar = var(microTOTAL), \n            microSd = (2*(sqrt(microVar))), \n            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count\n            euksVar = var(euksTOTAL), \n            euksSd = (2*(sqrt(euksVar))), \n            .groups = 'drop_last') %>%\n  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab scope, it is 283.385):\n  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         microCONC = ((microAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         eukCONC = ((euksAvg * 283.385)/(VOL * 0.01 * 0.9))\n         ) %>%\n  # left_join(expmeta) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nReplicates belong to the same experiment for either Bag or IGT incubation. Below, modify these names and label new column with bag or igt. And create an average across replicates.\n\nAverage cells/ml across replicates, pivot to long format\n\n\nCode\ncounts_cellsml_avg <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, nanoCONC, microCONC, eukCONC) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  select(-Replicate) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  group_by(Site, Name, TimePoint, EXP_TYPE, IGT_REP, VARIABLE) %>%\n  # Calculate mean, variance, SD, min, and max\n  summarise(MEAN = mean(CONCENTRATION),\n            VAR = var(CONCENTRATION),\n            SD = sd(CONCENTRATION),\n            SEM =(sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            MIN = min(CONCENTRATION),\n            MAX = max(CONCENTRATION),\n            .groups = 'drop_last') %>%\n  data.frame\n\n\nNOTES on calculations:\nVAR = takes the sum of the squares of each value’s deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one.\nSD = standard deviation of all values\nSEM = standard deviation of sampling distribution; standard deviation divided by the square root of the sample size.\nSave output file\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, file = \"input-data/raw-avg-eukcount.RData\")\n\n\nReformat to parse experiment information type\n\n\nCode\n# Convert to long format and add column that reports IGT vs bag experiment\nplot_euk_conc <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, ends_with(\"CONC\")) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  data.frame\n\n\nFactor cell count data\n\n\nCode\nunique(plot_euk_conc$Name)\n\n\n[1] \"LotsOShrimp\"    \"Plume\"          \"Shrimpocalypse\" \"BSW\"           \n[5] \"MustardStand\"   \"OMT\"            \"Rav2\"           \"ShrimpHole\"    \n[9] \"X18\"           \n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\nplot_euk_conc$SiteOrder <- factor(plot_euk_conc$Site, levels = site_ids, labels = site_fullname)\nplot_euk_conc$NameOrder <- factor(plot_euk_conc$Name, levels = vent_ids, labels = vent_fullname)\n\n\n\nPlot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another."
  },
  {
    "objectID": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "href": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "title": "Protistan grazing analysis",
    "section": "2.2 Isolate T0 only counts for cells/ml plot",
    "text": "2.2 Isolate T0 only counts for cells/ml plot\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\n\nplot_euk_format <- plot_euk_conc %>%\n  filter(TimePoint == \"T0\" & (VARIABLE == \"eukCONC\")) %>%\n  group_by(SiteOrder, NameOrder, TimePoint, EXP_TYPE, VARIABLE) %>%\n  summarise(avg_conc = mean(CONCENTRATION),\n            SEM_conc = (sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            .groups = \"rowwise\") %>%\n  unite(EXPERIMENT, SiteOrder, NameOrder, EXP_TYPE, remove = FALSE) %>%\n  data.frame\n\n# Factor\nplot_euk_format$Site_Order <- factor(plot_euk_format$SiteOrder, levels = site_fullname, labels = site_fullname)\n\n# View(plot_euk_format)\neuk_plot <- ggplot(plot_euk_format, aes(x = NameOrder, y = avg_conc, fill = Site_Order)) +\n  geom_errorbar(aes(ymax = (avg_conc + SEM_conc), ymin = (avg_conc - SEM_conc)), width = 0.2) +\n  geom_point(aes(fill = Site_Order), color = \"black\", stat = \"identity\", size = 3, shape = 23) +\n  facet_grid(.~ Site_Order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = c(\"#1c9099\", \"#de2d26\")) +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank()) +\n  labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n       title = \"\")\n\neuk_plot\n\n\n\n\n\nPrint table of eukaryote cell count information.\n\n\nCode\nplot_euk_format %>% \n  type.convert(as.is = TRUE) %>%\n  filter(VARIABLE == \"eukCONC\") %>% \n  mutate(SAMPLE_TYPE = case_when(\n    NameOrder == \"Background\" ~ \"Background\",\n    NameOrder == \"Plume\" ~ \"Plume\",\n    TRUE ~ SiteOrder\n  )) %>%\n  group_by(SAMPLE_TYPE) %>% \n  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),\n           min_cellml = format(min(avg_conc), scientific = T),\n           max_cellml = format(max(avg_conc), scientific = T),\n           num = n())\n\n\n# A tibble: 4 × 5\n  SAMPLE_TYPE MEAN_cellml  min_cellml   max_cellml     num\n  <chr>       <chr>        <chr>        <chr>        <int>\n1 Background  9.183773e+01 9.183773e+01 9.183773e+01     1\n2 Piccard     3.801791e+02 2.309063e+02 4.548154e+02     3\n3 Plume       1.185379e+02 7.930115e+01 1.577747e+02     2\n4 Von Damm    4.105001e+02 2.597696e+02 6.20998e+02      6\n\n\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, counts_occur, file = \"output-data/MCR-cellcount-dfs\")"
  },
  {
    "objectID": "grazing.html#plot-eukaryote-cells-per-ml",
    "href": "grazing.html#plot-eukaryote-cells-per-ml",
    "title": "Protistan grazing analysis",
    "section": "2.1 Plot eukaryote cells per ml",
    "text": "2.1 Plot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another.\n\nPlot eukaryote cell concentration over time.\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\ncounts_cellsml_avg$SiteOrder <- factor(counts_cellsml_avg$Site, levels = site_ids, labels = site_fullname)\ncounts_cellsml_avg$NameOrder <- factor(counts_cellsml_avg$Name, levels = vent_ids, labels = vent_fullname)\n\n# Plot trend line of euk cell count for all experiments\ncounts_cellsml_avg %>%\n  filter(VARIABLE == \"eukCONC\") %>%\n  unite(\"Experiment\", NameOrder, IGT_REP, sep = \"-\", remove = FALSE) %>%\n  ggplot(aes(x = TimePoint, y = MEAN, shape = EXP_TYPE, fill = NameOrder)) +\n    geom_path(aes(group = Experiment)) +\n    # geom_errorbar(aes(ymax = (MEAN + SD), ymin = (MEAN - SD)), width = 0.2) +\n    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n    geom_point(stat = \"identity\", size = 2, aes(shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_brewer(palette = \"Paired\") +\n    scale_y_log10() +\n    facet_wrap(SiteOrder ~ EXP_TYPE, scales = \"free\") +\n    theme_classic() + theme(strip.background = element_blank(), \n                            legend.title = element_blank(),\n                            title = element_text(size = 7, face = \"bold\"),\n                            axis.title = element_text(size = 9)) +\n    labs(title = \"Total euk cell counts for each experiment\", y = bquote(\"Average eukaryote cells \"~mL^-1), x = \"Time point\") +\n  guides(fill=guide_legend(override.aes=list(shape=21)))\n\n\n\n\n\n\nnote there is an overall drop in euk cells/ml in the final time point. Especially with the IGT samples. Take this into consideration"
  },
  {
    "objectID": "grazing.html#cells-per-ml-prok",
    "href": "grazing.html#cells-per-ml-prok",
    "title": "Protistan grazing analysis",
    "section": "3.1 Cells per ml (prok)",
    "text": "3.1 Cells per ml (prok)\nVisualize counts\nFactor site names, etc.\n\n\nCode\ninsitu_proks$Name_order <- factor(insitu_proks$Name, levels = c(\"BSW\", \"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\", \"HotChimlet1\", \"ShrimpGulley\", \"SouthofHotChimlet\", \"SouthofLungSnack\", \"ArrowLoop\", \"Bartizan\", \"Rav1\"), labels = c(\"Background\",\"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"Hot Chimlet #1\", \"Shrimp Gulley\", \"South of Hot Chimlet\", \"South of LungSnack\", \"Arrow Loop\", \"Bartizan\", \"Ravelin #1\"))\n\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\ninsitu_proks$Site_order <- factor(insitu_proks$Site, levels = site_ids, labels = site_fullname)\n\n\n\n\nCode\nprok_plot <- ggplot(insitu_proks, aes(x = Name_order, y = MEAN)) +\n  geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n  geom_point(stat = \"identity\", shape = 23, aes(fill = Site), size = 3) +\n  facet_grid(.~ Site_order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(y = bquote(\"Prokaryote cells \"~mL^-1), x = \"\", title = \"\") +\n  scale_y_log10() +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())\nprok_plot\n\n\n\n\n\n\nCombine with previous MCR cell counts\nCompare in situ prokaryote cell counts from 2020 to previous years\n\n\nCode\nprok_prev <- read.csv(\"input-data/cellcount_previousyr.csv\")\n\nprok_prev_formatted <- prok_prev %>% \n  mutate(VENTSITE = case_when(\n    grepl(\"Piccard\", Site) ~ \"Piccard\",\n    grepl(\"Von Damm\", Site) ~ \"VD\"\n  )) %>% \n  filter(!is.na(YEAR)) %>% #QC of \n  # filter(cells_ml != \"NC\") %>% \n  # filter(cells_ml != \"\") %>% \n  # filter(cells_ml != \"no data\") %>% \n  type.convert(as.is = TRUE, numerals = \"no.loss\") %>%\n  select(YEAR, VENTSITE, NAME = Name, REP=Replicate, CELLML = cells_ml, ORIGSAMPLE = Orig_vent_site_ID, ID_number, Origin)\n\n\nRe-import 2020 data to compare.\n\n\nCode\n# Re-import 2020\nprok <- read.delim(\"input-data/prokINSITU-counts-compiled.txt\")\n# View(prok)\nproks_allyrs <- prok %>% \n  separate(SAMPLE, c(\"VENTSITE\", \"NAME\"), sep = \"-\", remove = FALSE) %>% \n  mutate(YEAR = 2020) %>%\n  select(YEAR, VENTSITE, NAME, REP, CELLML, ORIGSAMPLE = BAC) %>% \n  bind_rows(prok_prev_formatted %>% select(-ID_number, -Origin)) %>% \n  type.convert(as.is = TRUE) %>%\n  # Remove not countable or not data samples:\n  filter(CELLML != \"NC\") %>%\n  filter(CELLML != \"\") %>%\n  filter(CELLML != \"no data\") %>%\n  filter(CELLML != \"not countable\") %>% \n  data.frame\n\n# View(proks_allyrs)\n# View(as.data.frame(unique(proks_allyrs$NAME)))\n\nvent_order <- c(\"BSW\",\"Plume\",\"Quakeplume\",\"NearsummitBeebee\",\"MainOrifice\",\"NearMainOrifice\",\"Rav1\",\"HotChimlet1\",\"HotChimlet\",\"SouthofHotChimlet\",\"NearHotChimlet\",\"HotCracks1\",\"HotCracks2\",\"ShrimpHole\",\"ShrimpHole(X18)\",\"X18\",\"X19\",\"SouthofLungSnack\",\"TwinPeaks\",\"OMT\",\"WhiteCastle\",\"GingerCastle\",\"ArrowLoop\",\"Bartizan\",\"LotsOShrimp\",\"MustardStand\",\"ShrimpButtery\",\"ShrimpCanyon\",\"ShrimpGulley\",\"Shrimpocalypse\",\"ShrimpVegas\")\nvent_names <- c(\"Background\",\"Plume\",\"Quakeplume\",\"Near summit Beebee Vents Mound\",\"Main Orifice\",\"Near Main Orifice\",\"Ravelin #1\",\"Hot Chimlet #1\",\"Hot Chimlet\",\"South of Hot Chimlet\",\"Near Hot Chimlet\",\"Hot Cracks #1\",\"Hot Cracks #2\",\"Shrimp Hole\",\"Shrimp Hole (X-18)\",\"X-18\",\"X-19\",\"South of Lung Snack\",\"Twin Peaks\",\"Old Man Tree\",\"White Castle\",\"Ginger Castle\",\"Arrow Loop\",\"Bartizan\",\"Lots O Shrimp\",\"Mustard Stand\",\"Shrimp Buttery\",\"Shrimp Canyon\",\"Shrimp Gulley\",\"Shrimpocalypse\",\"Shrimp Vegas\")\nproks_allyrs$NAME_ORDER <- factor(proks_allyrs$NAME, levels = vent_order, labels = vent_names)\nproks_allyrs$VENTSITE_ORDER <- factor(proks_allyrs$VENTSITE, levels = c(\"Piccard\", \"VD\"), labels = c(\"Piccard\", \"Von Damm\"))\n\n\nPlot by year.\n\n\nCode\n# pdf(\"compare-across-yr-cellcount-04052021.pdf\", h = 8, w = 7)\nggplot(proks_allyrs, aes(x = NAME_ORDER, y = as.numeric(CELLML), fill = factor(YEAR), shape = VENTSITE_ORDER)) +\n  geom_point(stat = \"identity\", aes(fill = factor(YEAR)), size = 3) +\n  scale_shape_manual(values = c(21,23)) +\n  coord_flip() +\n  facet_grid(VENTSITE_ORDER ~ ., space = \"free\", scales = \"free\") +\n  scale_y_log10() +\n  scale_fill_manual(values = c(\"#1c9099\", \"#ffeda0\", \"#fc4e2a\")) +\n  theme_linedraw() +\n  theme(axis.text = element_text(color = \"black\", size = 10),\n        strip.background = element_blank(),\n        strip.text.y = element_text(color = \"black\", size = 11, hjust = 0, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey\")) +\n  labs(y = bquote(\"Cells \"~mL^-1), x = \"\") +\n  guides(fill=guide_legend(override.aes=list(shape=22)))\n\n\n\n\n\nCode\n# dev.off()"
  },
  {
    "objectID": "grazing.html#determine-flp-per-euk-cell",
    "href": "grazing.html#determine-flp-per-euk-cell",
    "title": "Protistan grazing analysis",
    "section": "4.1 Determine FLP per euk cell",
    "text": "4.1 Determine FLP per euk cell\nIsolate euk cell counts with FLPs (comma separated for counts). These need to be separated into rows, use counts_occur data frame from above.\n\n\nCode\n# Select nano and micro counts with FLPs\ncounts_sepflp <- counts_occur %>% \n  filter(!NOTES == \"Discard\") %>% \n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  select(DATE, SAMPLE, EXPID, VOL, MAG, FOV, nanoFLP, microFLP) %>%\n  # Inputs that are comma separated will be split into a new row\n  separate_rows(microFLP, sep = \",\", convert = TRUE) %>%\n  separate_rows(nanoFLP, sep = \",\", convert = TRUE) %>%\n  # Replace NAs with zeroes\n  replace_na(list(microFLP = 0, nanoFLP = 0)) %>% \n  data.frame\n\n\noptional gut check of data table modification\n\n\nCode\n## Check, see FOV 23, separated into rows.\n# View(counts_sepflp %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n# View(counts_occur %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n\n\nIsolate counts that are >0, so only eukaryote cells that were observed to have FLPs are included. Then calculate FLP per euk cell by dividing by 1 (each row is a euk cell, based on data transformation above).\n\n\nCode\ncounts_flp <- counts_sepflp %>%\n  select(SAMPLE, EXPID, nano_size = nanoFLP, micro_size = microFLP) %>%\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_FLP\") %>%\n  filter(num_of_FLP > 0) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_FLP = sum(num_of_FLP),\n            total_euks_wflp = n(),\n            .groups = \"rowwise\") %>%\n  data.frame\n\n\nOUTPUT COLUMNS: (1) total_FLP = sum of FLPs found inside a euk cell (2) total_euks_wflp = number of euks counted with ingested FLP\nRepeat above operation for euk cells without any FLP. Here, subset total number of observations where there was a euk cell without FLP. These need to be counted as euk cell without an FLP.\n\nBelow code repeats process and compiles with other FLP/euk cell data.\n\nRepeat above process for euk cells without FLPs (0 FLP per euk cell needs to be included in overall average).\n\n\nCode\ncounts_flp_compiled <- counts_occur %>% \n  filter(!(NOTES == \"Discard\")) %>% #Discard bad counts\n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  type.convert(as.is = TRUE) %>% #modify str() for columns\n  select(SAMPLE, EXPID, nano_size = nanoNoFLP, micro_size = microNoFLP) %>% #select non flp\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_euks\") %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>% \n  # filter(num_of_euks > 0) %>% # Remove observed zero counts\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_euks_noFLP = sum(num_of_euks),\n            .groups = \"rowwise\") %>%\n  # Join with FLP count information\n  ## SAMPLE, EXPID, EXPTYPE, IGTREP, and SizeFrac variables should match\n  left_join(counts_flp) %>% # Join with the counts of FLP per euk cell\n  replace_na(list(total_FLP = 0, total_euks_wflp = 0)) %>% #Replace NAs with zero\n  data.frame\n\n\nJoining, by = c(\"SAMPLE\", \"EXPID\", \"EXP_TYPE\", \"IGT_REP\", \"SizeFrac\")\n\n\nExtract total eukaryote cell value by adding across nano and micro. Then combine the nano and micro cell counts.\n\n\nCode\ncounts_flp_compiled_all <- counts_flp_compiled %>% \n  # Exclude size fraction:\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP) %>%\n  summarise(total_euks_noFLP = sum(total_euks_noFLP),\n            total_FLP = sum(total_FLP), \n            total_euks_wflp = sum(total_euks_wflp),\n            .groups = \"rowwise\") %>% \n  add_column(SizeFrac = \"total_euks\") %>% #Add SizeFrac column\n  bind_rows(counts_flp_compiled) %>% # Combine back with flp compiled list\n  data.frame"
  },
  {
    "objectID": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "href": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "title": "Protistan grazing analysis",
    "section": "4.2 Calculate FLP per euk cell calculation",
    "text": "4.2 Calculate FLP per euk cell calculation\nFirst need to import and compile with metadata to get exact timing of experiments.\n\n\nCode\nmetadata <- read.delim(\"input-data/flp-exp-metadata-compiled.txt\")\nexp_metadata <- read.csv(\"input-data/flp_exp_metadata.csv\")\n\n\nAdd metadata\n\n\nCode\ncounts_flp_calcs_all <- counts_flp_compiled_all %>% \n  # Add in metadata\n  # IGTXb are replicate counts, include them as replicates!\n  separate(EXPID, c(\"TimePoint\", \"REP\"), sep = \"-\", remove = FALSE) %>% mutate(\n    REP = ifelse(grepl(\"IGT5b\", REP), \"IGT5\", REP),\n    REP = ifelse(grepl(\"IGT4b\", REP), \"IGT4\", REP),\n    REP = ifelse(grepl(\"Bag\", EXP_TYPE), \"Bag\", REP)) %>% \n  left_join(metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"TimePoint\" = \"TimePoint\", \"REP\" = \"REP\")) %>% \n  left_join(exp_metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"REP\" = \"REP\")) %>% \n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate_ID\"), sep = \"-\", remove = FALSE) %>%\n  ## Treat repeated IGT counts completely separate\n  # group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  ## Treat repeated IGT counts as replicates (e.g., IGT4b and IGT4 == IGT4)\n  group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, REP, SizeFrac) %>%\n  # FLPperEuk is the total FLP divided by the total number of euk cells counted\n  mutate(FLPperEuk = total_FLP/(sum(total_euks_noFLP, total_euks_wflp))) %>%\n  unite(\"Experiment\", Name, REP, sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nCOLS: Timepoint, Minutes = time point label, actual incubated minutes\n\n\nCOLS: Replicate_ID, REP, and IGT_REP = full replicate identified for IGTs and Bags, designation of biological replicates, and designation of technical replicates for IGT experiments"
  },
  {
    "objectID": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "href": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "title": "Protistan grazing analysis",
    "section": "4.3 Calculate linear regression to obtain slope",
    "text": "4.3 Calculate linear regression to obtain slope\nUse lm() function in R to calculate linear regression for each experiment. Slope equates to grazing rate. Function inputs the FLP per euk cell data, performs regression and then adds a column for slope and r-squared values.\nFunction to estimate slope. Uses broom and tidymodels, then extracts slope.\n\n\nCode\ncalculate_lm <- function(df){\n  regression_1 <- df %>%\n  type.convert(as.is = TRUE) %>%\n  ## Keep technical replicates separate for IGTs\n  # group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%\n  # nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%\n  ## Combine technical replicates for IGTs\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         tidied = map(lm_fit, tidy)) %>% \n  unnest(tidied) %>% \n  # select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, term, estimate) %>%\n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, term, estimate) %>% \n  pivot_wider(names_from = term, values_from = estimate) %>% \n  data.frame\n  # Reset column names\n  colnames(regression_1) <- c(\"SAMPLE\", \"Site\", \n                              \"Experiment\", \"Name\", \"REP\",\n                              \"SizeFrac\", \"INTERCEPT\", \"SLOPE\")\n  # Repeat broom model to get R2\n  out_regression <- df %>%\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         glanced = map(lm_fit, glance)) %>% \n  unnest(glanced) %>% \n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, r.squared) %>% \n  right_join(regression_1) %>% \n  right_join(df) %>% \n  data.frame\n  out_regression$SITE <- factor(out_regression$Site, levels = c(\"VD\", \"Piccard\"))\n  out_regression$TYPE <- factor(out_regression$EXP_TYPE, levels = c(\"Bag\", \"IGT\"))\n  return(out_regression)\n}\n\n\n\nNote that an error may occur when running the below function. This is due to the fact that some experiments did not have replicates.\n\nApply to all data to obtain slope.\n\n\nCode\ncalcs_wslope_regression <- calculate_lm(counts_flp_calcs_all)\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\ngut check linear regression work. Use below commands out to recalculate one linear regression. Above function uses the nest() capability of tidyverse. Below, one experiment is subset to check the value.\n\n\nCode\n# Extract only plume-bag experiment from VD\n# tmp_plume <- filter(counts_flp_calcs_all, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\")\n# tmp_plume # View\n# Perform linear regression\n# lm_out <- lm(FLPperEuk ~ Minutes, data = tmp_plume)\n# # Check output\n# summary(lm_out)\n# lm_out$coefficients #Intercept=intercept #Minutes = SLOPE\n# # Compare with nested function output\n# filter(calcs_wslope_regression, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\") %>% head\n\n\n\nPlot linear regression trend\nPlot all bag experiments with estimated slope.\n\n\nCode\n# | fig-width: 7\n# | fig-height: 8\ncalcs_wslope_regression %>% \n  filter(SizeFrac == \"total_euks\") %>% \n  # filter(TYPE != \"IGT\") %>% \n  unite(EXPERIMENT, SITE, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = Site)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 42, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\nData points represent the FLP per euk cells (based on total eukaryote cells counts). Y-axis represents the duration of incubation (in minutes). The dashed purple line reprents the slope and intercept of the experiment."
  },
  {
    "objectID": "grazing.html#remove-igt-tf-time-points.",
    "href": "grazing.html#remove-igt-tf-time-points.",
    "title": "Protistan grazing analysis",
    "section": "4.4 Remove IGT Tf time points.",
    "text": "4.4 Remove IGT Tf time points.\nIGT experiment results appear to have bottle effect, especially in the final time point. Additionally, due to the lack of biological replicates in the IGT experiments, technical replicates are treated as biological replicates in the regression below.\n\n\nCode\nIGT_lm_woTf <- counts_flp_calcs_all %>% \n  # Select only IGT experiments with total eukaryotes, remove Tf (T3)\n  filter(SizeFrac == \"total_euks\") %>% \n  filter(EXP_TYPE == \"IGT\" & !(TimePoint == \"T3\")) %>% \n  add_column(IGT_cor = \"rm Tf\") %>% \n  data.frame\n\n# Recalculate lm(), keep replicates separate\nigt_regression_noTf <- calculate_lm(IGT_lm_woTf) # Recalculate\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\nAll elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\nPlot IGT grazing experiments with newly calculated grazing effect.\n\n\nCode\nigt_regression_noTf %>% \n  # filter(SizeFrac == \"total_euks\") %>% \n  # filter(TYPE != \"IGT\") %>% \n  unite(EXPERIMENT, SITE, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = Site)) +\n  scale_shape_manual(values = c(24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\n\nresults are more consistent across experiments."
  },
  {
    "objectID": "grazing.html#compile-and-save-grazing-experiment-results",
    "href": "grazing.html#compile-and-save-grazing-experiment-results",
    "title": "Protistan grazing analysis",
    "section": "4.5 Compile and save grazing experiment results",
    "text": "4.5 Compile and save grazing experiment results\n\n\nCode\ncalcs_wslope_regression_update <- calcs_wslope_regression %>% \n  filter(TYPE != \"IGT\") %>% \n  bind_rows(igt_regression_noTf %>% select(-IGT_cor)) %>% \n  data.frame\n\n# Factor\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n# Factor for shipboard\ncalcs_wslope_regression_update$SiteOrder <- factor(calcs_wslope_regression_update$Site, levels = site_ids, labels = site_fullname)\ncalcs_wslope_regression_update$NameOrder <- factor(calcs_wslope_regression_update$Name, levels = vent_ids, labels = vent_fullname)\n\n# View(calcs_wslope_regression_update)\n# write.csv(calcs_wslope_regression_update, file = \"output-data/estimated-slopes-grazingexp.csv\")"
  },
  {
    "objectID": "grazing.html#bag-grazing-experiment-controls",
    "href": "grazing.html#bag-grazing-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "5.1 Bag grazing experiment controls",
    "text": "5.1 Bag grazing experiment controls\n\n\nCode\ndtaf_avg %>% \n  filter(Site != \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site != \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#igt-experiment-controls",
    "href": "grazing.html#igt-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "5.2 IGT experiment controls",
    "text": "5.2 IGT experiment controls\nRepeat for IGT experiments.\n\n\nCode\ndtaf_avg %>% \n  filter(Site == \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site == \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#plot-flpgrazer-minute",
    "href": "grazing.html#plot-flpgrazer-minute",
    "title": "Protistan grazing analysis",
    "section": "6.1 Plot FLP/grazer /minute",
    "text": "6.1 Plot FLP/grazer /minute\n\n\nCode\n# svg(\"\", h =, w = )\ngrazing_min_plot <- table_grazerate_wflp %>% \n  ggplot(aes(y = GRAZE_RATE, x = NAME, shape = EXP_TYPE, fill = FIELD)) +\n  geom_jitter(stat = \"identity\", aes(shape = EXP_TYPE, fill = FIELD),\n              color = \"black\", size = 3, width = 0.3) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  facet_grid(.~Site, space = \"free\", scales = \"free\") +\n  # coord_flip() +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n       shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"FLP \" ~grazer^-1 ~min^-1))\n# dev.off()\ngrazing_min_plot\n\n\n\n\n\nAmend table with eukaryote and prokaryote estimated biomass.\n\n\nCode\n# Subset the average in situ prok cells/ml for non-background samples\ntmp <- filter(insitu_proks, Name != \"BSW\", Name != \"Plume\") %>% select(MEAN)\navg_insitu <- mean(tmp$MEAN)\n# head(insitu_proks)\n\n# Add to master table with data\ntable_grazerate_wflp_wprok <- insitu_proks %>% \n  select(Site = SAMPLE, Prok_conc = MEAN, Prok_sem = SEM) %>% \n  right_join(table_grazerate_wflp) %>% \n  mutate(Prok_conc = ifelse(is.na(Prok_conc), avg_insitu, Prok_conc)) %>% \n  data.frame\n\n\nJoining, by = \"Site\"\n\n\nCode\ntable_grazerate_wflp_wprok_weuk <- plot_euk_format %>% \n  select(Name = NameOrder, FIELD = SiteOrder, euk_conc = avg_conc, EXP_TYPE, euk_conc_sem = SEM_conc) %>%\n  right_join(table_grazerate_wflp_wprok) %>% \n  select(FIELD, NAME = Name, EXP = EXP_TYPE, SAMPLE = Site, RATE_min = GRAZE_RATE, FLP_ml = FLP_conc, PROK_ml = Prok_conc, PROK_sem = Prok_sem, EUK_ml = euk_conc, EUK_sem = euk_conc_sem, TimePoints, EXP_REPS, EXP_VOL,  CTRL_REPS, CTRL_VOL) %>%\n  data.frame\n\n\nJoining, by = c(\"Name\", \"FIELD\", \"EXP_TYPE\")"
  },
  {
    "objectID": "grazing.html#carbon-biomass",
    "href": "grazing.html#carbon-biomass",
    "title": "Protistan grazing analysis",
    "section": "7.1 Carbon biomass",
    "text": "7.1 Carbon biomass\nReferences for estimating biovolume Pernice, M.C., Forn, I., Gomes, A., Lara, E., Alonso-Sáez, L., Arrieta, J.M., et al. (2015) Global abundance of planktonic heterotrophic protists in the deep ocean. ISME J 9: 782–792.\n\n\nCode\n# Import manual biovolume measurements\nbiov <- read.delim(\"input-data/biovol-euk-12-10-2020.txt\")\n# head(biov)\n\n# Calculate volume\nbiov_calc <- biov %>% \n  mutate(SizeFrac = case_when(\n    h >= 20 ~ \"micro\",\n    TRUE ~ \"nano\")) %>% \n  mutate(Volume = ((pi/6) * (d^2) * d)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999\n  mutate(pgC_cell = (0.216 * (Volume^0.939))) %>% # Calculate Cell biomass in pg C per cell # Menden-Deuer and Lessard 2000\n  data.frame\n# View(biov_calc)\nbiov_calc\n\n\n   EXP VENT_BSW      h      d SizeFrac     Volume     pgC_cell\n1  IGT     vent 30.077 25.764    micro 8954.44130 1110.2426245\n2  IGT     vent 89.582 10.000    micro  523.59878   77.1957618\n3  Bag      BSW 14.595  8.036     nano  271.71800   41.6956679\n4  Bag      BSW 12.480  8.982     nano  379.41786   57.0486460\n5  Bag     vent  9.218  3.120     nano   15.90239    2.9015292\n6  IGT     vent 17.255  9.986     nano  521.40274   76.8917043\n7  Bag     vent 41.153 21.000    micro 4849.04826  624.1445904\n8  IGT     vent 10.282  4.136     nano   37.04591    6.4194942\n9  IGT     vent 29.776 25.852    micro 9046.50993 1120.9583343\n10 IGT     vent 10.991  4.000     nano   33.51032    5.8424695\n11 Bag     vent 14.333  2.000     nano    4.18879    0.8290772\n12 Bag     vent 36.164  3.000    micro   14.13717    2.5980292\n13 Bag      BSW 16.206 14.924     nano 1740.42111  238.4669404\n14 Bag      BSW  7.000  7.000     nano  179.59438   28.2640658\n15 Bag     vent 10.069  5.000     nano   65.44985   10.9544849\n\n\n\nVolume is reported as um^3\n\n\n\nCode\n# Volume by experiment type\nbiov_calc %>% \n  group_by(EXP) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  EXP     VOL     C\n  <chr> <dbl> <dbl>\n1 Bag    836.  112.\n2 IGT   3186.  400.\n\n\nCode\n# Volume by euk size\nbiov_calc %>% \n  group_by(SizeFrac) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  SizeFrac   VOL     C\n  <chr>    <dbl> <dbl>\n1 micro    4678. 587. \n2 nano      325.  46.9\n\n\nCode\n# Volume by site\nbiov_calc %>% \n  group_by(VENT_BSW) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  VENT_BSW   VOL     C\n  <chr>    <dbl> <dbl>\n1 BSW       643.  91.4\n2 vent     2188. 276. \n\n\nCode\n# head(biov_calc)\neuk_vol <- mean(biov_calc$Volume);euk_vol # in um^3\n\n\n[1] 1775.759\n\n\nCode\neuk_carbon <- mean(biov_calc$pgC_cell); euk_carbon # in pg C per cell\n\n\n[1] 226.9636\n\n\nCode\neuk_carbon_min <- min(biov_calc$pgC_cell); euk_carbon_min\n\n\n[1] 0.8290772\n\n\nCode\neuk_carbon_max <- max(biov_calc$pgC_cell); euk_carbon_max\n\n\n[1] 1120.958\n\n\nCode\n# euk_carbon\n\n\nAvg euk biomass pg C per individual cell == {r}euk_carbon"
  },
  {
    "objectID": "grazing.html#compare-carbon-biomass-with-literature",
    "href": "grazing.html#compare-carbon-biomass-with-literature",
    "title": "Protistan grazing analysis",
    "section": "7.2 Compare carbon biomass with literature",
    "text": "7.2 Compare carbon biomass with literature\nCompare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10^7 µm^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell.\nImport the heterotroph species volume and carbon content to compare to my measured values.\n\n\nCode\n# Hu-measured\nrange(biov_calc$Volume)\n\n\n[1]    4.18879 9046.50993\n\n\nCode\nrange(biov_calc$pgC_cell)\n\n\n[1]    0.8290772 1120.9583343\n\n\nCode\nc_prev <- read.delim(\"input-data/md-lessard-2000.txt\") # Table 2, heterotrophs only\n\n# combine and plot\ncarbon_compare <- c_prev %>% \n  add_column(source = \"Menden-Deuer Lessard\") %>% \n  select(source, Volume = vol, pgC_cell) %>% \n  rbind(biov_calc %>% add_column(source = \"MCR\") %>% select(source, Volume, pgC_cell)) %>% \n    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +\n      geom_point(aes(fill = source), shape = 23, color = \"black\", size = 3) +\n      scale_y_log10() + scale_x_log10() +\n      labs(title = \"Compare literature to measured cell volume & C content\",\n           x = bquote(\"Volume\" ~µm^-3),\n           y = bquote(\"pg C\" ~cell^-1)) +\n      theme_bw() + theme(legend.title = element_blank(),\n                         axis.title = element_text(size = 14),\n                         axis.text = element_text(size = 14),\n                         legend.text = element_text(size = 14))\n\ncarbon_compare\n\n\n\n\n\nCode\neuk_carbon_lit_mean <- mean(c_prev$pgC_cell)\neuk_carbon_lit_min <- min(c_prev$pgC_cell)\neuk_carbon_lit_max <- max(c_prev$pgC_cell)\n\n\nUpon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall.\nFind lowest estimates or protist carbon, benthic estimates, and others? How does it compare to my measurements?\n\nCarbon biomass for prokaryotes\nBelow adding in biomass estimates from prokaryotes and protists.\n\n\nCode\nbac_carbon_ug <- (86)*(1.00E-9) # From Derived from Morono et al. 2011 \n# bac_carbon_ug\nbac_carbon_ug_2 <- (173)*(1.00E-9) # Derived from McNichol et al. 2018; LOFERER-KRO ̈ ßBACHER, J. KLIMA & R. PSENNER 1998\n# table_wcalcs\n\n\nAmend all to table Incorporate calculations that include biomass of population and ug C consumed. For rate measurements, only incorporate the Morono et al. 2011 biomass for prokaryotes. This way it is on the lower end and is comparable to Gorda Ridge work.\n\n\nCode\nbsw <- c(\"Plume\", \"Background\")\n\ntable_wcalcs_biomass <- table_wcalcs %>% \n  add_column(euk_C_ug_Hu = (euk_carbon / (1.00E+06))) %>% # Convert to ug from pg\n  add_column(euk_C_ug_lit = (euk_carbon_lit_mean / (1.00E+06))) %>% # literature\n  add_column(bac_C_ug = bac_carbon_ug) %>% \n  add_column(bac_C_ug_2 = bac_carbon_ug_2) %>%\n  # Grazing rate in ug C per bac per day\n  mutate(RATE_ugCbac_pergrazer_perday = (RATE_hr * 24 * bac_C_ug), # Grazing rate as ug C per grazer per day\n         # % of cell carbon per day\n         SPEC_INGESTION_RATE = (RATE_ugCbac_pergrazer_perday / euk_C_ug_Hu),\n         SPEC_INGESTION_RATE_lit = (RATE_ugCbac_pergrazer_perday / euk_C_ug_lit),\n         Prok_biomass = PROK_ml * bac_carbon_ug,\n         Euk_biomass_Hu = EUK_ml * euk_C_ug_Hu,\n         Euk_biomass_lit = EUK_ml * euk_C_ug_lit,\n         Prok_biomass_L = PROK_ml * bac_carbon_ug * 1000,\n         Euk_biomass_Hu_L = EUK_ml * euk_C_ug_Hu * 1000,\n         Euk_biomass_lit_L = EUK_ml * euk_C_ug_lit * 1000,\n         # Repeat with SEM values\n         Prok_biomass_sem = PROK_sem * bac_carbon_ug,\n         Euk_biomass_Hu_sem = EUK_sem * euk_C_ug_Hu,\n         Euk_biomass_lit_sem = EUK_sem * euk_C_ug_lit,\n         Prok_biomass_sem_L = PROK_sem * (bac_carbon_ug* 1000),\n         Euk_biomass_Hu_sem_L = EUK_sem * (euk_C_ug_Hu * 1000),\n         Euk_biomass_lit_sem_L = EUK_sem * (euk_C_ug_lit * 1000)) %>% \n  type.convert(as.is = TRUE) %>%\n  mutate(detected = case_when(\n    RATE_min < 0 ~ \"Not detected\",\n    TRUE ~ \"Detected\")) %>% \n  mutate(type = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ paste(\"Vent\", EXP, sep=\"-\")\n  )) %>% \n  mutate(GRAZE_RATE = case_when(\n    RATE_min < 0 ~ 0,\n    TRUE ~ RATE_min\n  )) %>% \n  mutate(type_site = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ \"Vent\"\n  )) %>%\n  data.frame\n# View(table_wcalcs_biomass)\n\n\n\nVolume is reported as um^3\n\n\nGrazing rate column == FLP per minute consumed\nGrazing effect hr == cells per ml per hr"
  },
  {
    "objectID": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "href": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "title": "Protistan grazing analysis",
    "section": "7.3 Amend table with ‘bounded’ carbon estimates",
    "text": "7.3 Amend table with ‘bounded’ carbon estimates\nAlso make a “bounded” table that demonstrates the ug C consumed in the context of McNichol et al.\n\n\nCode\n# G = number of cells grazed during experiment duration\ntable_wcalcs_biomass_bounded <- table_wcalcs_biomass %>% \n  add_column(fgC_cell = 86) %>% # Add in Morono et al. 2011 value\n  mutate(\n    # cells_consumed_perday = (G / 1), # Rate of cells consumed * in situ prok, per day\n    fgC_ml_perday = (GRAZING_EFFECT_day * fgC_cell), # Convert cell amount to fg C\n    ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000), # Convert to ug C per L\n    lower_mcnichol = 100*(ugC_L_perday / 17.3),\n    upper_mcnichol = 100*(ugC_L_perday / 321.4)\n  ) %>% \n  data.frame\n\n\n\n\nCode\n# head(table_wcalcs_biomass_bounded)\n# View(table_wcalcs_biomass_bounded)\n# write_delim(table_wcalcs_biomass_bounded, file = \"output-data/table-wcalc.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "grazing.html#function-to-plot-grazing-results",
    "href": "grazing.html#function-to-plot-grazing-results",
    "title": "Protistan grazing analysis",
    "section": "10.1 Function to plot grazing results",
    "text": "10.1 Function to plot grazing results\n\n\nCode\nconc_rate_plot_mcr <- function(df, var, sem){\n  df %>% \n    filter(Variable == var) %>%\n    filter(SEM_variable == sem) %>% \n    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD)) +\n    geom_errorbar(aes(ymax = (Value + SEM), ymin = (Value - SEM)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(shape = EXP, fill = FIELD),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 23)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n    facet_wrap(VARIABLE_ORDER ~ ., scales = \"free\", \n               strip.position = c(\"left\"), labeller = label_parsed) +\n    scale_y_log10() +\n    # scale_y_log10(labels = function(x) format(x, scientific = TRUE)) +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 14),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = \"\")\n}\n\n\n\n\nCode\n# conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"Prok_biomass_L\", \"Prok_biomass_sem_L\")\n\nconc_rate_plot_mcr(biomass_rate_plot, \"Euk_biomass_Hu_L\", \"Euk_biomass_Hu_sem_L\")\n\n\n\n\n\n\n\nCode\n# scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +\ngrazing_rate <- biomass_rate_plot %>% \n  type.convert(as.is = TRUE) %>%\n    filter(Variable == \"GRAZING_EFFECT_hr\") %>%\n    filter(SEM_variable == \"GRAZING_EFFECT_hr_min\" | SEM_variable == \"GRAZING_EFFECT_hr_max\") %>% \n    pivot_wider(names_from = SEM_variable, values_from = SEM) %>%\n    mutate(NAME_ORDER = factor(NAME, levels = c(\"Background\",\"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"Hot Chimlet #1\", \"Shrimp Gulley\", \"South of Hot Chimlet\", \"South of LungSnack\", \"Arrow Loop\", \"Bartizan\", \"Ravelin #1\"))) %>% \n    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(shape = EXP, fill = FIELD),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n    facet_wrap(. ~ VARIABLE_ORDER, scales = \"free\", \n               labeller = label_parsed) +\n    theme_minimal() + coord_flip() +\n    # theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n    #       panel.background = element_blank(), \n    #       axis.line = element_line(colour = \"black\"), \n    #       axis.text.x = element_text(color=\"black\", size = 11, \n    #                                  angle = 0, hjust = 1, vjust = 1), \n    #       axis.text.y = element_text(color=\"black\", size = 11),\n    #       axis.title =element_text(color=\"black\", size = 11),\n    #       axis.ticks = element_line(),\n    #       legend.title = element_blank(),\n    #       strip.placement = \"outside\",\n    #       strip.text.y = element_text(color=\"black\", size = 11),\n    #       strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = \"\")\n# class(grazing_rate)\n# head(biomass_rate_plot)\n# svg(\"plot-grazing-withscale.svg\", h = 7, w = 6)\n# grazing_rate\n# plot_grid(\n# grazing_rate + scale_y_continuous(limits = c(0,2000))\n  # ,\n          # grazing_rate,\n          # ncol = 1, rel_heights = c(0.6,1))\n# dev.off()\ngrazing_rate + scale_y_log10()\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis"
  },
  {
    "objectID": "grazing.html#log-scale-y-axis",
    "href": "grazing.html#log-scale-y-axis",
    "title": "Protistan grazing analysis",
    "section": "10.2 Log scale y axis",
    "text": "10.2 Log scale y axis"
  },
  {
    "objectID": "grazing.html#combine-gr-and-mcr-data",
    "href": "grazing.html#combine-gr-and-mcr-data",
    "title": "Protistan grazing analysis",
    "section": "11.1 Combine GR and MCR data",
    "text": "11.1 Combine GR and MCR data\n\n\nCode\nall_vents <- mcr_graze %>%\n  type.convert(as.is = TRUE) %>%\n  select(FIELD, NAME, SAMPLE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, GRAZING_EFFECT_hr_min, GRAZING_EFFECT_hr_max, BAC_TURNOVER_PERC, ugC_L_perday) %>% \n  rbind(gr %>%\n          add_column(FIELD = \"Gorda Ridge\") %>% \n          add_column(EUK_ml = NA) %>% \n          separate(SAMPLE, c(\"SAMPLE\", \"NAME\"), sep = \"-\") %>% \n          select(FIELD, NAME, SAMPLE, EXP = Bottle, PROK_ml = prok_avg, EUK_ml, GRAZING_EFFECT_hr = GrazingRate_hr, GRAZING_EFFECT_hr_min = GrazingRate_hr_min, GRAZING_EFFECT_hr_max = GrazingRate_hr_max, BAC_TURNOVER_PERC = Prok_turnover, ugC_L_perday = ugC_L_perday_morono)) %>% \n  left_join(temps) %>% \n  mutate(SAMPLE_TYPE = case_when(\n    grepl(\"BSW\", NAME) ~ \"Background\",\n    grepl(\"Near vent BW\", NAME) ~ \"Background\",\n    grepl(\"Background\", NAME) ~ \"Background\", \n    grepl(\"Plume\", NAME) ~ \"Background\",\n    TRUE ~ \"Vent\"\n  ))\n\n\nJoining, by = c(\"NAME\", \"SAMPLE\")\n\n\nCode\n# View(all_vents)\n# all_vents\n# write_delim(all_vents, file = \"output-data/grazing-cellcounts-GR_MCR.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "grazing.html#plot-combined-results",
    "href": "grazing.html#plot-combined-results",
    "title": "Protistan grazing analysis",
    "section": "11.2 Plot combined results",
    "text": "11.2 Plot combined results\n\n\nCode\nallrates <- all_vents %>% \n  select(FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with(\"GRAZING_EFFECT_\")) %>% \n  distinct() %>% \n    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, fill = FIELD, shape = SAMPLE_TYPE)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(fill = FIELD, shape = SAMPLE_TYPE),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\", \"#addd8e\")) +\n    facet_grid(. ~ SAMPLE_TYPE, scales = \"free\", space = \"free\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 11),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"cells\"~ml^-1~hr^-1))\n\n\nAdd Gorda Ridge comparison to supplementary?\n\n\nCode\nallrates\n\n\n\n\n\nCode\nallrates + scale_y_log10()\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\n\n\n\nCode\n# allrates + scale_y_continuous(limits = c(0,1000))\n\n\n\nRemove undetected grazing rate\nRepeat grazing rate plot, but removed undetectable\n\n\nCode\n# unique(all_vents$GRAZING_EFFECT_hr)\nallrates_nonzero <- all_vents %>% \n  filter(GRAZING_EFFECT_hr > 0) %>% \n  select(FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with(\"GRAZING_EFFECT_\")) %>% \n  distinct() %>% \n    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, fill = FIELD, shape = SAMPLE_TYPE)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(fill = FIELD, shape = SAMPLE_TYPE),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\", \"#addd8e\")) +\n    facet_grid(. ~ SAMPLE_TYPE, scales = \"free\", space = \"free\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 11),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"cells\"~ml^-1~hr^-1))\n\n\n\n\nCode\n# svg(\"compare-all-rates-color-nonZero.svg\", h = 4, w = 7)\nallrates_nonzero + scale_y_log10()\n\n\n\n\n\nCode\n# dev.off()\n\n\nPanel plot, cells per ml and grazing rate\n\n\nCode\n# svg(\"plot-gcellconc-grazing-log.svg\", h = 10, w = 6)\n# grazing_rate + scale_y_log10(limits = c(1e-1,1e5), breaks=10^(0:7))\nplot_grid(conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\"),\n          conc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\"),\nallrates_nonzero + scale_y_log10(), ncol = 1)\n\n\n\n\n\nCode\n# dev.off()\n\n\n\n\nCode\n# svg(\"cells-per-ml.svg\", h = 7, w = 7)\nconc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\") + conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\") + patchwork::plot_layout(ncol = 1) + patchwork::plot_annotation(tag_levels = \"a\") \n\n\n\n\n\nCode\n# dev.off()"
  },
  {
    "objectID": "asv.html#sequence-stats",
    "href": "asv.html#sequence-stats",
    "title": "18S survey",
    "section": "Sequence stats",
    "text": "Sequence stats\nTotal ASVs and sequences for each sample.\n\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID)) %>% \n  pivot_longer(cols = ends_with(\"_stats\")) %>% \n  ggplot(aes(x = SAMPLE, y = value)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  # geom_hline(yintercept=10000, linetype=\"dashed\", color = \"green\") +\n  facet_grid(. ~ name, scales = \"free\") +\n  theme_linedraw()\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCreate supplementary table with ASV and sequence stats.\n\ntable_supp_seqstats <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID))\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n# write.csv(table_supp_seqstats, file = \"output-data/supp-table-sequencestats.csv\")"
  },
  {
    "objectID": "asv.html#cluster-analysis",
    "href": "asv.html#cluster-analysis",
    "title": "18S survey",
    "section": "3.1 Cluster analysis",
    "text": "3.1 Cluster analysis\nOrdination analysis and methods to look at whole protistan communities at MCR.\n\n\nCode\n# | message: false\nlibrary(vegan); library(ggdendro); library(compositions)\n\n\nLoading required package: permute\n\n\nLoading required package: lattice\n\n\nThis is vegan 2.6-2\n\n\nWelcome to compositions, a package for compositional data analysis.\nFind an intro with \"? compositions\"\n\n\n\nAttaching package: 'compositions'\n\n\nThe following object is masked from 'package:ape':\n\n    balance\n\n\nThe following objects are masked from 'package:stats':\n\n    anova, cor, cov, dist, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, norm, scale, scale.default"
  },
  {
    "objectID": "asv.html#cluster-analysis-with-grazing-assays",
    "href": "asv.html#cluster-analysis-with-grazing-assays",
    "title": "18S survey",
    "section": "3.2 Cluster analysis with grazing assays",
    "text": "3.2 Cluster analysis with grazing assays\n\n\nCode\n# head(asv_wtax_qc)\nasv_mcr_numeric <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(FeatureID, SAMPLENAME) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID'. You can override using the\n`.groups` argument.\n\n\nTransform compositional data, center log ratio.\n\n\nCode\nlogratio_mcr <- data.frame(compositions::clr(t(asv_mcr_numeric)))\n# dim(logratio_mcr)\n# ?alr()\n# ?ilr()\n\npca_logratio <- prcomp(logratio_mcr)\n\nvariance_logratio <- (pca_logratio$sdev^2)/sum(pca_logratio$sdev^2)\n\nbarplot(variance_logratio, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", \n    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n\n\n\n\nCode\n# Extract PCA points\nmcr_pca_pts <- data.frame(pca_logratio$x, SAMPLE = rownames(pca_logratio$x)) %>% \n  rownames_to_column(var = \"SAMPLENAME\") %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"VENT\"), \" \", \n        remove = FALSE) \n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 21 rows [1, 2, 3, 4,\n5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n\nPCoA with all samples\n\n\nCode\n# unique(mcr_pca_pts$VENT)\n# vent_ids\n# site_fullname\nmcr_pca_pts %>% \n  mutate(VENT_ORDER = factor(VENT, levels = vent_ids, labels = vent_fullname),\n         SITE_ORDER = factor(SITE, levels = c(\"VonDamm\", \"Piccard\"), labels = site_fullname)) %>% \n  mutate(TYPE = case_when(\n    SAMPLETYPE == \"Incubation\" ~ \"Incubation\",\n    TRUE ~ \"in situ\"\n  )) %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_point(color = \"black\", stroke = 1.3, size = 5, aes(shape = SITE_ORDER, fill = VENT_ORDER, alpha = TYPE)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_alpha_manual(values = c(1,0.5)) +\n  scale_fill_manual(values = vent_colors) +\n  theme_linedraw() +\n  guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)\n\n\n\n\n\nDendrogram analysis\n\n\nCode\n# ?decostand()\n# Relative abundance\nrel_abun <- decostand(asv_mcr_numeric, MARGIN = 2, method = \"total\")\n# Cluster dendrogram (average hierarchical clustering)\ncluster_mcr <- hclust(dist(t(rel_abun)), method = \"average\")\ndendro <- as.dendrogram(cluster_mcr)\nmcr_dendro <- dendro_data(dendro, type = \"rectangle\")\n\n\n\n\nCode\nmcr_dendro_plot <- ggplot(segment(mcr_dendro)) +\n  geom_segment(aes(x = x, y = y, xend = xend, \n    yend = yend)) + \n  coord_flip() + \n  scale_y_reverse(expand = c(0.2, 0.5), breaks = c(0, 0.2, 0.4, 0.6, 0.8)) +\n  geom_text(aes(x = x, y = y, label = label, angle = 0, hjust = 0), data = label(mcr_dendro)) +\n  theme_dendro() + labs(y = \"Dissimilarity\") +\n    theme(axis.text.x = element_text(color = \"black\", size = 14), axis.line.x = element_line(color = \"#252525\"), \n        axis.ticks.x = element_line(), axis.title.x = element_text(color = \"black\", \n            size = 14))\n# svg('figs/SUPPLEMENTARY-dendrogram-wreps.svg', w = 10, h = 8)\nmcr_dendro_plot\n\n\n\n\n\n\n\nPCoA with in situ only\n\n\nCode\nasv_mcr_numeric_insitu <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  group_by(FeatureID, SAMPLENAME) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID'. You can override using the\n`.groups` argument.\n\n\nCode\ninsitu_logratio_mcr <- data.frame(compositions::clr(t(asv_mcr_numeric_insitu)))\n\ninsitu_pca_logratio <- prcomp(insitu_logratio_mcr)\n\ninsitu_variance_logratio <- (insitu_pca_logratio$sdev^2)/sum(insitu_pca_logratio$sdev^2)\n\nbarplot(insitu_variance_logratio, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", \n    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n\n\n\n\nCode\n# Extract PCA points for only insitu samples\ninsitu_mcr_pca_pts <- data.frame(insitu_pca_logratio$x, SAMPLE = rownames(insitu_pca_logratio$x)) %>% \n  rownames_to_column(var = \"SAMPLENAME\") %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"VENT\"), \" \", \n        remove = FALSE) \n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 13 rows [1, 2, 3, 4,\n5, 6, 7, 8, 9, 10, 11, 12, 13].\n\n\n\n\nCode\ninsitu_mcr_pca_pts %>% \n  mutate(TYPE = case_when(\n    SAMPLETYPE == \"Incubation\" ~ \"Incubation\",\n    TRUE ~ \"in situ\"\n  )) %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_point(color = \"black\", size = 4, aes(shape = SITE, fill = VENT, alpha = TYPE)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_alpha_manual(values = c(1,0.4)) +\n  theme_linedraw() +\n  guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)\n\n\n\n\n\nCode\n# Keep same sample colors to compare to cluster analysis with in situ and Tf samples."
  },
  {
    "objectID": "asv.html#shared-asvs",
    "href": "asv.html#shared-asvs",
    "title": "18S survey",
    "section": "3.4 Shared ASVs",
    "text": "3.4 Shared ASVs\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose=TRUE)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nCode\n# unique(asv_wtax_qc$SITE)\nhead(asv_wtax_qc)\n\n\n# A tibble: 6 × 22\n  FeatureID SAMPLE value Taxon Conse…¹ SAMPL…² VENT  SITE  SAMPL…³ DEPTH SAMPL…⁴\n  <chr>     <chr>  <dbl> <chr>   <dbl> <chr>   <chr> <chr> <chr>   <chr> <chr>  \n1 00056209… 52_MC…     0 Euka…     0.8 \"Picca… Lots… Picc… \"\"      \"\"    Incuba…\n2 00056209… 53_MC…     0 Euka…     0.8 \"Picca… Lots… Picc… \"\"      \"\"    Incuba…\n3 00056209… 54_MC…     0 Euka…     0.8 \"VonDa… Must… VonD… \"\"      \"\"    Incuba…\n4 00056209… 55_MC…     0 Euka…     0.8 \"VonDa… Shri… VonD… \"\"      \"\"    Incuba…\n5 00056209… 57_MC…     0 Euka…     0.8 \"Picca… Shri… Picc… \"\"      \"\"    Incuba…\n6 00056209… 58_MC…     0 Euka…     0.8 \"VonDa… Plume VonD… \"\"      \"\"    Incuba…\n# … with 11 more variables: SAMPLETYPE_BIN <chr>, YEAR <chr>, TEMP <chr>,\n#   pH <chr>, PercSeawater <chr>, Mg <chr>, H2 <chr>, H2S <chr>, CH4 <chr>,\n#   ProkConc <chr>, Sample_or_Control <chr>, and abbreviated variable names\n#   ¹​Consensus, ²​SAMPLENAME, ³​SAMPLEID, ⁴​SAMPLETYPE\n\n\nCode\n# head(TAX)\n\n\nFunction to generate upsetR plot with varied taxonomic levels.\nQuestions:\n\nHow many ASVs are shared among vent sites within Von Damm and Piccard?\nWhat about shared ASVs across each vent field?\nIs there a taxonomic level that drives site-to-site or field-to-field community dissimilarity?\n\n\n\nCode\n# options for taxa: SupergroupPhylum, Supergroup, Phylum, Class, Order, Family, Genus, Species\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n\nall_taxa_color = c(\"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#deebf7\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\", \"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\")\n\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, SupergroupPhylum) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  \n  group_by(SupergroupPhylum, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n  distinct(SupergroupPhylum, SUM, SAMPLE, .keep_all = TRUE) %>% \n  group_by(SupergroupPhylum) %>% \n  summarise(SAMPLE = list(SAMPLE)) %>% \n  ggplot(aes(x = SAMPLE)) +\n    geom_bar(color = \"black\", width = 0.7, aes(fill = SupergroupPhylum)) +\n    scale_x_upset(n_intersections = 25) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = \"\", y = \"Shared at taxonomic level\") +\n  theme_linedraw() +\n  theme(axis.text.y = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.text.x = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.title = element_text(color=\"black\", size=14, face = \"bold\"),\n        legend.text = element_text(color = \"black\", size = 12, face = \"bold\"),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\")) + \n  scale_fill_manual(values = all_taxa_color)\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 5926 rows [5, 6, 7,\n8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 28, 29, 30, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 3451 rows [1, 2,\n3, 4, 12, 13, 18, 19, 23, 27, 35, 44, 45, 46, 48, 49, 53, 54, 55, 56, ...].\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME', 'VENT'. You can\noverride using the `.groups` argument.\n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 7678 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n`summarise()` has grouped output by 'SupergroupPhylum'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCode\n# Filter data to reduce noise and show sample type to vent ecosystem variability.\n# \n\n\n\n\nCode\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\", remove = FALSE) %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, SupergroupPhylum, Taxon) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  group_by(SupergroupPhylum, Taxon, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n  distinct(Taxon, SupergroupPhylum, SUM, SAMPLE, .keep_all = TRUE) %>% \n  group_by(SupergroupPhylum, Taxon) %>% \n  summarise(SAMPLE = list(SAMPLE)) %>% \n  ggplot(aes(x = SAMPLE)) +\n    geom_bar(color = \"black\", width = 0.7, aes(fill = SupergroupPhylum)) +\n    scale_x_upset(n_intersections = 25) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = \"\", y = \"Shared at taxonomic level\") +\n  theme_linedraw() +\n  theme(axis.text.y = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.text.x = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.title = element_text(color=\"black\", size=14, face = \"bold\"),\n        legend.text = element_text(color = \"black\", size = 12, face = \"bold\"),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\")) + \n  scale_fill_manual(values = all_taxa_color)\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 5926 rows [5, 6, 7,\n8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 28, 29, 30, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 3451 rows [1, 2,\n3, 4, 12, 13, 18, 19, 23, 27, 35, 44, 45, 46, 48, 49, 53, 54, 55, 56, ...].\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME', 'VENT',\n'SupergroupPhylum'. You can override using the `.groups` argument.\n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 7678 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n`summarise()` has grouped output by 'SupergroupPhylum', 'Taxon'. You can\noverride using the `.groups` argument.\n`summarise()` has grouped output by 'SupergroupPhylum'. You can override using\nthe `.groups` argument.\n\n\nWarning: Removed 300 rows containing non-finite values (stat_count).\n\n\n\n\n\nExample comparisons of shared taxonomic levels. Explanation: At ASV level, most ASVs are not shared across samples. So at other taxonomic categories, are these taxa also present or are there whole classes not present?\n\n\nCode\n# | fig-width: 10\n# | fig-height: 15\n# SupergroupPhylum, Supergroup, Phylum, Class, Order, Family, Genus, Species\n\n# make_upset_plot(asv_wtax_qc, SupergroupPhylum)\n\n# library(plotly)\n# ggplotly(tmp)\n# make_upset_plot(asv_wtax_qc, Class) + theme(legend.position = \"none\")\n# make_upset_plot(asv_wtax_qc, Supergroup) + theme(legend.position = \"none\")\n\n\nA better visualization may be a presence/absence across samples with a tile plot.\n\n\nCode\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n\nmake_tile_plot_pa <- function(df, taxa_level, level0){ \n  taxa_select <- enquo(taxa_level)\n  taxa_select_higher <- enquo(level0)\n  df %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, !!taxa_select_higher, !!taxa_select) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  group_by(SITE, !!taxa_select_higher, !!taxa_select, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n    add_column(PRESENT = 1) %>% \n    drop_na() %>% # remove NAs in taxa categories\n  ggplot(aes(x = SAMPLE, y = !!taxa_select)) +\n    geom_tile(color = \"white\", fill = \"black\", aes(fill = PRESENT)) +\n      facet_grid(SupergroupPhylum ~ SITE, space = \"free\", scales = \"free\") +\n  theme_linedraw() +\n  labs(x= \"\", y = \"\") +\n  theme(axis.text.y = element_text(color=\"black\", size=11),\n        axis.text.x = element_text(color=\"black\", size=11, angle = 90, vjust = 0.5, hjust = 1),\n        axis.title = element_text(color=\"black\", size=11),\n        legend.text = element_text(color = \"black\", size = 11),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\"))\n}\n\n\n\n\nCode\n# | fig-width: 10\n# | fig-height: 20\n# make_tile_plot_pa(asv_wtax_qc, \"Class\", \"SupergroupPhylum\")\n\n\n\nAbove plot addresses presence/absence of the families within major protistan supergroups across the Von Damm and Piccard vent, plume, and background samples."
  },
  {
    "objectID": "asv.html#richness-by-site",
    "href": "asv.html#richness-by-site",
    "title": "18S survey",
    "section": "Richness by site",
    "text": "Richness by site"
  },
  {
    "objectID": "asv.html#corncob",
    "href": "asv.html#corncob",
    "title": "18S survey",
    "section": "3.5 Corncob",
    "text": "3.5 Corncob\nCorncob analysis can be used to identify specific ASVs that may be enriched when we compare non-vent to vent samples.\nQuestions:\n\nFor vent vs. non-vent ASVs, what ASVs are enriched at Piccard?\nFor vent vs. non-vent ASVs, what ASVs are enriched at Von Damm?\nFor vent vs. non-vent ASVs, what ASVs are enriched at both sites?\n\n\n\nCode\n# | message: false\n# devtools::install_github(\"bryandmartin/corncob\")\nlibrary(corncob); library(phyloseq)\n\n\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose = TRUE)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nExplore data input for corncob\n\n\nCode\n# otu_table(physeq_mcr)[1:10, 1:3]\nsample_data(physeq_mcr)\n\n\n                                                         X           VENT\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021             2    LotsOShrimp\n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021             3    LotsOShrimp\n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021            9   MustardStand\n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021             10     ShrimpHole\n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021          4 Shrimpocalypse\n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                  11          Plume\n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                    12            X18\n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                    13            BSW\n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                   14           Rav2\n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                  8            BSW\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021               15          Plume\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021      16      ArrowLoop\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021    17    WhiteCastle\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021   18   MustardStand\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021           19           Rav2\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021     20     OldManTree\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021     21     ShrimpHole\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                  1            BSW\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                5          Plume\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021            22            X18\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021  6 Shrimpocalypse\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021     7    LotsOShrimp\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021           23           Rav2\n                                                           SITE SAMPLEID  DEPTH\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021            Piccard                \n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021            Piccard                \n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021           VonDamm                \n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021             VonDamm                \n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021         Piccard                \n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                  VonDamm                \n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                    VonDamm                \n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                    VonDamm                \n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                   VonDamm                \n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                 VonDamm            2400\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021               VonDamm            1979\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021      VonDamm            2309\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021    VonDamm            2307\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021   VonDamm            2374\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021           VonDamm          2389.6\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021     VonDamm          2375.8\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021     VonDamm            2376\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                 Piccard            4776\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021               Piccard            4944\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021            VonDamm            2377\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021 Piccard            4945\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021    Piccard            4967\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021           VonDamm          2388.9\n                                                        SAMPLETYPE\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021            Incubation\n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021            Incubation\n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021           Incubation\n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021             Incubation\n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021         Incubation\n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                  Incubation\n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                    Incubation\n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                    Incubation\n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                   Incubation\n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                 Background\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                    Plume\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021            Vent\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021          Vent\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021         Vent\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021                 Vent\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021           Vent\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021           Vent\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                 Background\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                    Plume\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021                  Vent\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021       Vent\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021          Vent\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021                 Vent\n                                                        SAMPLETYPE_BIN YEAR\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                  non-vent 2020\n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                  non-vent 2020\n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                 non-vent 2020\n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                   non-vent 2020\n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021               non-vent 2020\n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                        non-vent 2020\n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                          non-vent 2020\n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                          non-vent 2020\n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                         non-vent 2020\n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                       non-vent 2020\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                     non-vent 2020\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021                vent 2020\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021              vent 2020\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021             vent 2020\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021                     vent 2020\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021               vent 2020\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021               vent 2020\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                       non-vent 2020\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                     non-vent 2020\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021                      vent 2020\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021           vent 2020\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021              vent 2020\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021                     vent 2020\n                                                         TEMP      pH\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                         \n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                         \n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                        \n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                          \n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021                      \n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                               \n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                                 \n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                                 \n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                                \n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                 4.181 no data\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021               4.208        \n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021        137    5.69\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021      108    5.49\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021     108    5.63\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021              94    5.81\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021     121.6    5.69\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021        21    7.72\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                  4.46        \n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                4.46        \n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021               48    6.99\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021    85    5.11\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021       36    5.92\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021            98.2    5.81\n                                                        PercSeawater      Mg\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                    <NA>       0\n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                    <NA>       0\n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                   <NA>       0\n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                     <NA>       0\n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021                 <NA>       0\n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                          <NA>       0\n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                            <NA>       0\n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                            <NA>       0\n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                           <NA>       0\n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                          100 no data\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                       <NA>        \n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021              33.8    18.1\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021            16.6     8.9\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021           36.2    19.4\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021                   33.4      18\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021             25.6    13.7\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021             96.4    51.8\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                          100    53.7\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                       <NA>        \n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021                      52      28\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021         81.7    43.9\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021            94.9      51\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021                   33.4      18\n                                                             H2     H2S\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                           \n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                           \n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                          \n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                            \n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021                        \n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                                 \n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                                   \n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                                   \n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                                  \n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                 no data no data\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                              \n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021        11500    1.74\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021      14500    1.96\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021      9800    1.79\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021             10200    1.37\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021       11600    1.77\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021     5.52744 no data\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                                \n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                              \n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021            no data    2.11\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021       0        \n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021      22700        \n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021             10200    1.37\n                                                              CH4   ProkConc\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                                \n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                                \n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                               \n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                                 \n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021                             \n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                                      \n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                                        \n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                                        \n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                                       \n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                   no data 34705.9161\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                          16478.313\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021        1893.66  10369.792\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021      2251.92    no data\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021   1819.9608      56677\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021             1893.66    no data\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021      1985.784    no data\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021      218.0268    no data\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                            11860.187\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                           51429.13\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021             1310.208 111429.781\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021  27.53484  238585.68\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021     11.46432  53878.136\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021             1893.66    no data\n                                                        Sample_or_Control\n52_MCR_Piccard_expTf_LotsOShrimp_A_0_Jun2021                       Sample\n53_MCR_Piccard_expTf_LotsOShrimp_B_0_Jun2021                       Sample\n54_MCR_VonDamm_expTf_MustardStand_0_0_Jun2021                      Sample\n55_MCR_VonDamm_expTf_ShrimpHole_0_0_Jun2021                        Sample\n57_MCR_Piccard_expTf_Shrimpocalypse_0_0_Jun2021                    Sample\n58_MCR_VonDamm_expTf_Plume_0_0_Jun2021                             Sample\n59_MCR_VonDamm_expTf_X18_0_0_Jun2021                               Sample\n60_MCR_VonDamm_expTf_BSW_0_0_Jun2021                               Sample\n61_MCR_VonDamm_expTf_Rav2_0_0_Jun2021                              Sample\n63_MCR_VonDamm_CTD_BSW_CTD002_0_Jun2021                            Sample\n65_MCR_VonDamm_CTD_Plume_CTD003_0_Jun2021                          Sample\n66_MCR_VonDamm_HOG_ArrowLoop_J21243HOG18_5_Jun2021                 Sample\n67_MCR_VonDamm_HOG_WhiteCastle_J21235HOG12_5_Jun2021               Sample\n69_MCR_VonDamm_HOG_MustardStand_J21243HOG14_5_Jun2021              Sample\n70_MCR_VonDamm_HOG_Rav2_J21238HOG14_5_Jun2021                      Sample\n71_MCR_VonDamm_HOG_OldManTree_J21238HOG20_5_Jun2021                Sample\n72_MCR_VonDamm_HOG_ShrimpHole_J21244HOG18_0_Jun2021                Sample\n73_MCR_Piccard_CTD_BSW_CTD005_0_Jun2021                            Sample\n74_MCR_Piccard_CTD_Plume_CTD004_5_Jun2021                          Sample\n76_MCR_VonDamm_HOG_X18_J21235HOG20_0_Jun2021                       Sample\n77_MCR_Piccard_HOG_Shrimpocalypse_J21240HOG14_0_Jun2021            Sample\n78_MCR_Piccard_HOG_LotsOShrimp_J21241HOG14_0_Jun2021               Sample\n80_MCR_VonDamm_HOG_Rav2_J21244HOG20_0_Jun2021                      Sample\n\n\nCode\n# tax_table(physeq_mcr)[1:3, ]\n\n# Designated vent vs. non-vent\nunique(sample_data(physeq_mcr)$SAMPLETYPE_BIN)\n\n\n[1] \"non-vent\" \"vent\"    \n\n\nCode\n#Designats Piccard vs. vondamm.\nunique(sample_data(physeq_mcr)$SITE)\n\n\n[1] \"Piccard\" \"VonDamm\"\n\n\nStart by removing incubation samples for now. Subset to eukaryotes only and use phyloseq’s tax glom to summarize to Supergroup, Phylum, Class, Order, Genus, & species.\n\n\nCode\nhead(tax_table(physeq_mcr))\n\n\nTaxonomy Table:     [6 taxa by 8 taxonomic ranks]:\n                                 Domain       Supergroup      Phylum          \nd956d51a4affdc8b0aa5e62e2a6b7afb \"Eukaryota\"  \"Hacrobia\"      \"Haptophyta\"    \ne863c006ce3be44d8242bd420d609f4d \"Unassigned\" NA              NA              \n46c4292b9eed9c61220dc0ccbc67c7e5 \"Eukaryota\"  \"Alveolata\"     \"Dinoflagellata\"\n89fda95d0b4a246b7f4d6a495f557743 \"Eukaryota\"  \"Stramenopiles\" NA              \nfc62802399f5e14881ca6d455a4a030c \"Eukaryota\"  \"Alveolata\"     \"Ciliophora\"    \n3ba69ca477d8d932d534d8a85454f695 \"Eukaryota\"  \"Stramenopiles\" \"Ochrophyta\"    \n                                 Class              Order          \nd956d51a4affdc8b0aa5e62e2a6b7afb \"Prymnesiophyceae\" \"Prymnesiales\" \ne863c006ce3be44d8242bd420d609f4d NA                 NA             \n46c4292b9eed9c61220dc0ccbc67c7e5 \"Dinophyceae\"      \"Dinophyceae_X\"\n89fda95d0b4a246b7f4d6a495f557743 NA                 NA             \nfc62802399f5e14881ca6d455a4a030c \"Plagiopylea\"      \"Plagiopylea_X\"\n3ba69ca477d8d932d534d8a85454f695 NA                 NA             \n                                 Family           Genus            \nd956d51a4affdc8b0aa5e62e2a6b7afb \"Prymnesiaceae\"  \"Prymnesium\"     \ne863c006ce3be44d8242bd420d609f4d NA               NA               \n46c4292b9eed9c61220dc0ccbc67c7e5 \"Dinophyceae_XX\" \"Dinophyceae_XXX\"\n89fda95d0b4a246b7f4d6a495f557743 NA               NA               \nfc62802399f5e14881ca6d455a4a030c NA               NA               \n3ba69ca477d8d932d534d8a85454f695 NA               NA               \n                                 Species              \nd956d51a4affdc8b0aa5e62e2a6b7afb NA                   \ne863c006ce3be44d8242bd420d609f4d NA                   \n46c4292b9eed9c61220dc0ccbc67c7e5 \"Dinophyceae_XXX_sp.\"\n89fda95d0b4a246b7f4d6a495f557743 NA                   \nfc62802399f5e14881ca6d455a4a030c NA                   \n3ba69ca477d8d932d534d8a85454f695 NA                   \n\n\nCode\nmcr_super <- physeq_mcr %>%\n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>%\n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>%\n  tax_glom(\"Supergroup\")\n\nmcr_phy <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Phylum\")\n\nmcr_class <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Class\")\n\nmcr_order <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Order\")\n\nmcr_fam <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Family\")\n\nmcr_genera <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Genus\")\n\nmcr_spp <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Species\")\n\n# sample_data(mcr_order)\n\n\nDifferential tests in corncob\nThese tests work to see if taxa are differentially-abundant or variable across a given variable. In this study we have different taxonomic levels, are there more general or species-specific trends? We also have across sample types and site Below set up differential tests across sample types and site (and either or) at different taxonomic levels.\nFunction to perform specific differential tests across vent fields. Below use SITE_PICK parameter to choose between vent fields. Then use the df, to specify the taxonomic level.\n\n\nCode\ncorncob_mcr <- function(df_in){\n  # da_analysis_output <- differentialTest(formula = ~ SAMPLETYPE + SITE,\n  #                               phi.formula = ~ SAMPLETYPE+ SITE,\n  #                               formula_null = ~ 1,\n  #                               phi.formula_null = ~ SAMPLETYPE + SITE,\n  #                               test = \"Wald\", boot = FALSE,\n  #                               data = df_in,\n  #                               fdr_cutoff = 0.05)\n  ## SAMPLETYPE_BIN specifically compares vent to non-vent.\n  da_analysis_output <- differentialTest(formula = ~ SAMPLETYPE_BIN,\n                                phi.formula = ~ SAMPLETYPE_BIN,\n                                formula_null = ~ 1,\n                                phi.formula_null = ~ SAMPLETYPE_BIN,\n                                test = \"Wald\", boot = FALSE,\n                                data = df_in,\n                                fdr_cutoff = 0.05)\n  # da_analysis_output <- differentialTest(formula = ~ SITE,\n  #                               phi.formula = ~ SITE,\n  #                               formula_null = ~ 1,\n  #                               phi.formula_null = ~ SITE,\n  #                               test = \"Wald\", boot = FALSE,\n  #                               data = df_in,\n  #                               fdr_cutoff = 0.05)\n  #\n  list_ofsig <- as.character(da_analysis_output$significant_taxa)\n  total_number <- length(list_ofsig)[1]\n  #\n  sig_taxa_names <- as.data.frame(tax_table(df_in)) %>% \n    rownames_to_column(var = \"FEATURE\") %>% \n    filter(FEATURE %in% list_ofsig) %>% \n    rownames_to_column(var = \"NUMBER\")\n  #\n  for(var in 1:total_number){\n    out_0 <- data.frame(da_analysis_output$significant_models[[var]]$coefficients) %>% \n      add_column(NUMBER = as.character(var))\n    cat(\"extracted # \",var, \"\\n\")\n  if (!exists(\"extracted_coef\")){\n        extracted_coef <- out_0 # create the final count table\n    } else {\n        extracted_coef <- rbind(extracted_coef, out_0)\n    }\n    rm(out_0) # remove excess df\n  }\n  output_full <- extracted_coef %>% \n    rownames_to_column(var = \"variable\") %>%\n    filter(grepl(\"mu.\", variable)) %>% \n    left_join(sig_taxa_names, by = c(\"NUMBER\" = \"NUMBER\")) %>% \n      mutate(VARIABLE = str_remove(variable, \"[:digit:]+\")) %>% select(-variable) #%>% \n    # pivot_wider(names_from = VARIABLE, names_glue = \"{VARIABLE}_{.value}\", values_from = c(Estimate, Std..Error, t.value, Pr...t..))\n  rm(extracted_coef)\n  return(output_full)}\n\n\nDefine SITE_PICK\n\n\nCode\nmcr <- c(\"Piccard\", \"VonDamm\")\npicc <- c(\"Piccard\")\nvd <- c(\"VonDamm\")\n\n\nFunction to visualize output from corncob\n\n\nCode\nplot_corn <- function(cob_out, LEVEL, TITLE){\n  level <- enquo(LEVEL)\n  cob_out %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = level, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = level), shape = 21, color = \"black\") +\n  facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = TITLE)\n}\n\n\n\nSupergroup corncob\nWhat main supergroups are enriched at MCR?\n\n\nCode\n# # vd\n# analysis_super_vd <- corncob_mcr(mcr_super %>% \n#                                 phyloseq::subset_samples(SITE %in% vd))\n# \n# analysis_super_picc <- corncob_mcr(mcr_super %>% \n#                                 phyloseq::subset_samples(SITE %in% picc))\n\nanalysis_super_all <- corncob_mcr(mcr_super %>% \n                                phyloseq::subset_samples(SITE %in% mcr))\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \n\n\nCode\n# analysis_super_vd %>%\n#   filter(VARIABLE != \"mu.(Intercept)\") %>% \n#   ggplot(aes(y = Supergroup, x = Estimate)) +\n#     geom_vline(xintercept = 0, alpha = 0.2) +\n#     geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n#     geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n#   facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n#   theme(legend.position = element_blank(),\n#         axis.text.y = element_text(color = \"black\")) +\n#   theme_minimal() +\n#   labs(x = \"Coefficient\", y = \"\", title = \"VD supergroup\")\n\n# analysis_super_picc %>%\n#   filter(VARIABLE != \"mu.(Intercept)\") %>% \n#   ggplot(aes(y = Supergroup, x = Estimate)) +\n#     geom_vline(xintercept = 0, alpha = 0.2) +\n#     geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n#     geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n#   facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n#   theme(legend.position = element_blank(),\n#         axis.text.y = element_text(color = \"black\")) +\n#   theme_minimal() +\n#   labs(x = \"Coefficient\", y = \"\", title = \"piccard supergroup\")\n\n\nPlot supergroup enrichment\n\n\nCode\nanalysis_super_all %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Supergroup, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"MCR supergroup\")\n\n\n\n\n\n\n\nPhylum corncob analysis\n\n\nCode\nanalysis_phylum <- corncob_mcr(mcr_phy)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \n\n\n\n\nCode\nanalysis_phylum %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Phylum, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Phylum), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"MCR Phylum\")\n\n\n\n\n\n\n\nClass corncob analysis\n\n\nCode\nanalysis_class <- corncob_mcr(mcr_class %>%\n                                phyloseq::subset_samples(SITE %in% mcr))\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \n\n\n\n\nCode\n# head(analysis_class)\n# unique(analysis_class$VARIABLE)\nanalysis_class %>%\n  unite(Class, c(Phylum, Class), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Class, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Class level test for differential abundance\")\n\n\n\n\n\n\nClass level looks pretty good. Keep this one. Looks at major taxonomic groups that were more enriched at vents? Work on the language here. Repeat vent vs. plume at ASV level. ID some of the core ASVs that can help elaborate on what we see above (table in supplementary)\n\n\nInterpretation :\n\n\n\nOrder corncob\n\n\nCode\nanalysis_order <- corncob_mcr(mcr_order)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \nextracted #  17 \nextracted #  18 \nextracted #  19 \nextracted #  20 \nextracted #  21 \nextracted #  22 \nextracted #  23 \nextracted #  24 \nextracted #  25 \nextracted #  26 \n\n\n\n\nCode\n# head(analysis_class)\n# unique(analysis_class$VARIABLE)\nanalysis_order %>%\n  unite(Order, c(Phylum, Class, Order), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Order, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Order level test for differential abundance\")\n\n\n\n\n\nCode\n# ?geom_errorbar\n\n\n\n\nFamily corncob\nPlan to pairing with tree below\n\n\nCode\nanalysis_fam <- corncob_mcr(mcr_fam)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \nextracted #  17 \nextracted #  18 \nextracted #  19 \nextracted #  20 \nextracted #  21 \nextracted #  22 \nextracted #  23 \nextracted #  24 \nextracted #  25 \nextracted #  26 \nextracted #  27 \nextracted #  28 \nextracted #  29 \nextracted #  30 \nextracted #  31 \nextracted #  32 \nextracted #  33 \nextracted #  34 \n\n\n\n\nCode\nanalysis_fam %>%\n  unite(Family, c(Class, Order, Family), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Family, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup + Phylum ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Family level test for differential abundance\")\n\n\n\n\n\n\n\nGenus corncob\nPlan to pairing with tree below\n\n\nCode\nanalysis_genus <- corncob_mcr(mcr_genera)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \n\n\n\n\nCode\nanalysis_genus %>%\n  unite(Genus, c(Phylum, Genus), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Genus, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Genus level test for differential abundance\")\n\n\n\n\n\n\n\nSpecies corncob\n\n\nCode\nanalysis_spp <- corncob_mcr(mcr_spp)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \n\n\n\n\nCode\nanalysis_spp %>%\n  unite(Species, c(Genus, Species), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Species, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup + Order ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Species level test for differential abundance\")\n\n\n\n\n\nCorncob take homes:"
  },
  {
    "objectID": "grazing.html#plot-temperature-by-eukprok",
    "href": "grazing.html#plot-temperature-by-eukprok",
    "title": "Protistan grazing analysis",
    "section": "13.1 Plot temperature by euk:prok",
    "text": "13.1 Plot temperature by euk:prok\nPlot temperature by euk and prok per ml individually too.\nBacterial abundance typically increases with temperature (White et al. 1991) - which could ultimately increase bacterial ingestion rate and total protist cells. But at this type of niche environment, I hypothesize that there is a trend but threshold of not detected grazing under certain conditions.\nIf euk per ml numbers are high, but we see lower grazing rates, could this be competition? Curds and Cockburn 1968. Additionally with temperature… in Vaque et al GRF (specific grazing rates of flagellates) increased with temperature, but overall grazing rate reached a plateau at 18C. Does this mean that temperature will be an important factor depending on the community diversity?"
  },
  {
    "objectID": "grazing.html#plot-temperature-by-grazing-rate",
    "href": "grazing.html#plot-temperature-by-grazing-rate",
    "title": "Protistan grazing analysis",
    "section": "13.2 Plot temperature by grazing rate",
    "text": "13.2 Plot temperature by grazing rate\n\n\nCode\nnames(allvent_data)\n\n\n [1] \"FIELD\"                 \"NAME\"                  \"SAMPLE\"               \n [4] \"EXP\"                   \"PROK_ml\"               \"EUK_ml\"               \n [7] \"GRAZING_EFFECT_hr\"     \"GRAZING_EFFECT_hr_min\" \"GRAZING_EFFECT_hr_max\"\n[10] \"BAC_TURNOVER_PERC\"     \"ugC_L_perday\"          \"Highest.Temp\"         \n[13] \"pH\"                    \"Mg\"                    \"H2S\"                  \n[16] \"H2\"                    \"CH4\"                   \"SAMPLE_TYPE\"          \n[19] \"PROK_EUK_RATIO\"       \n\n\nCode\n# two_params(allvent_data, ugC_L_perday, `Highest.Temp`, \"ugC_L_perday\", \"Temperature (max)\")\n\ntwo_params(allvent_data, ugC_L_perday, EUK_ml, \"ugC_L_perday\", \"Euk cells per ml\") + scale_y_log10()\n\n\nWarning: Removed 5 rows containing missing values (geom_point).\n\n\n\n\n\nCode\n# two_params(allvent_data, EUK_ml, PROK_ml, \"Euk\", \"Prok\") + scale_y_log10() + scale_x_log10()"
  },
  {
    "objectID": "grazing.html#plot-euk-per-ml-with-temperature-and-grazing-rate",
    "href": "grazing.html#plot-euk-per-ml-with-temperature-and-grazing-rate",
    "title": "Protistan grazing analysis",
    "section": "15.1 Plot euk per ml with temperature and grazing rate",
    "text": "15.1 Plot euk per ml with temperature and grazing rate"
  },
  {
    "objectID": "asv.html#taxonomic-breakdown",
    "href": "asv.html#taxonomic-breakdown",
    "title": "18S survey",
    "section": "3.3 Taxonomic breakdown",
    "text": "3.3 Taxonomic breakdown\nTry to pair with dendrogram\n\n\nCode\nout_labels <- as.data.frame(mcr_dendro$labels)\nmcr_sample_order <- as.character(out_labels$label)\n\n\n\n\nCode\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n# head(asv_wtax_qc)\n\nbubble <- asv_wtax_qc %>% \n    filter(value > 0) %>% \n  # Avg seq count by ASV across replicates\n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE, Taxon, FeatureID) %>% \n  summarise(avg_seq = mean(value)) %>% \n  # Separate and curate taxa information\n  # filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% \n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE) %>% \n    mutate(TOTAL_SEQ = sum(avg_seq)) %>% \n  ungroup() %>% \n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE, SUPERGROUP) %>% \n  summarise(SUM = sum(avg_seq),\n            REL_ABUN = SUM/TOTAL_SEQ) %>% \n  mutate(SAMPLENAME_ORDER = factor(SAMPLENAME, levels = mcr_sample_order)) %>% \n  ggplot(aes(x = SAMPLENAME_ORDER, y = SUPERGROUP, size = REL_ABUN)) +\n    geom_point(shape = 21, color = \"white\", aes(size = REL_ABUN, fill = SUPERGROUP, alpha = 0.4)) +\n    scale_size_continuous(range = c(2,14)) +\n  # facet_grid(. ~ SITE, scales = \"free\", space = \"free\") +\n  theme_minimal() +coord_flip() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", angle = 45, hjust = 1, vjust = 1))\n\n\n`summarise()` has grouped output by 'SAMPLENAME', 'SITE', 'VENT', 'SAMPLETYPE',\n'Taxon'. You can override using the `.groups` argument.\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 10924 rows [3, 10,\n11, 12, 13, 14, 18, 19, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 35, 38, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 6487 rows [1, 2,\n4, 5, 6, 7, 8, 9, 15, 16, 17, 22, 24, 25, 26, 29, 36, 37, 48, 49, ...].\n\n\n`summarise()` has grouped output by 'SAMPLENAME', 'SITE', 'VENT', 'SAMPLETYPE',\n'SUPERGROUP'. You can override using the `.groups` argument.\n\n\nCode\nbubble\n\n\n\n\n\n\nDendrogram with bubble plot\n\n\nCode\n# mcr_dendro_plot + bubble + patchwork::plot_layout(ncol = 2) + patchwork::plot_annotation(tag_levels = \"a\")"
  },
  {
    "objectID": "asv.html#clr-change",
    "href": "asv.html#clr-change",
    "title": "18S survey",
    "section": "4.1 CLR change",
    "text": "4.1 CLR change\n\n\nCode\n# head(asv_wtax_qc)\nnumeric_tmp <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(FeatureID, SAMPLENAME, Taxon) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  # unite(TAX, Taxon, FeatureID, sep = \"__\") %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME'. You can override\nusing the `.groups` argument.\n\n\nCode\nlogratio_mcr <- data.frame(t(compositions::clr(t(numeric_tmp))))\n## From above \n# head(logratio_mcr)"
  },
  {
    "objectID": "grazing.html#grazing-rate-vs.-cells-ml",
    "href": "grazing.html#grazing-rate-vs.-cells-ml",
    "title": "Protistan grazing analysis",
    "section": "10.2 Grazing rate vs. cells ml",
    "text": "10.2 Grazing rate vs. cells ml\n\n\nCode\nenv_params <- read.delim(file = \"input-data/table_wenv.txt\", sep = \" \")\nnames(env_params)\n\n\n [1] \"SEQ_SAMPLE\"                   \"VENT\"                        \n [3] \"COORDINATES\"                  \"SAMPLETYPE\"                  \n [5] \"DEPTH\"                        \"YEAR\"                        \n [7] \"TEMP\"                         \"pH\"                          \n [9] \"Perc\"                         \"Mg\"                          \n[11] \"H2.\"                          \"H2S\"                         \n[13] \"CH4\"                          \"ProkConc\"                    \n[15] \"Sample_actual\"                \"Type\"                        \n[17] \"FIELD\"                        \"ref_num\"                     \n[19] \"SITE\"                         \"Sample_or_Control\"           \n[21] \"SAMPLEID\"                     \"NAME\"                        \n[23] \"EXP\"                          \"RATE_min\"                    \n[25] \"FLP_ml\"                       \"PROK_ml\"                     \n[27] \"PROK_sem\"                     \"EUK_ml\"                      \n[29] \"EUK_sem\"                      \"TimePoints\"                  \n[31] \"EXP_REPS\"                     \"EXP_VOL\"                     \n[33] \"CTRL_REPS\"                    \"CTRL_VOL\"                    \n[35] \"RATE_hr\"                      \"RATE_day\"                    \n[37] \"FLP_L\"                        \"CLEARANCE_RATE_ml\"           \n[39] \"CLEARANCE_RATE_nL\"            \"SPEC_GRAZE_RATE_hr\"          \n[41] \"GRAZE_RATE_DAY\"               \"GRAZING_EFFECT_hr\"           \n[43] \"GRAZING_EFFECT_hr_min\"        \"GRAZING_EFFECT_hr_max\"       \n[45] \"GRAZING_EFFECT_day\"           \"BAC_TURNOVER_PERC\"           \n[47] \"BAC_TURNOVER_PERC_min\"        \"BAC_TURNOVER_PERC_max\"       \n[49] \"euk_C_ug_Hu\"                  \"euk_C_ug_lit\"                \n[51] \"bac_C_ug\"                     \"bac_C_ug_2\"                  \n[53] \"RATE_ugCbac_pergrazer_perday\" \"SPEC_INGESTION_RATE\"         \n[55] \"SPEC_INGESTION_RATE_lit\"      \"Prok_biomass\"                \n[57] \"Euk_biomass_Hu\"               \"Euk_biomass_lit\"             \n[59] \"Prok_biomass_L\"               \"Euk_biomass_Hu_L\"            \n[61] \"Euk_biomass_lit_L\"            \"Prok_biomass_sem\"            \n[63] \"Euk_biomass_Hu_sem\"           \"Euk_biomass_lit_sem\"         \n[65] \"Prok_biomass_sem_L\"           \"Euk_biomass_Hu_sem_L\"        \n[67] \"Euk_biomass_lit_sem_L\"        \"detected\"                    \n[69] \"type\"                         \"GRAZE_RATE\"                  \n[71] \"type_site\"                    \"fgC_cell\"                    \n[73] \"fgC_ml_perday\"                \"ugC_L_perday\"                \n[75] \"lower_mcnichol\"               \"upper_mcnichol\"              \n\n\nCode\nplot_metadata <- env_params %>% \n  filter(SAMPLETYPE != \"Incubation\") %>%\n  filter(VENT != \"Quakeplume\") %>% \n  select(SITE, VENT, SAMPLETYPE, TEMP, DEPTH, starts_with(\"PROK_\"), starts_with(\"EUK_\"), starts_with(\"GRAZING_EFFECT_hr\"), pH, Mg, H2., CH4, H2S)\n  # pivot_wider(names_from = \"name\", values_from = \"value\", values_fill = NA)\nhead(plot_metadata)\n\n\n     SITE           VENT SAMPLETYPE  TEMP DEPTH   PROK_ml  PROK_sem\n1 Piccard            BSW Background  4.46  4776        NA        NA\n2 Piccard          Plume      Plume  4.46  4944  51429.13  4618.126\n3 Piccard    LotsOShrimp       Vent 19.00  4967  53878.14 13727.191\n4 Piccard Shrimpocalypse       Vent 85.00  4945 238585.68 65792.588\n5 Piccard Shrimpocalypse       Vent 85.00  4945 238585.68 65792.588\n6 Piccard    LotsOShrimp       Vent 36.00  4967  53878.14 13727.191\n  Prok_biomass Prok_biomass_L Prok_biomass_sem Prok_biomass_sem_L    EUK_ml\n1           NA             NA               NA                 NA        NA\n2  0.004422905       4.422905     0.0003971588          0.3971588  79.30115\n3  0.004633520       4.633520     0.0011805385          1.1805385 230.90630\n4  0.020518368      20.518368     0.0056581625          5.6581625 454.81543\n5  0.020518368      20.518368     0.0056581625          5.6581625 454.81543\n6  0.004633520       4.633520     0.0011805385          1.1805385 230.90630\n   EUK_sem  euk_C_ug_Hu euk_C_ug_lit Euk_biomass_Hu Euk_biomass_lit\n1       NA           NA           NA             NA              NA\n2 16.81908 0.0002269636   0.01147298     0.01799847       0.9098208\n3       NA 0.0002269636   0.01147298     0.05240732       2.6491842\n4       NA 0.0002269636   0.01147298     0.10322653       5.2180901\n5 69.97160 0.0002269636   0.01147298     0.10322653       5.2180901\n6       NA 0.0002269636   0.01147298     0.05240732       2.6491842\n  Euk_biomass_Hu_L Euk_biomass_lit_L Euk_biomass_Hu_sem Euk_biomass_lit_sem\n1               NA                NA                 NA                  NA\n2         17.99847          909.8208        0.003817318           0.1929650\n3         52.40732         2649.1842                 NA                  NA\n4        103.22653         5218.0901                 NA                  NA\n5        103.22653         5218.0901        0.015881005           0.8027831\n6         52.40732         2649.1842                 NA                  NA\n  Euk_biomass_Hu_sem_L Euk_biomass_lit_sem_L GRAZING_EFFECT_hr\n1                   NA                    NA                NA\n2             3.817318              192.9650           44.2593\n3                   NA                    NA            0.0000\n4                   NA                    NA         6006.7432\n5            15.881005              802.7831        20427.1780\n6                   NA                    NA            0.0000\n  GRAZING_EFFECT_hr_min GRAZING_EFFECT_hr_max   pH   Mg      H2.      CH4 H2S\n1                    NA                    NA   NA 53.7       NA       NA  NA\n2              34.87229               53.6463   NA   NA       NA       NA  NA\n3                    NA                    NA 6.32 53.5     1.33 11.87376  NA\n4                    NA                    NA 5.11 43.9     0.00 27.53484  NA\n5           17284.53525            23569.8208 5.11 43.9     0.00 27.53484  NA\n6                    NA                    NA 5.92 51.0 22700.00 11.46432  NA\n\n\nCompare microbial biomass, concentration, grazing and temperature across all sites.\n\n\nCode\neuk_temp <- plot_metadata %>% \n    mutate(TEMP = as.numeric(TEMP)) %>% \n  ggplot(aes(x = GRAZING_EFFECT_hr, y = EUK_ml, fill = TEMP)) +\n    # geom_errorbar(aes(ymin = (log10(EUK_ml)-(EUK_sem)),ymax = (log10(EUK_ml)+(EUK_sem)))) +\n    #   geom_errorbarh(aes(xmin = log10(GRAZING_EFFECT_hr_min),xmax = log10(GRAZING_EFFECT_hr_max))) +\n  geom_errorbar(aes(ymin = ((EUK_ml)-(EUK_sem)),ymax = ((EUK_ml)+(EUK_sem)))) +\n      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max))) +\n  geom_point(aes(shape = SITE), color = \"black\", size = 4) +\n  scale_y_log10() + scale_x_log10() +\n  scale_shape_manual(values = c(21, 23)) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction=2, na.value = \"grey50\") +\n  theme_bw() +\n  theme(rect = element_rect(fill = \"transparent\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\", color = NA))  +\n  labs(y = \"Euk cells per ml\", x = \"Grazing rate per hr\")\n\neuk_temp\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nCode\nprok_temp <- plot_metadata %>% \n    mutate(TEMP = as.numeric(TEMP)) %>% \n  ggplot(aes(x = GRAZING_EFFECT_hr, y = PROK_ml, fill = TEMP)) +\n    # geom_errorbar(aes(ymin = (log10(EUK_ml)-(EUK_sem)),ymax = (log10(EUK_ml)+(EUK_sem)))) +\n    #   geom_errorbarh(aes(xmin = log10(GRAZING_EFFECT_hr_min),xmax = log10(GRAZING_EFFECT_hr_max))) +\n  geom_errorbar(aes(ymin = ((PROK_ml)-(PROK_sem)),ymax = ((PROK_ml)+(PROK_sem)))) +\n      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max))) +\n  geom_point(aes(shape = SITE), color = \"black\", size = 4) +\n  scale_y_log10() + scale_x_log10() +\n  scale_shape_manual(values = c(21, 23)) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction=2, na.value = \"grey50\") +\n  theme_bw() +\n  theme(rect = element_rect(fill = \"transparent\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\", color = NA))  +\n  labs(y = \"Microial prey cells per ml\", x = \"Grazing rate per hr\")\n\nprok_temp\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nCode\n(euk_temp + labs(x = \"\") + theme(legend.position = \"none\")) + prok_temp + patchwork::plot_layout(ncol = 1) + patchwork::plot_annotation(tag_levels = \"a\")\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\n\n\n\nPlot other environmental parameters\n\n\nCode\n# head(plot_metadata)\nplot_supp <- function(PARAMETER){\n  plot_metadata %>% \n  pivot_longer(cols = c(pH, Mg, H2., CH4, H2S), names_to = \"ENV\", values_to = \"ENV_VALUE\") %>% \n    mutate(ENV_NUM = as.numeric(ENV_VALUE)) %>% \n    filter(ENV == PARAMETER) %>% \n  ggplot(aes(x = GRAZING_EFFECT_hr, y = EUK_ml, fill = ENV_VALUE)) +\n  geom_errorbar(aes(ymin = ((EUK_ml)-(EUK_sem)),ymax = ((EUK_ml)+(EUK_sem)))) +\n      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max))) +\n  geom_point(aes(shape = SITE), color = \"black\", size = 4) +\n  scale_y_log10() + scale_x_log10() +\n  scale_shape_manual(values = c(21, 23)) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction=2, na.value = \"grey50\") +\n  theme_bw() +\n  theme(rect = element_rect(fill = \"transparent\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\", color = NA))  +\n  labs(y = \"Euk cells per ml\", x = \"Grazing rate per hr\",\n       title = PARAMETER)\n  }\n\n\n\n\nCode\n# pH, Mg, H2., CH4, H2S\nplot_supp(\"pH\") +\n  plot_supp(\"Mg\") +\n  plot_supp(\"H2.\") +\n  plot_supp(\"CH4\") +\n  plot_supp(\"H2S\") +\n  patchwork::plot_layout(ncol = 2) + patchwork::plot_annotation(tag_levels = \"a\") \n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point)."
  },
  {
    "objectID": "grazing.html#plot-temperature-by-eukprok-and-then-euk-and-prok",
    "href": "grazing.html#plot-temperature-by-eukprok-and-then-euk-and-prok",
    "title": "Protistan grazing analysis",
    "section": "13.1 Plot temperature by euk:prok and then euk and prok",
    "text": "13.1 Plot temperature by euk:prok and then euk and prok\n\n\nCode\ntwo_params(allvent_data, `PROK_EUK_RATIO`, `Highest.Temp`, \"Prok:Euk ratio\", \"Temperature (max)\")\n\n\nWarning: Removed 5 rows containing missing values (geom_point)."
  },
  {
    "objectID": "sequence-qc.html",
    "href": "sequence-qc.html",
    "title": "Sequence QC",
    "section": "",
    "text": "Set up R environment\n\n\nCode\nlibrary(tidyverse); library(phyloseq); library(ape)\n\n\nImport previously sequenced and analyzed tag-sequence data. See https://shu251.github.io/microeuk-amplicon-survey/ for additional information."
  },
  {
    "objectID": "sequence-qc.html#sequence-stats",
    "href": "sequence-qc.html#sequence-stats",
    "title": "Sequence QC",
    "section": "2.1 Sequence stats",
    "text": "2.1 Sequence stats\nTotal ASVs and sequences for each sample.\n\n\nCode\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID)) %>% \n  pivot_longer(cols = ends_with(\"_stats\")) %>% \n  ggplot(aes(x = SAMPLE, y = value)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  # geom_hline(yintercept=10000, linetype=\"dashed\", color = \"green\") +\n  facet_grid(. ~ name, scales = \"free\") +\n  theme_linedraw()\n\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCreate supplementary table with ASV and sequence stats.\n\n\nCode\ntable_supp_seqstats <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID))\n\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\nCode\n# write.csv(table_supp_seqstats, file = \"output-data/supp-table-sequencestats.csv\")"
  }
]