[
  {
    "objectID": "asv.html",
    "href": "asv.html",
    "title": "18S survey",
    "section": "",
    "text": "Set up R environment\n\nlibrary(tidyverse); library(phyloseq); library(ape)\n\nImport previously sequenced and analyzed tag-sequence data. See https://shu251.github.io/microeuk-amplicon-survey/ for additional information.\nImport metadata\n\nmetadata <- read.csv(\"../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/data-input/samplelist-metadata.csv\")\n\n# head(metadata)\n# unique(metadata$Sample_actual)\nmcr <- c(\"VonDamm\", \"Piccard\")\nmetadata_formatted <- metadata %>%\n  filter(SITE %in% mcr) %>%\n  mutate_all(as.character) %>%\n  filter(Sample_or_Control == \"Sample\") %>%\n  filter(!(SAMPLETYPE == \"Microcolonizer\")) %>%\n  select(SAMPLE, VENT, SITE, SAMPLEID, DEPTH, SAMPLETYPE, YEAR, TEMP = starts_with(\"TEMP\"), pH, PercSeawater = starts_with(\"Perc\"), Mg = starts_with(\"Mg\"), H2 = starts_with(\"H2.\"), H2S = starts_with(\"H2S\"), CH4 = starts_with(\"CH4\"), ProkConc, Sample_or_Control)"
  },
  {
    "objectID": "asv.html#import-decontam-results-to-qc-asv-table",
    "href": "asv.html#import-decontam-results-to-qc-asv-table",
    "title": "18S survey",
    "section": "Import decontam results to QC ASV table",
    "text": "Import decontam results to QC ASV table\n\nload(\"../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/seq-analysis/contam-asvs.RData\", verbose= TRUE)\n\nLoading objects:\n  list_of_contam_asvs\n\nclass(list_of_contam_asvs)\n\n[1] \"character\"\n\n\n\nasv_wtax_qc <- merged_asv %>%\n  select(FeatureID = '#OTU ID', everything()) %>%\n  filter(!(FeatureID %in% list_of_contam_asvs)) %>%\n  # In wide format, subsample 1000 random ASVs\n  # sample_n(1000, replace = FALSE) %>%\n  pivot_longer(cols = !FeatureID,\n               names_to = \"SAMPLE\", values_to = \"value\") %>%\n  filter(grepl(\"_MCR_\", SAMPLE)) %>%\n  left_join(merged_tax, by = c(\"FeatureID\" = \"Feature ID\")) %>%\n  left_join(filter(metadata_formatted, grepl(\"_MCR_\", SAMPLE))) %>%\n  unite(SAMPLENAME, SITE, SAMPLETYPE, YEAR, VENT, SAMPLEID, sep = \" \", remove = FALSE)\n# dim(asv_wtax_qc)\n# length(unique(asv_wtax_qc$FeatureID))\n\n\ntax_matrix <- asv_wtax_qc %>%\n  select(FeatureID, Taxon) %>%\n  distinct() %>%\n  separate(Taxon, c(\"Domain\", \"Supergroup\",\n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(tax_matrix)\nasv_matrix <- asv_wtax_qc %>%\n  select(FeatureID, SAMPLE, value) %>%\n  pivot_wider(names_from = SAMPLE, values_from = value, values_fill = 0) %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(asv_matrix)\n# dim(asv_matrix); dim(tax_matrix)\n\n# Align row names for each matrix\nrownames(tax_matrix) <- row.names(asv_matrix)\n# dim(asv_matrix)\nmcr_samples <- as.character(colnames(asv_matrix))\n\n# Set rownames of metadata table to SAMPLE information\nmetadata_mcr <- filter(metadata_formatted, SAMPLE %in% mcr_samples) %>%\n  rownames_to_column(var = \"X\") %>%\n  column_to_rownames(var = \"SAMPLE\")\n# dim(metadata_mcr)"
  },
  {
    "objectID": "asv.html#import-as-phyloseq-objects",
    "href": "asv.html#import-as-phyloseq-objects",
    "title": "18S survey",
    "section": "Import as phyloseq objects",
    "text": "Import as phyloseq objects\n\n# Import asv and tax matrices\nASV = otu_table(asv_matrix, taxa_are_rows = TRUE)\nTAX = tax_table(tax_matrix)\nphylo_obj <- phyloseq(ASV, TAX)\n# phylo_obj\n# Import metadata as sample data in phyloseq\nsamplenames <- sample_data(metadata_mcr)\n# samplenames\n# join as phyloseq object\nphyseq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# colnames(ASV)\n# TAX\n## Check\nphyseq_wnames\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 17878 taxa and 23 samples ]\nsample_data() Sample Data:       [ 23 samples by 16 sample variables ]\ntax_table()   Taxonomy Table:    [ 17878 taxa by 8 taxonomic ranks ]\n\nntaxa(physeq_wnames) #17878\n\n[1] 17878\n\nnsamples(physeq_wnames) #23\n\n[1] 23\n\n# # physeq_wnames # run with sample, 1000 tax.\n# # head(taxa_names(physeq_wnames))\nmcr_tree <- rtree(ntaxa(physeq_wnames), rooted = TRUE, tip.label = taxa_names(physeq_wnames))\n# class(mcr_tree)\n# ?merge_phyloseq\nphyseq_mcr <- merge_phyloseq(physeq_wnames, mcr_tree)"
  },
  {
    "objectID": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "href": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "title": "18S survey",
    "section": "Save output ASV tables for downstream analyses",
    "text": "Save output ASV tables for downstream analyses\n\n# phylo_obj <- phyloseq(ASV, TAX)\n# samplenames <- sample_data(metadata_formatted)\n# physeq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# dim(asv_wtax_qc)\n# physeq_wnames\n\n# save(phylo_obj, samplenames, physeq_wnames, metadata_mcr, asv_wtax_qc, TAX, tax_matrix, physeq_mcr, file = \"input-data/MCR-amplicon-data.RData\")"
  },
  {
    "objectID": "grazing.html",
    "href": "grazing.html",
    "title": "Protistan grazing analysis",
    "section": "",
    "text": "Code below details how to import cell count (FLP count) information from Mid-Cayman Rise protistan grazing incubations and estimate grazing rate and cell biomass.\n\n\n\n\nCode\nlibrary(tidyverse); library(cowplot); library(broom)\n\n\n\n\n\nImport eukaryotic cell count data from grazing experiments. In this section, we will calculate cells per ml from raw counts (Field of view, etc.) and use to estimate protist cell concentration. These will be used below in grazing experiment calculations.\n\n\nCode\ncounts <- read.delim(\"input-data/euk-counts-compiled.txt\", \n                     blank.lines.skip = FALSE,\n                     na.strings = c(\"\", \"NA\"),\n                     stringsAsFactors = FALSE) # Import\ncounts[is.na(counts)] <- 0 # Change blanks to zeroes\n\n\nRaw data table collected during microscopy count process. Below code reviews the structure of this raw data and updates column headers to be more ‘R’ friendly.\n\n\nCode\n# head(counts)\ncolnames(counts) <- c(\"DATE\", \"SAMPLE\", \"EXPID\", \"VOL\", \"MAG\", \"FOV\", \"nanoNoFLP\", \"microNoFLP\", \"nanoFLP\", \"microFLP\", \"NOTES\", \"DateCompiled\"); colnames(counts)\n\n\n [1] \"DATE\"         \"SAMPLE\"       \"EXPID\"        \"VOL\"          \"MAG\"         \n [6] \"FOV\"          \"nanoNoFLP\"    \"microNoFLP\"   \"nanoFLP\"      \"microFLP\"    \n[11] \"NOTES\"        \"DateCompiled\"\n\n\n\nTo count occurrence and number of FLP ingested by eukaryotic cells, the number of FLPs ingested was tallied and comma separated for multiple eukaryotic cells with FLP. These values need to separated and counted as 1 eukaryotic cell each, but retain the number of FLP per cell.\n\nParse raw microscopy count data.\n\n\nCode\ncounts_occur <- counts %>%\n  # remove incomplete\n  filter(NOTES != \"Not countable\") %>% \n  # Count number of euk cells observed with FLPs (ex. if \"1,2\", 'occur' will = 2)\n  mutate(nanoFLP_occur = as.numeric(str_count(nanoFLP, \"[1-9]\\\\d*\")), \n         microFLP_occur = as.numeric(str_count(microFLP, \"[1-9]\\\\d*\")),\n         # Add number of euk cells with FLPs to those without for total number of euk cells\n         nanoTOTAL = as.numeric(nanoNoFLP) + nanoFLP_occur, \n         microTOTAL = as.numeric(microNoFLP) + microFLP_occur,\n         euksTOTAL = nanoTOTAL + microTOTAL) %>%\n      data.frame"
  },
  {
    "objectID": "grazing.html#running-code",
    "href": "grazing.html#running-code",
    "title": "Protistan grazing analysis",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Microbial eukaryotic ecology and food web contributions at two Mid-Cayman Rise deep-sea vent fields",
    "section": "",
    "text": "For access to in prep data, please contact sarah.hu[at]whoi.edu"
  },
  {
    "objectID": "grazing.html#calculate-cells-per-ml-euk",
    "href": "grazing.html#calculate-cells-per-ml-euk",
    "title": "Protistan grazing analysis",
    "section": "Calculate cells per ml (euk)",
    "text": "Calculate cells per ml (euk)\nInput data are the raw microscopy counts by FOV. Code below calculations cells/ml based on these values. Additionaly, variance and standard deviation are also calculated. Eukaryotic cells were also classified by size, where micro equates to >20um and nano is <20um. All counts were done at 100x magnification, confirm this: unique(counts_occur$MAG).\nCalculate cell concentration (cells/ml).\n\n\nCode\ncounts_cellsml_all <- counts_occur %>%\n  group_by(SAMPLE, EXPID, VOL) %>% #Calculate averages by sample\n  summarise(totalFOV = n(), # Count total FOV counted\n            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV\n            nanoVar = var(nanoTOTAL), #Variance\n            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation\n            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks\n            microVar = var(microTOTAL), \n            microSd = (2*(sqrt(microVar))), \n            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count\n            euksVar = var(euksTOTAL), \n            euksSd = (2*(sqrt(euksVar))), \n            .groups = 'drop_last') %>%\n  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab scope, it is 283.385):\n  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         microCONC = ((microAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         eukCONC = ((euksAvg * 283.385)/(VOL * 0.01 * 0.9))\n         ) %>%\n  # left_join(expmeta) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nReplicates belong to the same experiment for either Bag or IGT incubation. Below, modify these names and label new column with bag or igt. And create an average across replicates.\n\nAverage cells/ml across replicates, pivot to long format\n\n\nCode\ncounts_cellsml_avg <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, nanoCONC, microCONC, eukCONC) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  select(-Replicate) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  group_by(Site, Name, TimePoint, EXP_TYPE, IGT_REP, VARIABLE) %>%\n  # Calculate mean, variance, SD, min, and max\n  summarise(MEAN = mean(CONCENTRATION),\n            VAR = var(CONCENTRATION),\n            SD = sd(CONCENTRATION),\n            SEM =(sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            MIN = min(CONCENTRATION),\n            MAX = max(CONCENTRATION),\n            .groups = 'drop_last') %>%\n  data.frame\n\n\nNOTES on calculations:\nVAR = takes the sum of the squares of each value’s deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one.\nSD = standard deviation of all values\nSEM = standard deviation of sampling distribution; standard deviation divided by the square root of the sample size.\nSave output file\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, file = \"input-data/raw-avg-eukcount.RData\")\n\n\nReformat to parse experiment information type\n\n\nCode\n# Convert to long format and add column that reports IGT vs bag experiment\nplot_euk_conc <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, ends_with(\"CONC\")) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  data.frame\n\n\nFactor cell count data\n\n\nCode\nunique(plot_euk_conc$Name)\n\n\n[1] \"LotsOShrimp\"    \"Plume\"          \"Shrimpocalypse\" \"BSW\"           \n[5] \"MustardStand\"   \"OMT\"            \"Rav2\"           \"ShrimpHole\"    \n[9] \"X18\"           \n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\nplot_euk_conc$SiteOrder <- factor(plot_euk_conc$Site, levels = site_ids, labels = site_fullname)\nplot_euk_conc$NameOrder <- factor(plot_euk_conc$Name, levels = vent_ids, labels = vent_fullname)\n\n\n\nPlot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another."
  },
  {
    "objectID": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "href": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "title": "Protistan grazing analysis",
    "section": "Isolate T0 only counts for cells/ml plot",
    "text": "Isolate T0 only counts for cells/ml plot\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\n\nplot_euk_format <- plot_euk_conc %>%\n  filter(TimePoint == \"T0\" & (VARIABLE == \"eukCONC\")) %>%\n  group_by(SiteOrder, NameOrder, TimePoint, EXP_TYPE, VARIABLE) %>%\n  summarise(avg_conc = mean(CONCENTRATION),\n            SEM_conc = (sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            .groups = \"rowwise\") %>%\n  unite(EXPERIMENT, SiteOrder, NameOrder, EXP_TYPE, remove = FALSE) %>%\n  data.frame\n\n# Factor\nplot_euk_format$Site_Order <- factor(plot_euk_format$SiteOrder, levels = site_fullname, labels = site_fullname)\n\n# View(plot_euk_format)\neuk_plot <- ggplot(plot_euk_format, aes(x = NameOrder, y = avg_conc, fill = Site_Order)) +\n  geom_errorbar(aes(ymax = (avg_conc + SEM_conc), ymin = (avg_conc - SEM_conc)), width = 0.2) +\n  geom_point(aes(fill = Site_Order), color = \"black\", stat = \"identity\", size = 3, shape = 23) +\n  facet_grid(.~ Site_Order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = c(\"#1c9099\", \"#de2d26\")) +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank()) +\n  labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n       title = \"\")\n\neuk_plot\n\n\n\n\n\nPrint table of eukaryote cell count information.\n\n\nCode\nplot_euk_format %>% \n  type.convert(as.is = TRUE) %>%\n  filter(VARIABLE == \"eukCONC\") %>% \n  mutate(SAMPLE_TYPE = case_when(\n    NameOrder == \"Background\" ~ \"Background\",\n    NameOrder == \"Plume\" ~ \"Plume\",\n    TRUE ~ SiteOrder\n  )) %>%\n  group_by(SAMPLE_TYPE) %>% \n  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),\n           min_cellml = format(min(avg_conc), scientific = T),\n           max_cellml = format(max(avg_conc), scientific = T),\n           num = n())\n\n\n# A tibble: 4 × 5\n  SAMPLE_TYPE MEAN_cellml  min_cellml   max_cellml     num\n  <chr>       <chr>        <chr>        <chr>        <int>\n1 Background  9.183773e+01 9.183773e+01 9.183773e+01     1\n2 Piccard     3.801791e+02 2.309063e+02 4.548154e+02     3\n3 Plume       1.185379e+02 7.930115e+01 1.577747e+02     2\n4 Von Damm    4.105001e+02 2.597696e+02 6.20998e+02      6\n\n\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, counts_occur, file = \"output-data/MCR-cellcount-dfs\")"
  },
  {
    "objectID": "grazing.html#plot-eukaryote-cells-per-ml",
    "href": "grazing.html#plot-eukaryote-cells-per-ml",
    "title": "Protistan grazing analysis",
    "section": "Plot eukaryote cells per ml",
    "text": "Plot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another.\n\nPlot eukaryote cell concentration over time.\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\ncounts_cellsml_avg$SiteOrder <- factor(counts_cellsml_avg$Site, levels = site_ids, labels = site_fullname)\ncounts_cellsml_avg$NameOrder <- factor(counts_cellsml_avg$Name, levels = vent_ids, labels = vent_fullname)\n\n# Plot trend line of euk cell count for all experiments\ncounts_cellsml_avg %>%\n  filter(VARIABLE == \"eukCONC\") %>%\n  unite(\"Experiment\", NameOrder, IGT_REP, sep = \"-\", remove = FALSE) %>%\n  ggplot(aes(x = TimePoint, y = MEAN, shape = EXP_TYPE, fill = NameOrder)) +\n    geom_path(aes(group = Experiment)) +\n    # geom_errorbar(aes(ymax = (MEAN + SD), ymin = (MEAN - SD)), width = 0.2) +\n    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n    geom_point(stat = \"identity\", size = 2, aes(shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_brewer(palette = \"Paired\") +\n    scale_y_log10() +\n    facet_wrap(SiteOrder ~ EXP_TYPE, scales = \"free\") +\n    theme_classic() + theme(strip.background = element_blank(), \n                            legend.title = element_blank(),\n                            title = element_text(size = 7, face = \"bold\"),\n                            axis.title = element_text(size = 9)) +\n    labs(title = \"Total euk cell counts for each experiment\", y = bquote(\"Average eukaryote cells \"~mL^-1), x = \"Time point\") +\n  guides(fill=guide_legend(override.aes=list(shape=21)))\n\n\n\n\n\n\nnote there is an overall drop in euk cells/ml in the final time point. Especially with the IGT samples. Take this into consideration"
  },
  {
    "objectID": "grazing.html#cells-per-ml-prok",
    "href": "grazing.html#cells-per-ml-prok",
    "title": "Protistan grazing analysis",
    "section": "Cells per ml (prok)",
    "text": "Cells per ml (prok)\nVisualize counts\nFactor site names, etc.\n\n\nCode\ninsitu_proks$Name_order <- factor(insitu_proks$Name, levels = c(\"BSW\", \"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\", \"HotChimlet1\", \"ShrimpGulley\", \"SouthofHotChimlet\", \"SouthofLungSnack\", \"ArrowLoop\", \"Bartizan\", \"Rav1\"), labels = c(\"Background\",\"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"Hot Chimlet #1\", \"Shrimp Gulley\", \"South of Hot Chimlet\", \"South of LungSnack\", \"Arrow Loop\", \"Bartizan\", \"Ravelin #1\"))\n\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\ninsitu_proks$Site_order <- factor(insitu_proks$Site, levels = site_ids, labels = site_fullname)\n\n\n\n\nCode\nprok_plot <- ggplot(insitu_proks, aes(x = Name_order, y = MEAN)) +\n  geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n  geom_point(stat = \"identity\", shape = 23, aes(fill = Site), size = 3) +\n  facet_grid(.~ Site_order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(y = bquote(\"Prokaryote cells \"~mL^-1), x = \"\", title = \"\") +\n  scale_y_log10() +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())\nprok_plot\n\n\n\n\n\n\nCombine with previous MCR cell counts\nCompare in situ prokaryote cell counts from 2020 to previous years\n\n\nCode\nprok_prev <- read.csv(\"input-data/cellcount_previousyr.csv\")\n\nprok_prev_formatted <- prok_prev %>% \n  mutate(VENTSITE = case_when(\n    grepl(\"Piccard\", Site) ~ \"Piccard\",\n    grepl(\"Von Damm\", Site) ~ \"VD\"\n  )) %>% \n  filter(!is.na(YEAR)) %>% #QC of \n  # filter(cells_ml != \"NC\") %>% \n  # filter(cells_ml != \"\") %>% \n  # filter(cells_ml != \"no data\") %>% \n  type.convert(as.is = TRUE, numerals = \"no.loss\") %>%\n  select(YEAR, VENTSITE, NAME = Name, REP=Replicate, CELLML = cells_ml, ORIGSAMPLE = Orig_vent_site_ID, ID_number, Origin)\n\n\nRe-import 2020 data to compare.\n\n\nCode\n# Re-import 2020\nprok <- read.delim(\"input-data/prokINSITU-counts-compiled.txt\")\n# View(prok)\nproks_allyrs <- prok %>% \n  separate(SAMPLE, c(\"VENTSITE\", \"NAME\"), sep = \"-\", remove = FALSE) %>% \n  mutate(YEAR = 2020) %>%\n  select(YEAR, VENTSITE, NAME, REP, CELLML, ORIGSAMPLE = BAC) %>% \n  bind_rows(prok_prev_formatted %>% select(-ID_number, -Origin)) %>% \n  type.convert(as.is = TRUE) %>%\n  # Remove not countable or not data samples:\n  filter(CELLML != \"NC\") %>%\n  filter(CELLML != \"\") %>%\n  filter(CELLML != \"no data\") %>%\n  filter(CELLML != \"not countable\") %>% \n  data.frame\n\n# View(proks_allyrs)\n# View(as.data.frame(unique(proks_allyrs$NAME)))\n\nvent_order <- c(\"BSW\",\"Plume\",\"Quakeplume\",\"NearsummitBeebee\",\"MainOrifice\",\"NearMainOrifice\",\"Rav1\",\"HotChimlet1\",\"HotChimlet\",\"SouthofHotChimlet\",\"NearHotChimlet\",\"HotCracks1\",\"HotCracks2\",\"ShrimpHole\",\"ShrimpHole(X18)\",\"X18\",\"X19\",\"SouthofLungSnack\",\"TwinPeaks\",\"OMT\",\"WhiteCastle\",\"GingerCastle\",\"ArrowLoop\",\"Bartizan\",\"LotsOShrimp\",\"MustardStand\",\"ShrimpButtery\",\"ShrimpCanyon\",\"ShrimpGulley\",\"Shrimpocalypse\",\"ShrimpVegas\")\nvent_names <- c(\"Background\",\"Plume\",\"Quakeplume\",\"Near summit Beebee Vents Mound\",\"Main Orifice\",\"Near Main Orifice\",\"Ravelin #1\",\"Hot Chimlet #1\",\"Hot Chimlet\",\"South of Hot Chimlet\",\"Near Hot Chimlet\",\"Hot Cracks #1\",\"Hot Cracks #2\",\"Shrimp Hole\",\"Shrimp Hole (X-18)\",\"X-18\",\"X-19\",\"South of Lung Snack\",\"Twin Peaks\",\"Old Man Tree\",\"White Castle\",\"Ginger Castle\",\"Arrow Loop\",\"Bartizan\",\"Lots O Shrimp\",\"Mustard Stand\",\"Shrimp Buttery\",\"Shrimp Canyon\",\"Shrimp Gulley\",\"Shrimpocalypse\",\"Shrimp Vegas\")\nproks_allyrs$NAME_ORDER <- factor(proks_allyrs$NAME, levels = vent_order, labels = vent_names)\nproks_allyrs$VENTSITE_ORDER <- factor(proks_allyrs$VENTSITE, levels = c(\"Piccard\", \"VD\"), labels = c(\"Piccard\", \"Von Damm\"))\n\n\nPlot by year.\n\n\nCode\n# pdf(\"compare-across-yr-cellcount-04052021.pdf\", h = 8, w = 7)\nggplot(proks_allyrs, aes(x = NAME_ORDER, y = as.numeric(CELLML), fill = factor(YEAR), shape = VENTSITE_ORDER)) +\n  geom_point(stat = \"identity\", aes(fill = factor(YEAR)), size = 3) +\n  scale_shape_manual(values = c(21,23)) +\n  coord_flip() +\n  facet_grid(VENTSITE_ORDER ~ ., space = \"free\", scales = \"free\") +\n  scale_y_log10() +\n  scale_fill_manual(values = c(\"#1c9099\", \"#ffeda0\", \"#fc4e2a\")) +\n  theme_linedraw() +\n  theme(axis.text = element_text(color = \"black\", size = 10),\n        strip.background = element_blank(),\n        strip.text.y = element_text(color = \"black\", size = 11, hjust = 0, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey\")) +\n  labs(y = bquote(\"Cells \"~mL^-1), x = \"\") +\n  guides(fill=guide_legend(override.aes=list(shape=22)))\n\n\n\n\n\nCode\n# dev.off()"
  },
  {
    "objectID": "grazing.html#determine-flp-per-euk-cell",
    "href": "grazing.html#determine-flp-per-euk-cell",
    "title": "Protistan grazing analysis",
    "section": "Determine FLP per euk cell",
    "text": "Determine FLP per euk cell\nIsolate euk cell counts with FLPs (comma separated for counts). These need to be separated into rows, use counts_occur data frame from above.\n\n\nCode\n# Select nano and micro counts with FLPs\ncounts_sepflp <- counts_occur %>% \n  filter(!NOTES == \"Discard\") %>% \n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  select(DATE, SAMPLE, EXPID, VOL, MAG, FOV, nanoFLP, microFLP) %>%\n  # Inputs that are comma separated will be split into a new row\n  separate_rows(microFLP, sep = \",\", convert = TRUE) %>%\n  separate_rows(nanoFLP, sep = \",\", convert = TRUE) %>%\n  # Replace NAs with zeroes\n  replace_na(list(microFLP = 0, nanoFLP = 0)) %>% \n  data.frame\n\n\noptional gut check of data table modification\n\n\nCode\n## Check, see FOV 23, separated into rows.\n# View(counts_sepflp %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n# View(counts_occur %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n\n\nIsolate counts that are >0, so only eukaryote cells that were observed to have FLPs are included. Then calculate FLP per euk cell by dividing by 1 (each row is a euk cell, based on data transformation above).\n\n\nCode\ncounts_flp <- counts_sepflp %>%\n  select(SAMPLE, EXPID, nano_size = nanoFLP, micro_size = microFLP) %>%\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_FLP\") %>%\n  filter(num_of_FLP > 0) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_FLP = sum(num_of_FLP),\n            total_euks_wflp = n(),\n            .groups = \"rowwise\") %>%\n  data.frame\n\n\nOUTPUT COLUMNS: (1) total_FLP = sum of FLPs found inside a euk cell (2) total_euks_wflp = number of euks counted with ingested FLP\nRepeat above operation for euk cells without any FLP. Here, subset total number of observations where there was a euk cell without FLP. These need to be counted as euk cell without an FLP.\n\nBelow code repeats process and compiles with other FLP/euk cell data.\n\nRepeat above process for euk cells without FLPs (0 FLP per euk cell needs to be included in overall average).\n\n\nCode\ncounts_flp_compiled <- counts_occur %>% \n  filter(!(NOTES == \"Discard\")) %>% #Discard bad counts\n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  type.convert(as.is = TRUE) %>% #modify str() for columns\n  select(SAMPLE, EXPID, nano_size = nanoNoFLP, micro_size = microNoFLP) %>% #select non flp\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_euks\") %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>% \n  # filter(num_of_euks > 0) %>% # Remove observed zero counts\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_euks_noFLP = sum(num_of_euks),\n            .groups = \"rowwise\") %>%\n  # Join with FLP count information\n  ## SAMPLE, EXPID, EXPTYPE, IGTREP, and SizeFrac variables should match\n  left_join(counts_flp) %>% # Join with the counts of FLP per euk cell\n  replace_na(list(total_FLP = 0, total_euks_wflp = 0)) %>% #Replace NAs with zero\n  data.frame\n\n\nJoining, by = c(\"SAMPLE\", \"EXPID\", \"EXP_TYPE\", \"IGT_REP\", \"SizeFrac\")\n\n\nExtract total eukaryote cell value by adding across nano and micro. Then combine the nano and micro cell counts.\n\n\nCode\ncounts_flp_compiled_all <- counts_flp_compiled %>% \n  # Exclude size fraction:\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP) %>%\n  summarise(total_euks_noFLP = sum(total_euks_noFLP),\n            total_FLP = sum(total_FLP), \n            total_euks_wflp = sum(total_euks_wflp),\n            .groups = \"rowwise\") %>% \n  add_column(SizeFrac = \"total_euks\") %>% #Add SizeFrac column\n  bind_rows(counts_flp_compiled) %>% # Combine back with flp compiled list\n  data.frame"
  },
  {
    "objectID": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "href": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "title": "Protistan grazing analysis",
    "section": "Calculate FLP per euk cell calculation",
    "text": "Calculate FLP per euk cell calculation\nFirst need to import and compile with metadata to get exact timing of experiments.\n\n\nCode\nmetadata <- read.delim(\"input-data/flp-exp-metadata-compiled.txt\")\nexp_metadata <- read.csv(\"input-data/flp_exp_metadata.csv\")\n\n\nAdd metadata\n\n\nCode\ncounts_flp_calcs_all <- counts_flp_compiled_all %>% \n  # Add in metadata\n  # IGTXb are replicate counts, include them as replicates!\n  separate(EXPID, c(\"TimePoint\", \"REP\"), sep = \"-\", remove = FALSE) %>% mutate(\n    REP = ifelse(grepl(\"IGT5b\", REP), \"IGT5\", REP),\n    REP = ifelse(grepl(\"IGT4b\", REP), \"IGT4\", REP),\n    REP = ifelse(grepl(\"Bag\", EXP_TYPE), \"Bag\", REP)) %>% \n  left_join(metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"TimePoint\" = \"TimePoint\", \"REP\" = \"REP\")) %>% \n  left_join(exp_metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"REP\" = \"REP\")) %>% \n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate_ID\"), sep = \"-\", remove = FALSE) %>%\n  ## Treat repeated IGT counts completely separate\n  # group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  ## Treat repeated IGT counts as replicates (e.g., IGT4b and IGT4 == IGT4)\n  group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, REP, SizeFrac) %>%\n  # FLPperEuk is the total FLP divided by the total number of euk cells counted\n  mutate(FLPperEuk = total_FLP/(sum(total_euks_noFLP, total_euks_wflp))) %>%\n  unite(\"Experiment\", Name, REP, sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nCOLS: Timepoint, Minutes = time point label, actual incubated minutes\n\n\nCOLS: Replicate_ID, REP, and IGT_REP = full replicate identified for IGTs and Bags, designation of biological replicates, and designation of technical replicates for IGT experiments"
  },
  {
    "objectID": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "href": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "title": "Protistan grazing analysis",
    "section": "Calculate linear regression to obtain slope",
    "text": "Calculate linear regression to obtain slope\nUse lm() function in R to calculate linear regression for each experiment. Slope equates to grazing rate. Function inputs the FLP per euk cell data, performs regression and then adds a column for slope and r-squared values.\nFunction to estimate slope. Uses broom and tidymodels, then extracts slope.\n\n\nCode\ncalculate_lm <- function(df){\n  regression_1 <- df %>%\n  type.convert(as.is = TRUE) %>%\n  ## Keep technical replicates separate for IGTs\n  # group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%\n  # nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%\n  ## Combine technical replicates for IGTs\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         tidied = map(lm_fit, tidy)) %>% \n  unnest(tidied) %>% \n  # select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, term, estimate) %>%\n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, term, estimate) %>% \n  pivot_wider(names_from = term, values_from = estimate) %>% \n  data.frame\n  # Reset column names\n  colnames(regression_1) <- c(\"SAMPLE\", \"Site\", \n                              \"Experiment\", \"Name\", \"REP\",\n                              \"SizeFrac\", \"INTERCEPT\", \"SLOPE\")\n  # Repeat broom model to get R2\n  out_regression <- df %>%\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         glanced = map(lm_fit, glance)) %>% \n  unnest(glanced) %>% \n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, r.squared) %>% \n  right_join(regression_1) %>% \n  right_join(df) %>% \n  data.frame\n  out_regression$SITE <- factor(out_regression$Site, levels = c(\"VD\", \"Piccard\"))\n  out_regression$TYPE <- factor(out_regression$EXP_TYPE, levels = c(\"Bag\", \"IGT\"))\n  return(out_regression)\n}\n\n\n\nNote that an error may occur when running the below function. This is due to the fact that some experiments did not have replicates.\n\nApply to all data to obtain slope.\n\n\nCode\ncalcs_wslope_regression <- calculate_lm(counts_flp_calcs_all)\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\ngut check linear regression work. Use below commands out to recalculate one linear regression. Above function uses the nest() capability of tidyverse. Below, one experiment is subset to check the value.\n\n\nCode\n# Extract only plume-bag experiment from VD\n# tmp_plume <- filter(counts_flp_calcs_all, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\")\n# tmp_plume # View\n# Perform linear regression\n# lm_out <- lm(FLPperEuk ~ Minutes, data = tmp_plume)\n# # Check output\n# summary(lm_out)\n# lm_out$coefficients #Intercept=intercept #Minutes = SLOPE\n# # Compare with nested function output\n# filter(calcs_wslope_regression, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\") %>% head\n\n\n\nPlot linear regression trend\nPlot all bag experiments with estimated slope.\n\n\nCode\n# | fig-width: 7\n# | fig-height: 8\ncalcs_wslope_regression %>% \n  filter(SizeFrac == \"total_euks\") %>% \n  # filter(TYPE != \"IGT\") %>% \n  unite(EXPERIMENT, SITE, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = Site)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 42, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\nData points represent the FLP per euk cells (based on total eukaryote cells counts). Y-axis represents the duration of incubation (in minutes). The dashed purple line reprents the slope and intercept of the experiment."
  },
  {
    "objectID": "grazing.html#remove-igt-tf-time-points.",
    "href": "grazing.html#remove-igt-tf-time-points.",
    "title": "Protistan grazing analysis",
    "section": "Remove IGT Tf time points.",
    "text": "Remove IGT Tf time points.\nIGT experiment results appear to have bottle effect, especially in the final time point. Additionally, due to the lack of biological replicates in the IGT experiments, technical replicates are treated as biological replicates in the regression below.\n\n\nCode\nIGT_lm_woTf <- counts_flp_calcs_all %>% \n  # Select only IGT experiments with total eukaryotes, remove Tf (T3)\n  filter(SizeFrac == \"total_euks\") %>% \n  filter(EXP_TYPE == \"IGT\" & !(TimePoint == \"T3\")) %>% \n  add_column(IGT_cor = \"rm Tf\") %>% \n  data.frame\n\n# Recalculate lm(), keep replicates separate\nigt_regression_noTf <- calculate_lm(IGT_lm_woTf) # Recalculate\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\nAll elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\nPlot IGT grazing experiments with newly calculated grazing effect.\n\n\nCode\nigt_regression_noTf %>% \n  # filter(SizeFrac == \"total_euks\") %>% \n  # filter(TYPE != \"IGT\") %>% \n  unite(EXPERIMENT, SITE, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = Site, shape = TYPE, group = Experiment)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = Site)) +\n  scale_shape_manual(values = c(24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\n\nresults are more consistent across experiments."
  },
  {
    "objectID": "grazing.html#compile-and-save-grazing-experiment-results",
    "href": "grazing.html#compile-and-save-grazing-experiment-results",
    "title": "Protistan grazing analysis",
    "section": "Compile and save grazing experiment results",
    "text": "Compile and save grazing experiment results\n\n\nCode\ncalcs_wslope_regression_update <- calcs_wslope_regression %>% \n  filter(TYPE != \"IGT\") %>% \n  bind_rows(igt_regression_noTf %>% select(-IGT_cor)) %>% \n  data.frame\n\n# Factor\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n# Factor for shipboard\ncalcs_wslope_regression_update$SiteOrder <- factor(calcs_wslope_regression_update$Site, levels = site_ids, labels = site_fullname)\ncalcs_wslope_regression_update$NameOrder <- factor(calcs_wslope_regression_update$Name, levels = vent_ids, labels = vent_fullname)\n\n# View(calcs_wslope_regression_update)\n# write.csv(calcs_wslope_regression_update, file = \"output-data/estimated-slopes-grazingexp.csv\")"
  },
  {
    "objectID": "grazing.html#bag-grazing-experiment-controls",
    "href": "grazing.html#bag-grazing-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "Bag grazing experiment controls",
    "text": "Bag grazing experiment controls\n\n\nCode\ndtaf_avg %>% \n  filter(Site != \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site != \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#igt-experiment-controls",
    "href": "grazing.html#igt-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "IGT experiment controls",
    "text": "IGT experiment controls\nRepeat for IGT experiments.\n\n\nCode\ndtaf_avg %>% \n  filter(Site == \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site == \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#plot-flpgrazer-minute",
    "href": "grazing.html#plot-flpgrazer-minute",
    "title": "Protistan grazing analysis",
    "section": "Plot FLP/grazer /minute",
    "text": "Plot FLP/grazer /minute\n\n\nCode\n# svg(\"\", h =, w = )\ngrazing_min_plot <- table_grazerate_wflp %>% \n  ggplot(aes(y = GRAZE_RATE, x = NAME, shape = EXP_TYPE, fill = FIELD)) +\n  geom_jitter(stat = \"identity\", aes(shape = EXP_TYPE, fill = FIELD),\n              color = \"black\", size = 3, width = 0.3) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n  facet_grid(.~Site, space = \"free\", scales = \"free\") +\n  # coord_flip() +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n       shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"FLP \" ~grazer^-1 ~min^-1))\n# dev.off()\ngrazing_min_plot\n\n\n\n\n\nAmend table with eukaryote and prokaryote estimated biomass.\n\n\nCode\n# Subset the average in situ prok cells/ml for non-background samples\ntmp <- filter(insitu_proks, Name != \"BSW\", Name != \"Plume\") %>% select(MEAN)\navg_insitu <- mean(tmp$MEAN)\n# head(insitu_proks)\n\n# Add to master table with data\ntable_grazerate_wflp_wprok <- insitu_proks %>% \n  select(Site = SAMPLE, Prok_conc = MEAN, Prok_sem = SEM) %>% \n  right_join(table_grazerate_wflp) %>% \n  mutate(Prok_conc = ifelse(is.na(Prok_conc), avg_insitu, Prok_conc)) %>% \n  data.frame\n\n\nJoining, by = \"Site\"\n\n\nCode\ntable_grazerate_wflp_wprok_weuk <- plot_euk_format %>% \n  select(Name = NameOrder, FIELD = SiteOrder, euk_conc = avg_conc, EXP_TYPE, euk_conc_sem = SEM_conc) %>%\n  right_join(table_grazerate_wflp_wprok) %>% \n  select(FIELD, NAME = Name, EXP = EXP_TYPE, SAMPLE = Site, RATE_min = GRAZE_RATE, FLP_ml = FLP_conc, PROK_ml = Prok_conc, PROK_sem = Prok_sem, EUK_ml = euk_conc, EUK_sem = euk_conc_sem, TimePoints, EXP_REPS, EXP_VOL,  CTRL_REPS, CTRL_VOL) %>%\n  data.frame\n\n\nJoining, by = c(\"Name\", \"FIELD\", \"EXP_TYPE\")"
  },
  {
    "objectID": "grazing.html#carbon-biomass",
    "href": "grazing.html#carbon-biomass",
    "title": "Protistan grazing analysis",
    "section": "Carbon biomass",
    "text": "Carbon biomass\nReferences for estimating biovolume Pernice, M.C., Forn, I., Gomes, A., Lara, E., Alonso-Sáez, L., Arrieta, J.M., et al. (2015) Global abundance of planktonic heterotrophic protists in the deep ocean. ISME J 9: 782–792.\n\n\nCode\n# Import manual biovolume measurements\nbiov <- read.delim(\"input-data/biovol-euk-12-10-2020.txt\")\n# head(biov)\n\n# Calculate volume\nbiov_calc <- biov %>% \n  mutate(SizeFrac = case_when(\n    h >= 20 ~ \"micro\",\n    TRUE ~ \"nano\")) %>% \n  mutate(Volume = ((pi/6) * (d^2) * d)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999\n  mutate(pgC_cell = (0.216 * (Volume^0.939))) %>% # Calculate Cell biomass in pg C per cell # Menden-Deuer and Lessard 2000\n  data.frame\n# View(biov_calc)\nbiov_calc\n\n\n   EXP VENT_BSW      h      d SizeFrac     Volume     pgC_cell\n1  IGT     vent 30.077 25.764    micro 8954.44130 1110.2426245\n2  IGT     vent 89.582 10.000    micro  523.59878   77.1957618\n3  Bag      BSW 14.595  8.036     nano  271.71800   41.6956679\n4  Bag      BSW 12.480  8.982     nano  379.41786   57.0486460\n5  Bag     vent  9.218  3.120     nano   15.90239    2.9015292\n6  IGT     vent 17.255  9.986     nano  521.40274   76.8917043\n7  Bag     vent 41.153 21.000    micro 4849.04826  624.1445904\n8  IGT     vent 10.282  4.136     nano   37.04591    6.4194942\n9  IGT     vent 29.776 25.852    micro 9046.50993 1120.9583343\n10 IGT     vent 10.991  4.000     nano   33.51032    5.8424695\n11 Bag     vent 14.333  2.000     nano    4.18879    0.8290772\n12 Bag     vent 36.164  3.000    micro   14.13717    2.5980292\n13 Bag      BSW 16.206 14.924     nano 1740.42111  238.4669404\n14 Bag      BSW  7.000  7.000     nano  179.59438   28.2640658\n15 Bag     vent 10.069  5.000     nano   65.44985   10.9544849\n\n\n\nVolume is reported as um^3\n\n\n\nCode\n# Volume by experiment type\nbiov_calc %>% \n  group_by(EXP) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  EXP     VOL     C\n  <chr> <dbl> <dbl>\n1 Bag    836.  112.\n2 IGT   3186.  400.\n\n\nCode\n# Volume by euk size\nbiov_calc %>% \n  group_by(SizeFrac) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  SizeFrac   VOL     C\n  <chr>    <dbl> <dbl>\n1 micro    4678. 587. \n2 nano      325.  46.9\n\n\nCode\n# Volume by site\nbiov_calc %>% \n  group_by(VENT_BSW) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  VENT_BSW   VOL     C\n  <chr>    <dbl> <dbl>\n1 BSW       643.  91.4\n2 vent     2188. 276. \n\n\nCode\n# head(biov_calc)\neuk_vol <- mean(biov_calc$Volume);euk_vol # in um^3\n\n\n[1] 1775.759\n\n\nCode\neuk_carbon <- mean(biov_calc$pgC_cell); euk_carbon # in pg C per cell\n\n\n[1] 226.9636\n\n\nCode\neuk_carbon_min <- min(biov_calc$pgC_cell); euk_carbon_min\n\n\n[1] 0.8290772\n\n\nCode\neuk_carbon_max <- max(biov_calc$pgC_cell); euk_carbon_max\n\n\n[1] 1120.958\n\n\nCode\n# euk_carbon\n\n\nAvg euk biomass pg C per individual cell == {r}euk_carbon"
  },
  {
    "objectID": "grazing.html#compare-carbon-biomass-with-literature",
    "href": "grazing.html#compare-carbon-biomass-with-literature",
    "title": "Protistan grazing analysis",
    "section": "Compare carbon biomass with literature",
    "text": "Compare carbon biomass with literature\nCompare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10^7 µm^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell.\nImport the heterotroph species volume and carbon content to compare to my measured values.\n\n\nCode\n# Hu-measured\nrange(biov_calc$Volume)\n\n\n[1]    4.18879 9046.50993\n\n\nCode\nrange(biov_calc$pgC_cell)\n\n\n[1]    0.8290772 1120.9583343\n\n\nCode\nc_prev <- read.delim(\"input-data/md-lessard-2000.txt\") # Table 2, heterotrophs only\n\n# combine and plot\ncarbon_compare <- c_prev %>% \n  add_column(source = \"Menden-Deuer Lessard\") %>% \n  select(source, Volume = vol, pgC_cell) %>% \n  rbind(biov_calc %>% add_column(source = \"MCR\") %>% select(source, Volume, pgC_cell)) %>% \n    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +\n      geom_point(aes(fill = source), shape = 23, color = \"black\", size = 3) +\n      scale_y_log10() + scale_x_log10() +\n      labs(title = \"Compare literature to measured cell volume & C content\",\n           x = bquote(\"Volume\" ~µm^-3),\n           y = bquote(\"pg C\" ~cell^-1)) +\n      theme_bw() + theme(legend.title = element_blank(),\n                         axis.title = element_text(size = 14),\n                         axis.text = element_text(size = 14),\n                         legend.text = element_text(size = 14))\n\ncarbon_compare\n\n\n\n\n\nCode\neuk_carbon_lit_mean <- mean(c_prev$pgC_cell)\neuk_carbon_lit_min <- min(c_prev$pgC_cell)\neuk_carbon_lit_max <- max(c_prev$pgC_cell)\n\n\nUpon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall.\nFind lowest estimates or protist carbon, benthic estimates, and others? How does it compare to my measurements?\n\nCarbon biomass for prokaryotes\nBelow adding in biomass estimates from prokaryotes and protists.\n\n\nCode\nbac_carbon_ug <- (86)*(1.00E-9) # From Derived from Morono et al. 2011 \n# bac_carbon_ug\nbac_carbon_ug_2 <- (173)*(1.00E-9) # Derived from McNichol et al. 2018; LOFERER-KRO ̈ ßBACHER, J. KLIMA & R. PSENNER 1998\n# table_wcalcs\n\n\nAmend all to table Incorporate calculations that include biomass of population and ug C consumed. For rate measurements, only incorporate the Morono et al. 2011 biomass for prokaryotes. This way it is on the lower end and is comparable to Gorda Ridge work.\n\n\nCode\nbsw <- c(\"Plume\", \"Background\")\n\ntable_wcalcs_biomass <- table_wcalcs %>% \n  add_column(euk_C_ug_Hu = (euk_carbon / (1.00E+06))) %>% # Convert to ug from pg\n  add_column(euk_C_ug_lit = (euk_carbon_lit_mean / (1.00E+06))) %>% # literature\n  add_column(bac_C_ug = bac_carbon_ug) %>% \n  add_column(bac_C_ug_2 = bac_carbon_ug_2) %>%\n  # Grazing rate in ug C per bac per day\n  mutate(RATE_ugCbac_pergrazer_perday = (RATE_hr * 24 * bac_C_ug), # Grazing rate as ug C per grazer per day\n         # % of cell carbon per day\n         SPEC_INGESTION_RATE = (RATE_ugCbac_pergrazer_perday / euk_C_ug_Hu),\n         SPEC_INGESTION_RATE_lit = (RATE_ugCbac_pergrazer_perday / euk_C_ug_lit),\n         Prok_biomass = PROK_ml * bac_carbon_ug,\n         Euk_biomass_Hu = EUK_ml * euk_C_ug_Hu,\n         Euk_biomass_lit = EUK_ml * euk_C_ug_lit,\n         Prok_biomass_L = PROK_ml * bac_carbon_ug * 1000,\n         Euk_biomass_Hu_L = EUK_ml * euk_C_ug_Hu * 1000,\n         Euk_biomass_lit_L = EUK_ml * euk_C_ug_lit * 1000,\n         # Repeat with SEM values\n         Prok_biomass_sem = PROK_sem * bac_carbon_ug,\n         Euk_biomass_Hu_sem = EUK_sem * euk_C_ug_Hu,\n         Euk_biomass_lit_sem = EUK_sem * euk_C_ug_lit,\n         Prok_biomass_sem_L = PROK_sem * (bac_carbon_ug* 1000),\n         Euk_biomass_Hu_sem_L = EUK_sem * (euk_C_ug_Hu * 1000),\n         Euk_biomass_lit_sem_L = EUK_sem * (euk_C_ug_lit * 1000)) %>% \n  type.convert(as.is = TRUE) %>%\n  mutate(detected = case_when(\n    RATE_min < 0 ~ \"Not detected\",\n    TRUE ~ \"Detected\")) %>% \n  mutate(type = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ paste(\"Vent\", EXP, sep=\"-\")\n  )) %>% \n  mutate(GRAZE_RATE = case_when(\n    RATE_min < 0 ~ 0,\n    TRUE ~ RATE_min\n  )) %>% \n  mutate(type_site = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ \"Vent\"\n  )) %>%\n  data.frame\n# View(table_wcalcs_biomass)\n\n\n\nVolume is reported as um^3\n\n\nGrazing rate column == FLP per minute consumed\nGrazing effect hr == cells per ml per hr"
  },
  {
    "objectID": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "href": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "title": "Protistan grazing analysis",
    "section": "Amend table with ‘bounded’ carbon estimates",
    "text": "Amend table with ‘bounded’ carbon estimates\nAlso make a “bounded” table that demonstrates the ug C consumed in the context of McNichol et al.\n\n\nCode\n# G = number of cells grazed during experiment duration\ntable_wcalcs_biomass_bounded <- table_wcalcs_biomass %>% \n  add_column(fgC_cell = 86) %>% # Add in Morono et al. 2011 value\n  mutate(\n    # cells_consumed_perday = (G / 1), # Rate of cells consumed * in situ prok, per day\n    fgC_ml_perday = (GRAZING_EFFECT_day * fgC_cell), # Convert cell amount to fg C\n    ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000), # Convert to ug C per L\n    lower_mcnichol = 100*(ugC_L_perday / 17.3),\n    upper_mcnichol = 100*(ugC_L_perday / 321.4)\n  ) %>% \n  data.frame\n\n\n\n\nCode\n# head(table_wcalcs_biomass_bounded)\n# View(table_wcalcs_biomass_bounded)\n# write_delim(table_wcalcs_biomass_bounded, file = \"output-data/table-wcalc.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "grazing.html#function-to-plot-grazing-results",
    "href": "grazing.html#function-to-plot-grazing-results",
    "title": "Protistan grazing analysis",
    "section": "Function to plot grazing results",
    "text": "Function to plot grazing results\n\n\nCode\nconc_rate_plot_mcr <- function(df, var, sem){\n  df %>% \n    filter(Variable == var) %>%\n    filter(SEM_variable == sem) %>% \n    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD)) +\n    geom_errorbar(aes(ymax = (Value + SEM), ymin = (Value - SEM)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(shape = EXP, fill = FIELD),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 23)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n    facet_wrap(VARIABLE_ORDER ~ ., scales = \"free\", \n               strip.position = c(\"left\"), labeller = label_parsed) +\n    scale_y_log10() +\n    # scale_y_log10(labels = function(x) format(x, scientific = TRUE)) +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 14),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = \"\")\n}\n\n\n\n\nCode\n# conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"Prok_biomass_L\", \"Prok_biomass_sem_L\")\n\nconc_rate_plot_mcr(biomass_rate_plot, \"Euk_biomass_Hu_L\", \"Euk_biomass_Hu_sem_L\")\n\n\n\n\n\nCode\n# conc_rate_plot_mcr(biomass_rate_plot, \"GRAZING_EFFECT_hr\")"
  }
]