[
  {
    "objectID": "asv.html",
    "href": "asv.html",
    "title": "18S survey",
    "section": "",
    "text": "Set up R environment\n\n\nCode\nlibrary(tidyverse); library(phyloseq); library(ape)\nlibrary(ggupset)\n\n\nImport previously sequenced and analyzed tag-sequence data. See https://shu251.github.io/microeuk-amplicon-survey/ for additional information.\n\n\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose = T)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nCode\n# physeq_mcr\n\n\n\n\n\n\n\nCode\nvent_ids <- c(\"BSW\", \"Plume\")\n\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"OldManTree\", \"Rav2\", \"MustardStand\", \"ShrimpHole\", \"WhiteCastle\", \"ArrowLoop\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"White Castle\", \"Arrow Loop\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\n# Colors for VD and Piccard\nsite_colors <- c(\"#418b84\", \"#943b36\")\n# site_colors\n\n# Vent colors\nvent_colors <- c(\"#c2bfc2\",\"#ebdac9\", \"#c02c5b\", \"#cfae20\", \"#86952c\", \"#a88fab\", \"#a88fab\", \"#70b2aa\", \"#8c906d\", \"#806fa2\", \"#8cabcf\", \"#609482\")\n\nnames(vent_colors) <- vent_fullname\nnames(site_colors) <- site_fullname\n# Cooler colors for VD\n# c(\"#4e7d4b\") green\n#569c91 blue\n#ae8fbb purple\n#ce86ba a lighter purple\n#31464a dark dark green\n#8c906d grey green\n#bab446 yellow green\n#ebdac9 white - cream\n#c2bfc2 grey\n# Piccard\n#c02c5b pink - red\n#d65a9e pink\n##cfae20 yellow\n\nall_taxa_color = c(\"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#deebf7\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\", \"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\")"
  },
  {
    "objectID": "asv.html#import-decontam-results-to-qc-asv-table",
    "href": "asv.html#import-decontam-results-to-qc-asv-table",
    "title": "18S survey",
    "section": "Import decontam results to QC ASV table",
    "text": "Import decontam results to QC ASV table\n\nload(\"../../microeuks_deepbiosphere_datamine/microeuk-amplicon-survey/seq-analysis/contam-asvs.RData\", verbose= TRUE)\n\nLoading objects:\n  list_of_contam_asvs\n\nclass(list_of_contam_asvs)\n\n[1] \"character\"\n\n\n\nasv_wtax_qc <- merged_asv %>%\n  select(FeatureID = '#OTU ID', everything()) %>%\n  filter(!(FeatureID %in% list_of_contam_asvs)) %>%\n  # In wide format, subsample 1000 random ASVs\n  # sample_n(1000, replace = FALSE) %>%\n  pivot_longer(cols = !FeatureID,\n               names_to = \"SAMPLE\", values_to = \"value\") %>%\n  filter(grepl(\"_MCR_\", SAMPLE)) %>%\n  left_join(merged_tax, by = c(\"FeatureID\" = \"Feature ID\")) %>%\n  left_join(filter(metadata_formatted, grepl(\"_MCR_\", SAMPLE))) %>%\n  unite(SAMPLENAME, SITE, SAMPLETYPE, YEAR, VENT, SAMPLEID, sep = \" \", remove = FALSE)\n# dim(asv_wtax_qc)\n# length(unique(asv_wtax_qc$FeatureID))\n\n\ntax_matrix <- asv_wtax_qc %>%\n  select(FeatureID, Taxon) %>%\n  distinct() %>%\n  separate(Taxon, c(\"Domain\", \"Supergroup\",\n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(tax_matrix)\nasv_matrix <- asv_wtax_qc %>%\n  select(FeatureID, SAMPLE, value) %>%\n  pivot_wider(names_from = SAMPLE, values_from = value, values_fill = 0) %>%\n  column_to_rownames(var = \"FeatureID\") %>%\n  as.matrix\n# dim(asv_matrix)\n# dim(asv_matrix); dim(tax_matrix)\n\n# Align row names for each matrix\nrownames(tax_matrix) <- row.names(asv_matrix)\n# dim(asv_matrix)\nmcr_samples <- as.character(colnames(asv_matrix))\n\n# Set rownames of metadata table to SAMPLE information\nmetadata_mcr <- filter(metadata_formatted, SAMPLE %in% mcr_samples) %>%\n  rownames_to_column(var = \"X\") %>%\n  column_to_rownames(var = \"SAMPLE\")\n# dim(metadata_mcr)"
  },
  {
    "objectID": "asv.html#import-as-phyloseq-objects",
    "href": "asv.html#import-as-phyloseq-objects",
    "title": "18S survey",
    "section": "Import as phyloseq objects",
    "text": "Import as phyloseq objects\n\n# Import asv and tax matrices\nASV = otu_table(asv_matrix, taxa_are_rows = TRUE)\nTAX = tax_table(tax_matrix)\nphylo_obj <- phyloseq(ASV, TAX)\n# phylo_obj\n# Import metadata as sample data in phyloseq\nsamplenames <- sample_data(metadata_mcr)\n# samplenames\n# join as phyloseq object\nphyseq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# colnames(ASV)\n# TAX\n## Check\nphyseq_wnames\n\nphyloseq-class experiment-level object\notu_table()   OTU Table:         [ 17878 taxa and 23 samples ]\nsample_data() Sample Data:       [ 23 samples by 16 sample variables ]\ntax_table()   Taxonomy Table:    [ 17878 taxa by 8 taxonomic ranks ]\n\nntaxa(physeq_wnames) #17878\n\n[1] 17878\n\nnsamples(physeq_wnames) #23\n\n[1] 23\n\n# # physeq_wnames # run with sample, 1000 tax.\n# # head(taxa_names(physeq_wnames))\nmcr_tree <- rtree(ntaxa(physeq_wnames), rooted = TRUE, tip.label = taxa_names(physeq_wnames))\n# class(mcr_tree)\n# ?merge_phyloseq\nphyseq_mcr <- merge_phyloseq(physeq_wnames, mcr_tree)"
  },
  {
    "objectID": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "href": "asv.html#save-output-asv-tables-for-downstream-analyses",
    "title": "18S survey",
    "section": "Save output ASV tables for downstream analyses",
    "text": "Save output ASV tables for downstream analyses\n\n# phylo_obj <- phyloseq(ASV, TAX)\n# samplenames <- sample_data(metadata_formatted)\n# physeq_wnames = merge_phyloseq(phylo_obj, samplenames)\n# dim(asv_wtax_qc)\n# physeq_wnames\n\n# save(phylo_obj, samplenames, physeq_wnames, metadata_mcr, asv_wtax_qc, TAX, tax_matrix, physeq_mcr, file = \"input-data/MCR-amplicon-data.RData\")"
  },
  {
    "objectID": "grazing.html",
    "href": "grazing.html",
    "title": "Protistan grazing analysis",
    "section": "",
    "text": "Code below details how to import cell count (FLP count) information from Mid-Cayman Rise protistan grazing incubations and estimate grazing rate and cell biomass.\n\n\n\n\nCode\nlibrary(tidyverse); library(cowplot); library(broom)\nlibrary(patchwork)\n\n\nSet color schematic\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\nsite_color <- c(\"#264653\", \"#E76F51\")\nnames(site_color) <- site_fullname\n\nwhole_pal <- c(\"#264653\", \"#2A9D8F\", \"#E9C46A\",\"#F4A261\", \"#E76F51\")\n\nextra <- c(\"#eae2b7\", \"#5f0f40\", \"#90be6d\", \"#941b0c\", \"#577590\")\n\n\n\n\n\nImport eukaryotic cell count data from grazing experiments. In this section, we will calculate cells per ml from raw counts (Field of view, etc.) and use to estimate protist cell concentration. These will be used below in grazing experiment calculations.\n\n\nCode\ncounts <- read.delim(\"input-data/euk-counts-compiled.txt\", \n                     blank.lines.skip = FALSE,\n                     na.strings = c(\"\", \"NA\"),\n                     stringsAsFactors = FALSE) # Import\ncounts[is.na(counts)] <- 0 # Change blanks to zeroes\n\n\nRaw data table collected during microscopy count process. Below code reviews the structure of this raw data and updates column headers to be more ‘R’ friendly.\n\n\nCode\n# head(counts)\ncolnames(counts) <- c(\"DATE\", \"SAMPLE\", \"EXPID\", \"VOL\", \"MAG\", \"FOV\", \"nanoNoFLP\", \"microNoFLP\", \"nanoFLP\", \"microFLP\", \"NOTES\", \"DateCompiled\"); colnames(counts)\n\n\n [1] \"DATE\"         \"SAMPLE\"       \"EXPID\"        \"VOL\"          \"MAG\"         \n [6] \"FOV\"          \"nanoNoFLP\"    \"microNoFLP\"   \"nanoFLP\"      \"microFLP\"    \n[11] \"NOTES\"        \"DateCompiled\"\n\n\n\nTo count occurrence and number of FLP ingested by eukaryotic cells, the number of FLPs ingested was tallied and comma separated for multiple eukaryotic cells with FLP. These values need to separated and counted as 1 eukaryotic cell each, but retain the number of FLP per cell.\n\nParse raw microscopy count data.\n\n\nCode\ncounts_occur <- counts %>%\n  # remove incomplete\n  filter(NOTES != \"Not countable\") %>% \n  # Count number of euk cells observed with FLPs (ex. if \"1,2\", 'occur' will = 2)\n  mutate(nanoFLP_occur = as.numeric(str_count(nanoFLP, \"[1-9]\\\\d*\")), \n         microFLP_occur = as.numeric(str_count(microFLP, \"[1-9]\\\\d*\")),\n         # Add number of euk cells with FLPs to those without for total number of euk cells\n         nanoTOTAL = as.numeric(nanoNoFLP) + nanoFLP_occur, \n         microTOTAL = as.numeric(microNoFLP) + microFLP_occur,\n         euksTOTAL = nanoTOTAL + microTOTAL) %>%\n      data.frame"
  },
  {
    "objectID": "grazing.html#running-code",
    "href": "grazing.html#running-code",
    "title": "Protistan grazing analysis",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Microbial eukaryotic ecology and food web contributions at two Mid-Cayman Rise deep-sea vent fields",
    "section": "",
    "text": "For access to in prep data, please contact skhu[at]tamu.edu\n\nRaw sequence data are available through NCBI under SRA BioProject accession number PRJNA802868\n\nTO DO: - Review grazing code again - additional regression analysis, what about predictive analyses? - Ensure C biomass story makes sense\n\nfor the ASV code, T0 and Tf visualization? or at least a list of ASVs for each experiment???\nCan I overlap ASVs from corncod and the T0-Tf comparison???"
  },
  {
    "objectID": "grazing.html#calculate-cells-per-ml-euk",
    "href": "grazing.html#calculate-cells-per-ml-euk",
    "title": "Protistan grazing analysis",
    "section": "Calculate cells per ml (euk)",
    "text": "Calculate cells per ml (euk)\nInput data are the raw microscopy counts by FOV. Code below calculations cells/ml based on these values. Additionaly, variance and standard deviation are also calculated. Eukaryotic cells were also classified by size, where micro equates to >20um and nano is <20um. All counts were done at 100x magnification, confirm this: unique(counts_occur$MAG).\nCalculate cell concentration (cells/ml).\n\n\nCode\ncounts_cellsml_all <- counts_occur %>%\n  group_by(SAMPLE, EXPID, VOL) %>% #Calculate averages by sample\n  summarise(totalFOV = n(), # Count total FOV counted\n            nanoAvg = sum(nanoTOTAL)/totalFOV, #Average per FOV\n            nanoVar = var(nanoTOTAL), #Variance\n            nanoSd = (2*(sqrt(nanoVar))), #Standard deviation\n            microAvg = sum(microTOTAL)/totalFOV, ## Repeat for microeuks\n            microVar = var(microTOTAL), \n            microSd = (2*(sqrt(microVar))), \n            euksAvg = sum(euksTOTAL)/totalFOV, ## Repeat for total cell count\n            euksVar = var(euksTOTAL), \n            euksSd = (2*(sqrt(euksVar))), \n            .groups = 'drop_last') %>%\n  # Calculate cells/ml based on magnification (at x100, 0.01 is vol of grid), volume filtered (VOL), dilution factor (0.9), and area of counting grid (for Huber lab scope, it is 283.385):\n  mutate(nanoCONC = ((nanoAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         microCONC = ((microAvg * 283.385)/(VOL * 0.01 * 0.9)),\n         eukCONC = ((euksAvg * 283.385)/(VOL * 0.01 * 0.9))\n         ) %>%\n  # left_join(expmeta) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nReplicates belong to the same experiment for either Bag or IGT incubation. Below, modify these names and label new column with bag or igt. And create an average across replicates.\n\nAverage cells/ml across replicates, pivot to long format\n\n\nCode\ncounts_cellsml_avg <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, nanoCONC, microCONC, eukCONC) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  select(-Replicate) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  group_by(Site, Name, TimePoint, EXP_TYPE, IGT_REP, VARIABLE) %>%\n  # Calculate mean, variance, SD, min, and max\n  summarise(MEAN = mean(CONCENTRATION),\n            VAR = var(CONCENTRATION),\n            SD = sd(CONCENTRATION),\n            SEM =(sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            MIN = min(CONCENTRATION),\n            MAX = max(CONCENTRATION),\n            .groups = 'drop_last') %>%\n  data.frame\n\n\nNOTES on calculations:\nVAR = takes the sum of the squares of each value’s deviation from the mean and divides by the number of such values minus one. This differs from the calculation of variance across an entire population in that the latter divides by the size of the dataset without subtracting one.\nSD = standard deviation of all values\nSEM = standard deviation of sampling distribution; standard deviation divided by the square root of the sample size.\nSave output file\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, file = \"input-data/raw-avg-eukcount.RData\")\n\n\nReformat to parse experiment information type\n\n\nCode\n# Convert to long format and add column that reports IGT vs bag experiment\nplot_euk_conc <- counts_cellsml_all %>%\n  select(Site, Name, TimePoint, Replicate, ends_with(\"CONC\")) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  pivot_longer(cols = ends_with(\"CONC\"), names_to = \"VARIABLE\", values_to = \"CONCENTRATION\") %>%\n  data.frame\n\n\nFactor cell count data\n\n\nCode\nunique(plot_euk_conc$Name)\n\n\n[1] \"LotsOShrimp\"    \"Plume\"          \"Shrimpocalypse\" \"BSW\"           \n[5] \"MustardStand\"   \"OMT\"            \"Rav2\"           \"ShrimpHole\"    \n[9] \"X18\"           \n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\nplot_euk_conc$SiteOrder <- factor(plot_euk_conc$Site, levels = site_ids, labels = site_fullname)\nplot_euk_conc$NameOrder <- factor(plot_euk_conc$Name, levels = vent_ids, labels = vent_fullname)\n\n\n\nPlot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another."
  },
  {
    "objectID": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "href": "grazing.html#isolate-t0-only-counts-for-cellsml-plot",
    "title": "Protistan grazing analysis",
    "section": "2.2 Isolate T0 only counts for cells/ml plot",
    "text": "2.2 Isolate T0 only counts for cells/ml plot\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\n\nplot_euk_format <- plot_euk_conc %>%\n  filter(TimePoint == \"T0\") %>% \n  # filter(TimePoint == \"T0\" & (VARIABLE == \"eukCONC\")) %>%\n  group_by(SiteOrder, NameOrder, TimePoint, EXP_TYPE, VARIABLE) %>%\n  summarise(avg_conc = mean(CONCENTRATION),\n            SEM_conc = (sd(CONCENTRATION)/sqrt(length(CONCENTRATION))),\n            .groups = \"rowwise\") %>%\n  unite(EXPERIMENT, SiteOrder, NameOrder, EXP_TYPE, remove = FALSE) %>%\n  data.frame\n\nplot_euk_format\n\n\n                   EXPERIMENT SiteOrder      NameOrder TimePoint EXP_TYPE\n1     Von Damm_Background_Bag  Von Damm     Background        T0      Bag\n2     Von Damm_Background_Bag  Von Damm     Background        T0      Bag\n3     Von Damm_Background_Bag  Von Damm     Background        T0      Bag\n4          Von Damm_Plume_Bag  Von Damm          Plume        T0      Bag\n5          Von Damm_Plume_Bag  Von Damm          Plume        T0      Bag\n6          Von Damm_Plume_Bag  Von Damm          Plume        T0      Bag\n7           Von Damm_X-18_Bag  Von Damm           X-18        T0      Bag\n8           Von Damm_X-18_Bag  Von Damm           X-18        T0      Bag\n9           Von Damm_X-18_Bag  Von Damm           X-18        T0      Bag\n10  Von Damm_Old Man Tree_IGT  Von Damm   Old Man Tree        T0      IGT\n11  Von Damm_Old Man Tree_IGT  Von Damm   Old Man Tree        T0      IGT\n12  Von Damm_Old Man Tree_IGT  Von Damm   Old Man Tree        T0      IGT\n13    Von Damm_Ravelin #2_Bag  Von Damm     Ravelin #2        T0      Bag\n14    Von Damm_Ravelin #2_Bag  Von Damm     Ravelin #2        T0      Bag\n15    Von Damm_Ravelin #2_Bag  Von Damm     Ravelin #2        T0      Bag\n16    Von Damm_Ravelin #2_IGT  Von Damm     Ravelin #2        T0      IGT\n17    Von Damm_Ravelin #2_IGT  Von Damm     Ravelin #2        T0      IGT\n18    Von Damm_Ravelin #2_IGT  Von Damm     Ravelin #2        T0      IGT\n19 Von Damm_Mustard Stand_Bag  Von Damm  Mustard Stand        T0      Bag\n20 Von Damm_Mustard Stand_Bag  Von Damm  Mustard Stand        T0      Bag\n21 Von Damm_Mustard Stand_Bag  Von Damm  Mustard Stand        T0      Bag\n22   Von Damm_Shrimp Hole_Bag  Von Damm    Shrimp Hole        T0      Bag\n23   Von Damm_Shrimp Hole_Bag  Von Damm    Shrimp Hole        T0      Bag\n24   Von Damm_Shrimp Hole_Bag  Von Damm    Shrimp Hole        T0      Bag\n25          Piccard_Plume_Bag   Piccard          Plume        T0      Bag\n26          Piccard_Plume_Bag   Piccard          Plume        T0      Bag\n27          Piccard_Plume_Bag   Piccard          Plume        T0      Bag\n28 Piccard_Shrimpocalypse_Bag   Piccard Shrimpocalypse        T0      Bag\n29 Piccard_Shrimpocalypse_Bag   Piccard Shrimpocalypse        T0      Bag\n30 Piccard_Shrimpocalypse_Bag   Piccard Shrimpocalypse        T0      Bag\n31 Piccard_Shrimpocalypse_IGT   Piccard Shrimpocalypse        T0      IGT\n32 Piccard_Shrimpocalypse_IGT   Piccard Shrimpocalypse        T0      IGT\n33 Piccard_Shrimpocalypse_IGT   Piccard Shrimpocalypse        T0      IGT\n34 Piccard_Lots 'O Shrimp_Bag   Piccard Lots 'O Shrimp        T0      Bag\n35 Piccard_Lots 'O Shrimp_Bag   Piccard Lots 'O Shrimp        T0      Bag\n36 Piccard_Lots 'O Shrimp_Bag   Piccard Lots 'O Shrimp        T0      Bag\n    VARIABLE   avg_conc   SEM_conc\n1    eukCONC  91.837731  21.866127\n2  microCONC   0.000000   0.000000\n3   nanoCONC  91.837731  21.866127\n4    eukCONC 157.774683  67.098589\n5  microCONC  22.872439   8.878118\n6   nanoCONC 134.902245  58.794905\n7    eukCONC 314.872222 104.957407\n8  microCONC  41.982963  20.991481\n9   nanoCONC 272.889259  83.965926\n10   eukCONC 472.308333 122.450309\n11 microCONC 104.957407  34.985802\n12  nanoCONC 367.350926  87.464506\n13   eukCONC 409.333889  73.470185\n14 microCONC  10.495741  10.495741\n15  nanoCONC 398.838148  62.974444\n16   eukCONC 620.997994 123.177023\n17 microCONC  34.985802  14.282894\n18  nanoCONC 586.012191 131.196759\n19   eukCONC 259.769583  28.863287\n20 microCONC   0.000000   0.000000\n21  nanoCONC 259.769583  28.863287\n22   eukCONC 385.718472   7.871806\n23 microCONC  49.854769  28.863287\n24  nanoCONC 335.863704  20.991481\n25   eukCONC  79.301152  16.819081\n26 microCONC   9.329547   2.332387\n27  nanoCONC  69.971605  18.512747\n28   eukCONC 454.815432         NA\n29 microCONC  34.985802         NA\n30  nanoCONC 419.829630         NA\n31   eukCONC 454.815432  69.971605\n32 microCONC  34.985802  34.985802\n33  nanoCONC 419.829630  34.985802\n34   eukCONC 230.906296         NA\n35 microCONC   0.000000         NA\n36  nanoCONC 230.906296         NA\n\n\nCode\n# Factor\nplot_euk_format$Site_Order <- factor(plot_euk_format$SiteOrder, levels = site_fullname, labels = site_fullname)\n\n# View(plot_euk_format)\n# Isolate only total euk counts\neuk_plot <- ggplot((plot_euk_format %>% filter(VARIABLE == \"eukCONC\")), aes(x = NameOrder, y = avg_conc, fill = Site_Order)) +\n  geom_errorbar(aes(ymax = (avg_conc + SEM_conc), ymin = (avg_conc - SEM_conc)), width = 0.2) +\n  geom_point(aes(fill = Site_Order), color = \"black\", stat = \"identity\", size = 3, shape = 23) +\n  facet_grid(.~ Site_Order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = site_color) +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank()) +\n  labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n       title = \"\")\n\neuk_plot\n\n\n\n\n\nPrint table of eukaryote cell count information to include in results section summary.\n\n\nCode\nplot_euk_format %>% \n  type.convert(as.is = TRUE) %>%\n  filter(VARIABLE == \"eukCONC\") %>% \n  mutate(SAMPLE_TYPE = case_when(\n    NameOrder == \"Background\" ~ \"Background\",\n    NameOrder == \"Plume\" ~ \"Plume\",\n    TRUE ~ SiteOrder\n  )) %>%\n  group_by(SAMPLE_TYPE) %>% \n  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),\n           min_cellml = format(min(avg_conc), scientific = T),\n           max_cellml = format(max(avg_conc), scientific = T),\n           num = n())\n\n\n# A tibble: 4 × 5\n  SAMPLE_TYPE MEAN_cellml  min_cellml   max_cellml     num\n  <chr>       <chr>        <chr>        <chr>        <int>\n1 Background  9.183773e+01 9.183773e+01 9.183773e+01     1\n2 Piccard     3.801791e+02 2.309063e+02 4.548154e+02     3\n3 Plume       1.185379e+02 7.930115e+01 1.577747e+02     2\n4 Von Damm    4.105001e+02 2.597696e+02 6.20998e+02      6\n\n\nCode\nplot_euk_format %>% \n  type.convert(as.is = TRUE) %>%\n  # filter(VARIABLE == \"eukCONC\") %>% \n  mutate(SAMPLE_TYPE = case_when(\n    NameOrder == \"Background\" ~ \"Background\",\n    NameOrder == \"Plume\" ~ \"Plume\",\n    TRUE ~ SiteOrder\n  )) %>%\n  group_by(SAMPLE_TYPE, VARIABLE) %>% \n  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),\n           min_cellml = format(min(avg_conc), scientific = T),\n           max_cellml = format(max(avg_conc), scientific = T),\n           num = n())\n\n\n`summarise()` has grouped output by 'SAMPLE_TYPE'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 12 × 6\n# Groups:   SAMPLE_TYPE [4]\n   SAMPLE_TYPE VARIABLE  MEAN_cellml  min_cellml   max_cellml     num\n   <chr>       <chr>     <chr>        <chr>        <chr>        <int>\n 1 Background  eukCONC   9.183773e+01 9.183773e+01 9.183773e+01     1\n 2 Background  microCONC 0e+00        0e+00        0e+00            1\n 3 Background  nanoCONC  9.183773e+01 9.183773e+01 9.183773e+01     1\n 4 Piccard     eukCONC   3.801791e+02 2.309063e+02 4.548154e+02     3\n 5 Piccard     microCONC 2.332387e+01 0e+00        3.49858e+01      3\n 6 Piccard     nanoCONC  3.568552e+02 2.309063e+02 4.198296e+02     3\n 7 Plume       eukCONC   1.185379e+02 7.930115e+01 1.577747e+02     2\n 8 Plume       microCONC 1.610099e+01 9.329547e+00 2.287244e+01     2\n 9 Plume       nanoCONC  1.024369e+02 6.99716e+01  1.349022e+02     2\n10 Von Damm    eukCONC   4.105001e+02 2.597696e+02 6.20998e+02      6\n11 Von Damm    microCONC 4.037945e+01 0e+00        1.049574e+02     6\n12 Von Damm    nanoCONC  3.701206e+02 2.597696e+02 5.860122e+02     6\n\n\nCode\n# unique(plot_euk_format$NameOrder)\nplot_euk_format %>% \n  mutate(SAMPLE_TYPE_BIN = case_when(\n    NameOrder == \"Background\" ~ \"Non-vent\",\n    NameOrder == \"Plume\" ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  )) %>%\n  group_by(SAMPLE_TYPE_BIN, VARIABLE) %>% \n  summarise(MEAN_cellml = format(mean(avg_conc), scientific = T),\n           min_cellml = format(min(avg_conc), scientific = T),\n           max_cellml = format(max(avg_conc), scientific = T),\n           num = n())\n\n\n`summarise()` has grouped output by 'SAMPLE_TYPE_BIN'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 6 × 6\n# Groups:   SAMPLE_TYPE_BIN [2]\n  SAMPLE_TYPE_BIN VARIABLE  MEAN_cellml  min_cellml   max_cellml     num\n  <chr>           <chr>     <chr>        <chr>        <chr>        <int>\n1 Non-vent        eukCONC   1.096379e+02 7.930115e+01 1.577747e+02     3\n2 Non-vent        microCONC 1.0734e+01   0e+00        2.287244e+01     3\n3 Non-vent        nanoCONC  9.890386e+01 6.99716e+01  1.349022e+02     3\n4 Vent            eukCONC   4.003931e+02 2.309063e+02 6.20998e+02      9\n5 Vent            microCONC 3.469425e+01 0e+00        1.049574e+02     9\n6 Vent            nanoCONC  3.656988e+02 2.309063e+02 5.860122e+02     9\n\n\n\n\nCode\n# save(counts_cellsml_all, counts_cellsml_avg, counts_occur, file = \"output-data/MCR-cellcount-dfs\")"
  },
  {
    "objectID": "grazing.html#plot-eukaryote-cells-per-ml",
    "href": "grazing.html#plot-eukaryote-cells-per-ml",
    "title": "Protistan grazing analysis",
    "section": "2.1 Plot eukaryote cells per ml",
    "text": "2.1 Plot eukaryote cells per ml\nFigure 1 reports all eukaryote cells per ml counts from all grazing assay counts..\n\n\nCode\nconc_boxplot <- ggplot(plot_euk_conc, aes(x = NameOrder, \n                                          y = CONCENTRATION, \n                                          group = NameOrder,\n                                          fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    geom_boxplot() + \n    # Do not color by time point\n    geom_jitter(color = \"black\", size = 2, aes(fill = VARIABLE,\n                                          shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21,24)) +\n    scale_fill_manual(values = c(\"#e7298a\", \"#fcbba1\", \"#c6dbef\")) +\n    coord_flip() +\n    scale_y_log10() +\n    # scale_y_log10(limits = c(10,1000), expand = c(0, 0)) +\n    facet_grid(SiteOrder ~ EXP_TYPE, space = \"free\", scale = \"free\") +\n    theme_bw() + \n  theme(axis.text.x = element_text(angle = 0, h = 1, vjust = 1),\n        strip.background = element_blank(),\n        legend.position = \"right\",\n        legend.title = element_blank()) +\n    labs(x = \"\", y = bquote(\"Eukaryote cells \"~mL^-1),\n         title = \"Distribution of all eukaryotic cell counts\")\n\nconc_boxplot\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 39 rows containing non-finite values (stat_boxplot).\n\n\nWarning: Removed 39 rows containing missing values (geom_point).\n\n\n\n\n\nFigure 1: ?(caption)\n\n\n\n\nEukaryote cell concentration (cells/ml) are lower in the background and plume samples compared to vent sites. ~300 cells/ml in background and plume compared to ~1000 cells per ml at the vent sites. These values are also consistent between each vent site (Von Damm and Piccard) and between Bag and IGT samples.\n\nBoxplot represents the median (line in box) and the 1st and 3rd quartiles in the lower and upper hinges, respectively (25th and 75th percentiles). Black data points are outliers from the boxplot. Upper and lower whiskers represent the 1.5 * interquartile ranges. Pink data points are the values contributing to the boxplot (individial counts across replicates and time points.)\n\n\neukCONC is the sum of micro and nano. Because there was a discrepency between the micro and nano cell counts, we plan to combine for most of the analysis. Here we show that the cell concentration across replicate samples was similar throughout experiments. And that the bag versus IGT experiment results were within range of one another.\n\nPlot eukaryote cell concentration over time.\n\n\nCode\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n\ncounts_cellsml_avg$SiteOrder <- factor(counts_cellsml_avg$Site, levels = site_ids, labels = site_fullname)\ncounts_cellsml_avg$NameOrder <- factor(counts_cellsml_avg$Name, levels = vent_ids, labels = vent_fullname)\n\n# Plot trend line of euk cell count for all experiments\ncounts_cellsml_avg %>%\n  filter(VARIABLE == \"eukCONC\") %>%\n  unite(\"Experiment\", NameOrder, IGT_REP, sep = \"-\", remove = FALSE) %>%\n  ggplot(aes(x = TimePoint, y = MEAN, shape = EXP_TYPE, fill = NameOrder)) +\n    geom_path(aes(group = Experiment)) +\n    # geom_errorbar(aes(ymax = (MEAN + SD), ymin = (MEAN - SD)), width = 0.2) +\n    geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n    geom_point(stat = \"identity\", size = 2, aes(shape = EXP_TYPE)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_brewer(palette = \"Paired\") +\n    scale_y_log10() +\n    facet_wrap(SiteOrder ~ EXP_TYPE, scales = \"free\") +\n    theme_classic() + theme(strip.background = element_blank(), \n                            legend.title = element_blank(),\n                            title = element_text(size = 7, face = \"bold\"),\n                            axis.title = element_text(size = 9)) +\n    labs(title = \"Total euk cell counts for each experiment\", y = bquote(\"Average eukaryote cells \"~mL^-1), x = \"Time point\") +\n  guides(fill=guide_legend(override.aes=list(shape=21)))\n\n\n\n\n\n\nnote there is an overall drop in euk cells/ml in the final time point. Especially with the IGT samples. Take this into consideration"
  },
  {
    "objectID": "grazing.html#cells-per-ml-prok",
    "href": "grazing.html#cells-per-ml-prok",
    "title": "Protistan grazing analysis",
    "section": "3.1 Cells per ml (prok)",
    "text": "3.1 Cells per ml (prok)\nVisualize counts\nSummary of prok counts\n\n\nCode\nhead(insitu_proks)\n\n\n                SAMPLE    Site         Name      MEAN         SD        SEM\n1          Piccard-BSW Piccard          BSW  11860.19  1632.7541  1154.5315\n2  Piccard-HotChimlet1 Piccard  HotChimlet1  63184.36   296.8644   209.9148\n3  Piccard-LotsOShrimp Piccard  LotsOShrimp  53878.14 27454.3826 13727.1913\n4        Piccard-Plume Piccard        Plume  51429.13  6531.0163  4618.1259\n5   Piccard-Quakeplume Piccard   Quakeplume  21201.40 12171.4395  8606.5074\n6 Piccard-ShrimpGulley Piccard ShrimpGulley 139593.35 41264.1485 29178.1593\n\n\nCode\n# insitu_proks$Name\ninsitu_proks %>% filter(Name != \"Quakeplume\") %>% \n  mutate(type = case_when(\n  Name == \"BSW\" ~ \"non-vent\",\n  Name == \"Plume\" ~ \"non-vent\",\n  TRUE ~ \"vent\"\n)) %>% \n    # group_by(type) %>% \n  group_by(type, Site) %>% \n      summarize(mean = mean(MEAN),\n            min = min(MEAN),\n            max = max(MEAN))\n\n\n`summarise()` has grouped output by 'type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 5\n# Groups:   type [2]\n  type     Site       mean    min     max\n  <chr>    <chr>     <dbl>  <dbl>   <dbl>\n1 non-vent Piccard  31645. 11860.  51429.\n2 non-vent VD       27184. 16478.  37890.\n3 vent     Piccard 109713. 53878. 238586.\n4 vent     VD       40907.  8816. 111430.\n\n\nFactor site names, etc.\n\n\nCode\ninsitu_proks$Name_order <- factor(insitu_proks$Name, levels = c(\"BSW\", \"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\", \"HotChimlet1\", \"ShrimpGulley\", \"SouthofHotChimlet\", \"SouthofLungSnack\", \"ArrowLoop\", \"Bartizan\", \"Rav1\"), labels = c(\"Background\",\"Plume\", \"Quakeplume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\", \"Hot Chimlet #1\", \"Shrimp Gulley\", \"South of Hot Chimlet\", \"South of LungSnack\", \"Arrow Loop\", \"Bartizan\", \"Ravelin #1\"))\n\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\ninsitu_proks$Site_order <- factor(insitu_proks$Site, levels = site_ids, labels = site_fullname)\nsite_color <- c(\"#264653\", \"#E76F51\")\nnames(site_color) <- site_fullname\n\n\n\n\nCode\nprok_plot <- ggplot(insitu_proks, aes(x = Name_order, y = MEAN)) +\n  geom_errorbar(aes(ymax = (MEAN + SEM), ymin = (MEAN - SEM)), width = 0.2) +\n  geom_point(stat = \"identity\", shape = 23, aes(fill = Site_order), size = 3) +\n  facet_grid(.~ Site_order, space = \"free\", scales = \"free\") +\n  scale_fill_manual(values = site_color) +\n  labs(y = bquote(\"Prokaryote cells \"~mL^-1), x = \"\", title = \"\") +\n  scale_y_log10() +\n  theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())\nprok_plot\n\n\n\n\n\n\nEuk and prok counts\nCombined eukaryote and prokaryote cell counts\n\n\nCode\neuk_prok_ab <- euk_plot + (prok_plot + theme(legend.position = \"none\")) + patchwork::plot_layout(ncol = 1) + patchwork::plot_annotation(tag_levels = \"a\")\n\n\n\n\nCombine with previous MCR cell counts\nCompare in situ prokaryote cell counts from 2020 to previous years\n\n\nCode\nprok_prev <- read.csv(\"input-data/cellcount_previousyr.csv\")\n\nprok_prev_formatted <- prok_prev %>% \n  mutate(VENTSITE = case_when(\n    grepl(\"Piccard\", Site) ~ \"Piccard\",\n    grepl(\"Von Damm\", Site) ~ \"VD\"\n  )) %>% \n  filter(!is.na(YEAR)) %>% #QC of \n  # filter(cells_ml != \"NC\") %>% \n  # filter(cells_ml != \"\") %>% \n  # filter(cells_ml != \"no data\") %>% \n  type.convert(as.is = TRUE, numerals = \"no.loss\") %>%\n  select(YEAR, VENTSITE, NAME = Name, REP=Replicate, CELLML = cells_ml, ORIGSAMPLE = Orig_vent_site_ID, ID_number, Origin)\n\n\nRe-import 2020 data to compare.\n\n\nCode\n# Re-import 2020\nprok <- read.delim(\"input-data/prokINSITU-counts-compiled.txt\")\n# View(prok)\nproks_allyrs <- prok %>% \n  separate(SAMPLE, c(\"VENTSITE\", \"NAME\"), sep = \"-\", remove = FALSE) %>% \n  mutate(YEAR = 2020) %>%\n  select(YEAR, VENTSITE, NAME, REP, CELLML, ORIGSAMPLE = BAC) %>% \n  bind_rows(prok_prev_formatted %>% select(-ID_number, -Origin)) %>% \n  type.convert(as.is = TRUE) %>%\n  # Remove not countable or not data samples:\n  filter(CELLML != \"NC\") %>%\n  filter(CELLML != \"\") %>%\n  filter(CELLML != \"no data\") %>%\n  filter(CELLML != \"not countable\") %>% \n  data.frame\n\n# View(proks_allyrs)\n# View(as.data.frame(unique(proks_allyrs$NAME)))\n\nvent_order <- c(\"BSW\",\"Plume\",\"Quakeplume\",\"NearsummitBeebee\",\"MainOrifice\",\"NearMainOrifice\",\"Rav1\",\"HotChimlet1\",\"HotChimlet\",\"SouthofHotChimlet\",\"NearHotChimlet\",\"HotCracks1\",\"HotCracks2\",\"ShrimpHole\",\"ShrimpHole(X18)\",\"X18\",\"X19\",\"SouthofLungSnack\",\"TwinPeaks\",\"OMT\",\"WhiteCastle\",\"GingerCastle\",\"ArrowLoop\",\"Bartizan\",\"LotsOShrimp\",\"MustardStand\",\"ShrimpButtery\",\"ShrimpCanyon\",\"ShrimpGulley\",\"Shrimpocalypse\",\"ShrimpVegas\")\nvent_names <- c(\"Background\",\"Plume\",\"Quakeplume\",\"Near summit Beebee Vents Mound\",\"Main Orifice\",\"Near Main Orifice\",\"Ravelin #1\",\"Hot Chimlet #1\",\"Hot Chimlet\",\"South of Hot Chimlet\",\"Near Hot Chimlet\",\"Hot Cracks #1\",\"Hot Cracks #2\",\"Shrimp Hole\",\"Shrimp Hole (X-18)\",\"X-18\",\"X-19\",\"South of Lung Snack\",\"Twin Peaks\",\"Old Man Tree\",\"White Castle\",\"Ginger Castle\",\"Arrow Loop\",\"Bartizan\",\"Lots O Shrimp\",\"Mustard Stand\",\"Shrimp Buttery\",\"Shrimp Canyon\",\"Shrimp Gulley\",\"Shrimpocalypse\",\"Shrimp Vegas\")\nproks_allyrs$NAME_ORDER <- factor(proks_allyrs$NAME, levels = vent_order, labels = vent_names)\nproks_allyrs$VENTSITE_ORDER <- factor(proks_allyrs$VENTSITE, levels = c(\"Piccard\", \"VD\"), labels = c(\"Piccard\", \"Von Damm\"))\n\n\nPlot by year.\n\n\nCode\n# pdf(\"compare-across-yr-cellcount-04052021.pdf\", h = 8, w = 7)\nggplot(proks_allyrs, aes(x = NAME_ORDER, y = as.numeric(CELLML), fill = factor(YEAR), shape = VENTSITE_ORDER)) +\n  geom_point(stat = \"identity\", aes(fill = factor(YEAR)), size = 3) +\n  scale_shape_manual(values = c(21,23)) +\n  coord_flip() +\n  facet_grid(VENTSITE_ORDER ~ ., space = \"free\", scales = \"free\") +\n  scale_y_log10() +\n  scale_fill_manual(values = c(\"#1c9099\", \"#ffeda0\", \"#fc4e2a\")) +\n  theme_linedraw() +\n  theme(axis.text = element_text(color = \"black\", size = 10),\n        strip.background = element_blank(),\n        strip.text.y = element_text(color = \"black\", size = 11, hjust = 0, vjust = 1),\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey\")) +\n  labs(y = bquote(\"Cells \"~mL^-1), x = \"\") +\n  guides(fill=guide_legend(override.aes=list(shape=22)))\n\n\n\n\n\nCode\n# dev.off()"
  },
  {
    "objectID": "grazing.html#determine-flp-per-euk-cell",
    "href": "grazing.html#determine-flp-per-euk-cell",
    "title": "Protistan grazing analysis",
    "section": "4.1 Determine FLP per euk cell",
    "text": "4.1 Determine FLP per euk cell\nIsolate euk cell counts with FLPs (comma separated for counts). These need to be separated into rows, use counts_occur data frame from above.\n\n\nCode\n# Select nano and micro counts with FLPs\ncounts_sepflp <- counts_occur %>% \n  filter(!NOTES == \"Discard\") %>% \n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  select(DATE, SAMPLE, EXPID, VOL, MAG, FOV, nanoFLP, microFLP) %>%\n  # Inputs that are comma separated will be split into a new row\n  separate_rows(microFLP, sep = \",\", convert = TRUE) %>%\n  separate_rows(nanoFLP, sep = \",\", convert = TRUE) %>%\n  # Replace NAs with zeroes\n  replace_na(list(microFLP = 0, nanoFLP = 0)) %>% \n  data.frame\n\n\noptional gut check of data table modification\n\n\nCode\n## Check, see FOV 23, separated into rows.\n# View(counts_sepflp %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n# View(counts_occur %>%\n# filter(SAMPLE == \"VD-Rav2\" & EXPID == \"T10-Rep1\"))\n\n\nIsolate counts that are >0, so only eukaryote cells that were observed to have FLPs are included. Then calculate FLP per euk cell by dividing by 1 (each row is a euk cell, based on data transformation above).\n\n\nCode\ncounts_flp <- counts_sepflp %>%\n  select(SAMPLE, EXPID, nano_size = nanoFLP, micro_size = microFLP) %>%\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_FLP\") %>%\n  filter(num_of_FLP > 0) %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>%\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_FLP = sum(num_of_FLP),\n            total_euks_wflp = n(),\n            .groups = \"rowwise\") %>%\n  data.frame\n\nhead(counts_flp)\n\n\n               SAMPLE    EXPID EXP_TYPE IGT_REP   SizeFrac total_FLP\n1 Piccard-LotsOShrimp  T0-Rep3      Bag     Bag  nano_size         3\n2 Piccard-LotsOShrimp T15-Rep3      Bag     Bag micro_size         1\n3 Piccard-LotsOShrimp T15-Rep3      Bag     Bag  nano_size         3\n4 Piccard-LotsOShrimp T20-Rep3      Bag     Bag  nano_size         2\n5       Piccard-Plume  T0-Rep1      Bag     Bag micro_size         2\n6       Piccard-Plume  T0-Rep1      Bag     Bag  nano_size         4\n  total_euks_wflp\n1               2\n2               1\n3               2\n4               1\n5               1\n6               3\n\n\nOUTPUT COLUMNS: (1) total_FLP = sum of FLPs found inside a euk cell (2) total_euks_wflp = number of euks counted with ingested FLP\nRepeat above operation for euk cells without any FLP. Here, subset total number of observations where there was a euk cell without FLP. These need to be counted as euk cell without an FLP.\n\nBelow code repeats process and compiles with other FLP/euk cell data.\n\nRepeat above process for euk cells without FLPs (0 FLP per euk cell needs to be included in overall average).\n\n\nCode\ncounts_flp_compiled <- counts_occur %>% \n  filter(!(NOTES == \"Discard\")) %>% #Discard bad counts\n  filter(!(NOTES == \"DTAF stain prevented counts of FLP, Euks only\")) %>%\n  type.convert(as.is = TRUE) %>% #modify str() for columns\n  select(SAMPLE, EXPID, nano_size = nanoNoFLP, micro_size = microNoFLP) %>% #select non flp\n  pivot_longer(cols = ends_with(\"_size\"), names_to = \"SizeFrac\", values_to = \"num_of_euks\") %>%\n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate\"), sep = \"-\", remove = FALSE) %>%\n  mutate(EXP_TYPE = case_when(\n    grepl(\"IGT\", Replicate) ~ \"IGT\",\n    grepl(\"Rep\", Replicate) ~ \"Bag\"\n  )) %>%\n  mutate(IGT_REP = case_when(\n    EXP_TYPE == \"IGT\" ~ Replicate,\n    EXP_TYPE == \"Bag\" ~ \"Bag\")) %>% \n  # filter(num_of_euks > 0) %>% # Remove observed zero counts\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  summarise(total_euks_noFLP = sum(num_of_euks),\n            .groups = \"rowwise\") %>%\n  # Join with FLP count information\n  ## SAMPLE, EXPID, EXPTYPE, IGTREP, and SizeFrac variables should match\n  left_join(counts_flp) %>% # Join with the counts of FLP per euk cell\n  replace_na(list(total_FLP = 0, total_euks_wflp = 0)) %>% #Replace NAs with zero\n  data.frame\n\n\nJoining, by = c(\"SAMPLE\", \"EXPID\", \"EXP_TYPE\", \"IGT_REP\", \"SizeFrac\")\n\n\nExtract total eukaryote cell value by adding across nano and micro. Then combine the nano and micro cell counts.\n\n\nCode\ncounts_flp_compiled_all <- counts_flp_compiled %>% \n  # Exclude size fraction:\n  group_by(SAMPLE, EXPID, EXP_TYPE, IGT_REP) %>%\n  summarise(total_euks_noFLP = sum(total_euks_noFLP),\n            total_FLP = sum(total_FLP), \n            total_euks_wflp = sum(total_euks_wflp),\n            .groups = \"rowwise\") %>% \n  add_column(SizeFrac = \"total_euks\") %>% #Add SizeFrac column\n  bind_rows(counts_flp_compiled) %>% # Combine back with flp compiled list\n  data.frame"
  },
  {
    "objectID": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "href": "grazing.html#calculate-flp-per-euk-cell-calculation",
    "title": "Protistan grazing analysis",
    "section": "4.2 Calculate FLP per euk cell calculation",
    "text": "4.2 Calculate FLP per euk cell calculation\nFirst need to import and compile with metadata to get exact timing of experiments.\n\n\nCode\nmetadata <- read.delim(\"input-data/flp-exp-metadata-compiled.txt\")\nexp_metadata <- read.csv(\"input-data/flp_exp_metadata.csv\")\n\n\nAdd metadata\n\n\nCode\ncounts_flp_calcs_all <- counts_flp_compiled_all %>% \n  # Add in metadata\n  # IGTXb are replicate counts, include them as replicates!\n  separate(EXPID, c(\"TimePoint\", \"REP\"), sep = \"-\", remove = FALSE) %>% mutate(\n    REP = ifelse(grepl(\"IGT5b\", REP), \"IGT5\", REP),\n    REP = ifelse(grepl(\"IGT4b\", REP), \"IGT4\", REP),\n    REP = ifelse(grepl(\"Bag\", EXP_TYPE), \"Bag\", REP)) %>% \n  left_join(metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"TimePoint\" = \"TimePoint\", \"REP\" = \"REP\")) %>% \n  left_join(exp_metadata, by = c(\"SAMPLE\" = \"SAMPLE\", \"REP\" = \"REP\")) %>% \n  separate(SAMPLE, c(\"Site\", \"Name\"), sep = \"-\", remove = FALSE) %>%\n  separate(EXPID, c(\"TimePoint\", \"Replicate_ID\"), sep = \"-\", remove = FALSE) %>%\n  ## Treat repeated IGT counts completely separate\n  # group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, IGT_REP, SizeFrac) %>%\n  ## Treat repeated IGT counts as replicates (e.g., IGT4b and IGT4 == IGT4)\n  group_by(SAMPLE, Site, Name, EXPID, TimePoint, Replicate_ID, EXP_TYPE, REP, SizeFrac) %>%\n  # FLPperEuk is the total FLP divided by the total number of euk cells counted\n  mutate(FLPperEuk = total_FLP/(sum(total_euks_noFLP, total_euks_wflp))) %>%\n  unite(\"Experiment\", Name, REP, sep = \"-\", remove = FALSE) %>%\n  data.frame\n\n\n\nCOLS: Timepoint, Minutes = time point label, actual incubated minutes\n\n\nCOLS: Replicate_ID, REP, and IGT_REP = full replicate identified for IGTs and Bags, designation of biological replicates, and designation of technical replicates for IGT experiments"
  },
  {
    "objectID": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "href": "grazing.html#calculate-linear-regression-to-obtain-slope",
    "title": "Protistan grazing analysis",
    "section": "4.3 Calculate linear regression to obtain slope",
    "text": "4.3 Calculate linear regression to obtain slope\nUse lm() function in R to calculate linear regression for each experiment. Slope equates to grazing rate. Function inputs the FLP per euk cell data, performs regression and then adds a column for slope and r-squared values.\nFunction to estimate slope. Uses broom and tidymodels, then extracts slope.\n\n\nCode\ncalculate_lm <- function(df){\n  regression_1 <- df %>%\n  type.convert(as.is = TRUE) %>%\n  ## Keep technical replicates separate for IGTs\n  # group_by(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac) %>%\n  # nest(-SAMPLE, -Site, -Experiment, -Name, -IGT_REP, -SizeFrac) %>%\n  ## Combine technical replicates for IGTs\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         tidied = map(lm_fit, tidy)) %>% \n  unnest(tidied) %>% \n  # select(SAMPLE, Site, Experiment, Name, IGT_REP, SizeFrac, term, estimate) %>%\n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, term, estimate) %>% \n  pivot_wider(names_from = term, values_from = estimate) %>% \n  data.frame\n  # Reset column names\n  colnames(regression_1) <- c(\"SAMPLE\", \"Site\", \n                              \"Experiment\", \"Name\", \"REP\",\n                              \"SizeFrac\", \"INTERCEPT\", \"SLOPE\")\n  # Repeat broom model to get R2\n  out_regression <- df %>%\n  group_by(SAMPLE, Site, Experiment, Name, REP, SizeFrac) %>%\n  nest(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac) %>%\n  mutate(lm_fit = map(data, ~lm(FLPperEuk ~ Minutes, data = .)),\n         glanced = map(lm_fit, glance)) %>% \n  unnest(glanced) %>% \n  select(SAMPLE, Site, Experiment, Name, REP, SizeFrac, r.squared) %>% \n  right_join(regression_1) %>% \n  right_join(df) %>% \n  data.frame\n  out_regression$SITE <- factor(out_regression$Site, levels = c(\"VD\", \"Piccard\"))\n  out_regression$TYPE <- factor(out_regression$EXP_TYPE, levels = c(\"Bag\", \"IGT\"))\n  return(out_regression)\n}\n\n\n\nNote that an error may occur when running the below function. This is due to the fact that some experiments did not have replicates.\n\nApply to all data to obtain slope.\n\n\nCode\ncalcs_wslope_regression <- calculate_lm(counts_flp_calcs_all)\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\nWarning in summary.lm(x): essentially perfect fit: summary may be unreliable\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\ngut check linear regression work. Use below commands out to recalculate one linear regression. Above function uses the nest() capability of tidyverse. Below, one experiment is subset to check the value.\n\n\nCode\n# Extract only plume-bag experiment from VD\n# tmp_plume <- filter(counts_flp_calcs_all, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\")\n# tmp_plume # View\n# Perform linear regression\n# lm_out <- lm(FLPperEuk ~ Minutes, data = tmp_plume)\n# # Check output\n# summary(lm_out)\n# lm_out$coefficients #Intercept=intercept #Minutes = SLOPE\n# # Compare with nested function output\n# filter(calcs_wslope_regression, Experiment == \"Plume-Bag\") %>% filter(Site == \"VD\") %>% filter(SizeFrac == \"total_euks\") %>% head\n\n\n\nPlot linear regression trend\nPlot all bag experiments with estimated slope.\n\n\nCode\nunique(calcs_wslope_regression$SITE)\n\n\n[1] Piccard VD     \nLevels: VD Piccard\n\n\n\n\nCode\n# | fig-width: 7\n# | fig-height: 8\ncalcs_wslope_regression %>% \n  filter(SizeFrac == \"total_euks\") %>%\n  mutate(VENT_IDS = factor(Name, levels = vent_ids, labels = vent_fullname)) %>% \n  mutate(SITE_ORDER = factor(SITE, levels = site_ids, labels = site_fullname)) %>%\n  # Filter out IGT samples for now\n  # filter(TYPE != \"IGT\") %>%\n  unite(EXPERIMENT, SITE_ORDER, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = SITE_ORDER, shape = TYPE)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = SITE_ORDER)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = site_color) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 42, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\nData points represent the FLP per euk cells (based on total eukaryote cells counts). Y-axis represents the duration of incubation (in minutes). The dashed purple line reprents the slope and intercept of the experiment."
  },
  {
    "objectID": "grazing.html#remove-igt-tf-time-points.",
    "href": "grazing.html#remove-igt-tf-time-points.",
    "title": "Protistan grazing analysis",
    "section": "4.4 Remove IGT Tf time points.",
    "text": "4.4 Remove IGT Tf time points.\nIGT experiment results appear to have bottle effect, especially in the final time point. Additionally, due to the lack of biological replicates in the IGT experiments, technical replicates are treated as biological replicates in the regression below.\n\n\nCode\nIGT_lm_woTf <- counts_flp_calcs_all %>% \n  # Select only IGT experiments with total eukaryotes, remove Tf (T3)\n  filter(SizeFrac == \"total_euks\") %>% \n  filter(EXP_TYPE == \"IGT\" & !(TimePoint == \"T3\")) %>% \n  add_column(IGT_cor = \"rm Tf\") %>% \n  data.frame\n\n# Recalculate lm(), keep replicates separate\nigt_regression_noTf <- calculate_lm(IGT_lm_woTf) # Recalculate\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\nAll elements of `...` must be named.\nDid you want `data = c(-SAMPLE, -Site, -Experiment, -Name, -REP, -SizeFrac)`?\n\n\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\nJoining, by = c(\"SAMPLE\", \"Site\", \"Experiment\", \"Name\", \"REP\", \"SizeFrac\")\n\n\nPlot IGT grazing experiments with newly calculated grazing effect.\n\n\nCode\nigt_regression_noTf %>% \n  # filter(SizeFrac == \"total_euks\") %>% \n  # filter(TYPE != \"IGT\") %>% \n  mutate(SITE_ORDER = factor(SITE, levels = site_ids, labels = site_fullname)) %>%\n  unite(EXPERIMENT, SITE, Experiment, sep = \" \", remove = FALSE) %>% \n  ggplot(aes(x = Minutes, y = FLPperEuk, fill = SITE_ORDER, shape = TYPE, group = Experiment)) +\n  geom_abline(aes(slope = SLOPE, intercept = INTERCEPT), color = \"black\", linetype = \"dashed\", size = 1) +\n  geom_point(stat = \"identity\", color = \"black\", \n             size = 2, aes(shape = TYPE, fill = SITE_ORDER)) +\n  scale_shape_manual(values = c(24)) +\n  scale_fill_manual(values = site_color) +\n  labs(x = \"Minutes\", y = bquote(\"FLP\"~eukaryote^-1), title = \"Grazing experiment regression\") +\n  facet_wrap(. ~ EXPERIMENT) +\n  # Report r.squared\n  geom_text(aes(x = 5, y = max(FLPperEuk), label = paste(round(SLOPE, 4))), \n            vjust = 1, hjust = 0, size = 3) +\n  theme_bw() + \n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"black\", size = 7),\n                     legend.title = element_blank(),\n                     legend.position = \"right\")\n\n\n\n\n\n\nresults are more consistent across experiments."
  },
  {
    "objectID": "grazing.html#compile-and-save-grazing-experiment-results",
    "href": "grazing.html#compile-and-save-grazing-experiment-results",
    "title": "Protistan grazing analysis",
    "section": "4.5 Compile and save grazing experiment results",
    "text": "4.5 Compile and save grazing experiment results\n\n\nCode\ncalcs_wslope_regression_update <- calcs_wslope_regression %>% \n  filter(TYPE != \"IGT\") %>% \n  bind_rows(igt_regression_noTf %>% select(-IGT_cor)) %>% \n  data.frame\n\n# Factor\nvent_ids <- c(\"BSW\",\"Plume\", \"Shrimpocalypse\", \"LotsOShrimp\", \"X18\", \"OMT\", \"Rav2\", \"MustardStand\", \"ShrimpHole\")\nvent_fullname <- c(\"Background\",\"Plume\", \"Shrimpocalypse\", \"Lots 'O Shrimp\", \"X-18\", \"Old Man Tree\", \"Ravelin #2\", \"Mustard Stand\", \"Shrimp Hole\")\nsite_ids <- c(\"VD\", \"Piccard\")\nsite_fullname <- c(\"Von Damm\", \"Piccard\")\n# Factor for shipboard\ncalcs_wslope_regression_update$SiteOrder <- factor(calcs_wslope_regression_update$Site, levels = site_ids, labels = site_fullname)\ncalcs_wslope_regression_update$NameOrder <- factor(calcs_wslope_regression_update$Name, levels = vent_ids, labels = vent_fullname)\n\n# View(calcs_wslope_regression_update)\ncalcs_wslope_regression_update %>%\n  select(SiteOrigin, SiteOrder, NameOrder, Experiment, SizeFrac, r.squared, INTERCEPT, SLOPE) %>% distinct()\n\n\n   SiteOrigin SiteOrder      NameOrder          Experiment   SizeFrac\n1        Vent   Piccard Lots 'O Shrimp     LotsOShrimp-Bag total_euks\n2       Plume   Piccard          Plume           Plume-Bag total_euks\n3        Vent   Piccard Shrimpocalypse  Shrimpocalypse-Bag total_euks\n4  Background  Von Damm     Background             BSW-Bag total_euks\n5        Vent  Von Damm  Mustard Stand    MustardStand-Bag total_euks\n6       Plume  Von Damm          Plume           Plume-Bag total_euks\n7        Vent  Von Damm     Ravelin #2            Rav2-Bag total_euks\n8        Vent  Von Damm    Shrimp Hole      ShrimpHole-Bag total_euks\n9        Vent  Von Damm           X-18             X18-Bag total_euks\n10       Vent   Piccard Lots 'O Shrimp     LotsOShrimp-Bag micro_size\n11       Vent   Piccard Lots 'O Shrimp     LotsOShrimp-Bag  nano_size\n12      Plume   Piccard          Plume           Plume-Bag micro_size\n13      Plume   Piccard          Plume           Plume-Bag  nano_size\n14       Vent   Piccard Shrimpocalypse  Shrimpocalypse-Bag micro_size\n15       Vent   Piccard Shrimpocalypse  Shrimpocalypse-Bag  nano_size\n16 Background  Von Damm     Background             BSW-Bag micro_size\n17 Background  Von Damm     Background             BSW-Bag  nano_size\n18       Vent  Von Damm  Mustard Stand    MustardStand-Bag micro_size\n19       Vent  Von Damm  Mustard Stand    MustardStand-Bag  nano_size\n20      Plume  Von Damm          Plume           Plume-Bag micro_size\n21      Plume  Von Damm          Plume           Plume-Bag  nano_size\n22       Vent  Von Damm     Ravelin #2            Rav2-Bag micro_size\n23       Vent  Von Damm     Ravelin #2            Rav2-Bag  nano_size\n24       Vent  Von Damm    Shrimp Hole      ShrimpHole-Bag micro_size\n25       Vent  Von Damm    Shrimp Hole      ShrimpHole-Bag  nano_size\n26       Vent  Von Damm           X-18             X18-Bag micro_size\n27       Vent  Von Damm           X-18             X18-Bag  nano_size\n28       Vent   Piccard Shrimpocalypse Shrimpocalypse-IGT3 total_euks\n29       Vent  Von Damm   Old Man Tree            OMT-IGT4 total_euks\n30       Vent  Von Damm     Ravelin #2           Rav2-IGT4 total_euks\n31       Vent  Von Damm     Ravelin #2           Rav2-IGT5 total_euks\n     r.squared  INTERCEPT        SLOPE\n1  0.660252577  0.3517002 -0.007605829\n2  0.028109981  0.7435088  0.005362856\n3  0.134500775  0.7414202  0.015686872\n4  0.016339803  0.3381071  0.002958889\n5  0.679501856  0.5316532 -0.005445545\n6  0.152459998  0.4565982  0.005274231\n7  0.003588551  0.9680181  0.003470217\n8  0.002436342  0.8984156 -0.001967253\n9  0.007917377  0.3937265  0.001744429\n10 0.000000000  0.5000000           NA\n11 0.723950257  0.3415221 -0.007467037\n12 0.031027392  1.8447712 -0.021241830\n13 0.134388231  0.5657210  0.009146535\n14 0.016488447  1.8971061 -0.016881029\n15 0.219942841  0.5793676  0.022967165\n16 0.289513467  1.4518382 -0.027181373\n17 0.015152403  0.2934706  0.002856863\n18 0.000000000  0.0000000           NA\n19 0.679997859  0.5291779 -0.004985856\n20 0.098467998  0.7841090  0.019766939\n21 0.019373495  0.4513702  0.002263909\n22 0.696359782 -1.7147488  0.394651540\n23 0.001444937  0.9392498  0.002011385\n24 0.233424455  2.2875458 -0.092124542\n25 0.002819273  0.9370957  0.002424242\n26 0.302757291  0.6709130  0.036093418\n27 0.018916716  0.3041782  0.002196051\n28 0.661389551  0.0215311  0.016794258\n29 0.445940823  0.2441665  0.014510943\n30 0.872857411  0.1272183  0.015395240\n31 0.054430146  0.2692487  0.001603035\n\n\nCode\nwrite.csv(calcs_wslope_regression_update, file = \"output-data/estimated-slopes-grazingexp.csv\")"
  },
  {
    "objectID": "grazing.html#bag-grazing-experiment-controls",
    "href": "grazing.html#bag-grazing-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "5.1 Bag grazing experiment controls",
    "text": "5.1 Bag grazing experiment controls\n\n\nCode\ndtaf_avg %>% \n  filter(Site != \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site != \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#igt-experiment-controls",
    "href": "grazing.html#igt-experiment-controls",
    "title": "Protistan grazing analysis",
    "section": "5.2 IGT experiment controls",
    "text": "5.2 IGT experiment controls\nRepeat for IGT experiments.\n\n\nCode\ndtaf_avg %>% \n  filter(Site == \"IGT\") %>% \n  ggplot(aes(x = TimePoint, y = Avg_cellsperml, fill = Name, shape = Site)) +\n  geom_rect(data = filter(dtaf_avg, TimePoint == \"T0\", Site == \"IGT\"), aes(\n                                           ymin = (Avg_cellsperml-(0.1*Avg_cellsperml)),\n                                           ymax = (Avg_cellsperml+(0.1*Avg_cellsperml))), color = NA, alpha = 0.4, xmin = 0, xmax = 6, fill = \"black\") +\n  geom_line(aes(group = Name)) +\n  geom_point(stat = \"identity\", aes(shape = Site, fill = Name), size = 2) +\n  # scale_fill_manual(values = c(\"black\",\"#9970ab\", \"#5aae61\")) +\n  facet_wrap(Name ~ Site) +\n  scale_y_log10() +\n  theme_bw() + theme(strip.background = element_blank(), \n                          legend.title = element_blank(),\n                     axis.text = element_text(size = 10, color = \"black\"),\n                          title = element_text(size = 10, face = \"bold\"),\n                          axis.title = element_text(size = 9)) +\n  labs(title = \"FLP counts for controls\", y = bquote(\"Log FLP \"~mL^-1), x = \"Time point\")"
  },
  {
    "objectID": "grazing.html#plot-flpgrazer-minute",
    "href": "grazing.html#plot-flpgrazer-minute",
    "title": "Protistan grazing analysis",
    "section": "6.1 Plot FLP/grazer /minute",
    "text": "6.1 Plot FLP/grazer /minute\n\n\nCode\n# svg(\"\", h =, w = )\ngrazing_min_plot <- table_grazerate_wflp %>% \n  ggplot(aes(y = GRAZE_RATE, x = VENTORDER, shape = EXP_TYPE, fill = FIELDORDER)) +\n  geom_jitter(stat = \"identity\", aes(shape = EXP_TYPE, fill = FIELDORDER),\n              color = \"black\", size = 3, width = 0.3) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_fill_manual(values = site_color) +\n  facet_grid(.~FIELDORDER, space = \"free\", scales = \"free\") +\n  # coord_flip() +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n       shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"Mean FLP \" ~grazer^-1 ~min^-1))\n# dev.off()\ngrazing_min_plot\n\n\n\n\n\nAmend table with eukaryote and prokaryote estimated biomass.\n\n\nCode\n# Subset the average in situ prok cells/ml for non-background samples\ntmp <- filter(insitu_proks, Name != \"BSW\", Name != \"Plume\") %>% select(MEAN)\navg_insitu <- mean(tmp$MEAN)\n# head(insitu_proks)\n\n# Add to master table with data\ntable_grazerate_wflp_wprok <- insitu_proks %>% \n  select(Site = SAMPLE, Prok_conc = MEAN, Prok_sem = SEM) %>% \n  right_join(table_grazerate_wflp) %>% \n  mutate(Prok_conc = ifelse(is.na(Prok_conc), avg_insitu, Prok_conc)) %>% \n  data.frame\n\n\nJoining, by = \"Site\"\n\n\nCode\ntable_grazerate_wflp_wprok_weuk <- plot_euk_format %>% \n  select(Name = NameOrder, FIELD = SiteOrder, euk_conc = avg_conc, EXP_TYPE, euk_conc_sem = SEM_conc) %>%\n  right_join(table_grazerate_wflp_wprok) %>% \n  select(FIELD, NAME = Name, EXP = EXP_TYPE, SAMPLE = Site, RATE_min = GRAZE_RATE, FLP_ml = FLP_conc, PROK_ml = Prok_conc, PROK_sem = Prok_sem, EUK_ml = euk_conc, EUK_sem = euk_conc_sem, TimePoints, EXP_REPS, EXP_VOL,  CTRL_REPS, CTRL_VOL) %>%\n  data.frame\n\n\nJoining, by = c(\"Name\", \"FIELD\", \"EXP_TYPE\")\n\n\nDescription of variables above:\n\nFIELD - vent location\nNAME - name of vent site, or plume/background\nEXP - experiment type, bag or IGT\nSAMPLE - vent site\nRATE_MIN - FLPs per grazer per minute (SLOPE of best fitline)\nFLP_ml - FLP concentration at T0\nProk_ml, sem - concentration and standard mean error of concentration of prokaryotes\nEuk_ml, sem - concentration and standard mean error of concentration of eukaryotes."
  },
  {
    "objectID": "grazing.html#carbon-biomass",
    "href": "grazing.html#carbon-biomass",
    "title": "Protistan grazing analysis",
    "section": "7.1 Carbon biomass",
    "text": "7.1 Carbon biomass\nReferences for estimating biovolume Pernice, M.C., Forn, I., Gomes, A., Lara, E., Alonso-Sáez, L., Arrieta, J.M., et al. (2015) Global abundance of planktonic heterotrophic protists in the deep ocean. ISME J 9: 782–792.\n\n\nCode\n# Import manual biovolume measurements\nbiov <- read.delim(\"input-data/biovol-euk-12-10-2020.txt\")\nhead(biov)\n\n\n  EXP VENT_BSW      h      d\n1 IGT     vent 30.077 25.764\n2 IGT     vent 89.582 10.000\n3 Bag      BSW 14.595  8.036\n4 Bag      BSW 12.480  8.982\n5 Bag     vent  9.218  3.120\n6 IGT     vent 17.255  9.986\n\n\nCode\n# Calculate volume\nbiov_calc <- biov %>% \n  mutate(SizeFrac = case_when(\n    h >= 20 ~ \"micro\",\n    TRUE ~ \"nano\")) %>% \n  mutate(Volume = ((pi/6) * (d^2) * d)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999\n  mutate(pgC_cell = (0.216 * (Volume^0.939))) %>% # Calculate Cell biomass in pg C per cell # Menden-Deuer and Lessard 2000\n  data.frame\n# View(biov_calc)\nbiov_calc\n\n\n   EXP VENT_BSW      h      d SizeFrac     Volume     pgC_cell\n1  IGT     vent 30.077 25.764    micro 8954.44130 1110.2426245\n2  IGT     vent 89.582 10.000    micro  523.59878   77.1957618\n3  Bag      BSW 14.595  8.036     nano  271.71800   41.6956679\n4  Bag      BSW 12.480  8.982     nano  379.41786   57.0486460\n5  Bag     vent  9.218  3.120     nano   15.90239    2.9015292\n6  IGT     vent 17.255  9.986     nano  521.40274   76.8917043\n7  Bag     vent 41.153 21.000    micro 4849.04826  624.1445904\n8  IGT     vent 10.282  4.136     nano   37.04591    6.4194942\n9  IGT     vent 29.776 25.852    micro 9046.50993 1120.9583343\n10 IGT     vent 10.991  4.000     nano   33.51032    5.8424695\n11 Bag     vent 14.333  2.000     nano    4.18879    0.8290772\n12 Bag     vent 36.164  3.000    micro   14.13717    2.5980292\n13 Bag      BSW 16.206 14.924     nano 1740.42111  238.4669404\n14 Bag      BSW  7.000  7.000     nano  179.59438   28.2640658\n15 Bag     vent 10.069  5.000     nano   65.44985   10.9544849\n\n\nCode\nmin(biov_calc$Volume)\n\n\n[1] 4.18879\n\n\nCode\nmax(biov_calc$Volume)\n\n\n[1] 9046.51\n\n\nCode\nmean((biov_calc %>% filter(SizeFrac == \"nano\"))$Volume)\n\n\n[1] 324.8651\n\n\nCode\nmean((biov_calc %>% filter(SizeFrac == \"micro\"))$Volume)\n\n\n[1] 4677.547\n\n\nCode\nmean((biov_calc %>% filter(SizeFrac == \"nano\"))$pgC_cell)\n\n\n[1] 46.93141\n\n\nCode\nmean((biov_calc %>% filter(SizeFrac == \"micro\"))$pgC_cell)\n\n\n[1] 587.0279\n\n\n\nVolume is reported as um^3\n\n\n\nCode\n# Volume by experiment type\nbiov_calc %>% \n  group_by(EXP) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  EXP     VOL     C\n  <chr> <dbl> <dbl>\n1 Bag    836.  112.\n2 IGT   3186.  400.\n\n\nCode\n# Volume by euk size\nbiov_calc %>% \n  group_by(SizeFrac) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  SizeFrac   VOL     C\n  <chr>    <dbl> <dbl>\n1 micro    4678. 587. \n2 nano      325.  46.9\n\n\nCode\n# Volume by site\nbiov_calc %>% \n  group_by(VENT_BSW) %>% summarise(VOL = mean(Volume), C = mean(pgC_cell))\n\n\n# A tibble: 2 × 3\n  VENT_BSW   VOL     C\n  <chr>    <dbl> <dbl>\n1 BSW       643.  91.4\n2 vent     2188. 276. \n\n\nCode\n# head(biov_calc)\neuk_vol <- mean(biov_calc$Volume);euk_vol # in um^3\n\n\n[1] 1775.759\n\n\nCode\neuk_carbon <- mean(biov_calc$pgC_cell); euk_carbon # in pg C per cell\n\n\n[1] 226.9636\n\n\nCode\neuk_carbon_min <- min(biov_calc$pgC_cell); euk_carbon_min\n\n\n[1] 0.8290772\n\n\nCode\neuk_carbon_max <- max(biov_calc$pgC_cell); euk_carbon_max\n\n\n[1] 1120.958\n\n\nCode\n# euk_carbon\n\n\nAvg euk biomass pg C per individual cell == {r}euk_carbon"
  },
  {
    "objectID": "grazing.html#compare-carbon-biomass-with-literature",
    "href": "grazing.html#compare-carbon-biomass-with-literature",
    "title": "Protistan grazing analysis",
    "section": "7.2 Compare carbon biomass with literature",
    "text": "7.2 Compare carbon biomass with literature\nLIKELY REMOVE ALL OF THIS - THIS IS CIRCULAR MATH!\nCompare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10^7 µm^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell.\nImport the heterotroph species volume and carbon content to compare to my measured values.\n\n\nCode\n# Hu-measured\nrange(biov_calc$Volume)\n\n\n[1]    4.18879 9046.50993\n\n\nCode\nrange(biov_calc$pgC_cell)\n\n\n[1]    0.8290772 1120.9583343\n\n\nCode\nc_prev <- read.delim(\"input-data/md-lessard-2000.txt\") # Table 2, heterotrophs only\n# c_prev\n# combine and plot\ncarbon_compare <- c_prev %>% \n  add_column(source = \"Menden-Deuer Lessard\") %>% \n  select(source, Volume = vol, pgC_cell) %>% \n  rbind(biov_calc %>% add_column(source = \"MCR\") %>% select(source, Volume, pgC_cell)) %>% \n    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +\n      geom_point(aes(fill = source), shape = 23, color = \"black\", size = 3) +\n      scale_y_log10() + scale_x_log10() +\n      labs(title = \"Compare literature to measured cell volume & C content\",\n           x = bquote(\"Volume\" ~µm^-3),\n           y = bquote(\"pg C\" ~cell^-1)) +\n      theme_bw() + theme(legend.title = element_blank(),\n                         axis.title = element_text(size = 14),\n                         axis.text = element_text(size = 14),\n                         legend.text = element_text(size = 14))\n\ncarbon_compare\n\n\n\n\n\nCode\neuk_carbon_lit_mean <- mean(c_prev$pgC_cell)\neuk_carbon_lit_min <- min(c_prev$pgC_cell)\neuk_carbon_lit_max <- max(c_prev$pgC_cell)\n\n\nUpon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall.\nFind lowest estimates or protist carbon, benthic estimates, and others? How does it compare to my measurements?\n\nCarbon biomass for prokaryotes\nBelow adding in biomass estimates from prokaryotes and protists.\n\n\nCode\nbac_carbon_ug <- (86)*(1.00E-9) # From Derived from Morono et al. 2011 \n# bac_carbon_ug\nbac_carbon_ug_2 <- (173)*(1.00E-9) # Derived from McNichol et al. 2018; LOFERER-KRO ̈ ßBACHER, J. KLIMA & R. PSENNER 1998\n# table_wcalcs\n\n\nAmend all to table Incorporate calculations that include biomass of population and ug C consumed. For rate measurements, only incorporate the Morono et al. 2011 biomass for prokaryotes. This way it is on the lower end and is comparable to Gorda Ridge work.\n\n\nCode\nbsw <- c(\"Plume\", \"Background\")\n\ntable_wcalcs_biomass <- table_wcalcs %>% \n  add_column(euk_C_ug_Hu = (euk_carbon / (1.00E+06))) %>% # Convert to ug from pg\n  add_column(euk_C_ug_lit = (euk_carbon_lit_mean / (1.00E+06))) %>% # literature\n  add_column(bac_C_ug = bac_carbon_ug) %>% \n  add_column(bac_C_ug_2 = bac_carbon_ug_2) %>%\n  # Grazing rate in ug C per bac per day\n  mutate(RATE_ugCbac_pergrazer_perday = (RATE_hr * 24 * bac_C_ug), # Grazing rate as ug C per grazer per day\n         # % of cell carbon per day\n         SPEC_INGESTION_RATE = (RATE_ugCbac_pergrazer_perday / euk_C_ug_Hu),\n         SPEC_INGESTION_RATE_lit = (RATE_ugCbac_pergrazer_perday / euk_C_ug_lit),\n         Prok_biomass = PROK_ml * bac_carbon_ug,\n         Euk_biomass_Hu = EUK_ml * euk_C_ug_Hu,\n         Euk_biomass_lit = EUK_ml * euk_C_ug_lit,\n         Prok_biomass_L = PROK_ml * bac_carbon_ug * 1000,\n         Euk_biomass_Hu_L = EUK_ml * euk_C_ug_Hu * 1000,\n         Euk_biomass_lit_L = EUK_ml * euk_C_ug_lit * 1000,\n         # Repeat with SEM values\n         Prok_biomass_sem = PROK_sem * bac_carbon_ug,\n         Euk_biomass_Hu_sem = EUK_sem * euk_C_ug_Hu,\n         Euk_biomass_lit_sem = EUK_sem * euk_C_ug_lit,\n         Prok_biomass_sem_L = PROK_sem * (bac_carbon_ug* 1000),\n         Euk_biomass_Hu_sem_L = EUK_sem * (euk_C_ug_Hu * 1000),\n         Euk_biomass_lit_sem_L = EUK_sem * (euk_C_ug_lit * 1000)) %>% \n  type.convert(as.is = TRUE) %>%\n  mutate(detected = case_when(\n    RATE_min < 0 ~ \"Not detected\",\n    TRUE ~ \"Detected\")) %>% \n  mutate(type = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ paste(\"Vent\", EXP, sep=\"-\")\n  )) %>% \n  mutate(GRAZE_RATE = case_when(\n    RATE_min < 0 ~ 0,\n    TRUE ~ RATE_min\n  )) %>% \n  mutate(type_site = case_when(\n    NAME %in% bsw ~ NAME,\n    TRUE ~ \"Vent\"\n  )) %>%\n  data.frame\n# View(table_wcalcs_biomass)\n\n\n\nVolume is reported as um^3\n\n\nGrazing rate column == FLP per minute consumed\nGrazing effect hr == cells per ml per hr"
  },
  {
    "objectID": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "href": "grazing.html#amend-table-with-bounded-carbon-estimates",
    "title": "Protistan grazing analysis",
    "section": "7.3 Amend table with ‘bounded’ carbon estimates",
    "text": "7.3 Amend table with ‘bounded’ carbon estimates\nAlso make a “bounded” table that demonstrates the ug C consumed in the context of McNichol et al.\n\n\nCode\n# G = number of cells grazed during experiment duration\ntable_wcalcs_biomass_bounded <- table_wcalcs_biomass %>% \n  add_column(fgC_cell = 86) %>% # Add in Morono et al. 2011 value\n  mutate(\n    # cells_consumed_perday = (G / 1), # Rate of cells consumed * in situ prok, per day\n    fgC_ml_perday = (GRAZING_EFFECT_day * fgC_cell), # Convert cell amount to fg C\n    ugC_L_perday = (fgC_ml_perday * (1e-09) * 1000), # Convert to ug C per L\n    lower_mcnichol = 100*(ugC_L_perday / 17.3),\n    upper_mcnichol = 100*(ugC_L_perday / 321.4)\n  ) %>% \n  data.frame\n\n\n\n\nCode\n# head(table_wcalcs_biomass_bounded)\n# View(table_wcalcs_biomass_bounded)\n# write_delim(table_wcalcs_biomass_bounded, file = \"output-data/table-wcalc.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "grazing.html#function-to-plot-grazing-results",
    "href": "grazing.html#function-to-plot-grazing-results",
    "title": "Protistan grazing analysis",
    "section": "12.1 Function to plot grazing results",
    "text": "12.1 Function to plot grazing results\n\n\nCode\nconc_rate_plot_mcr <- function(df, var, sem){\n  df %>%\n    filter(Variable == var) %>%\n    filter(SEM_variable == sem) %>%\n    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD)) +\n    geom_errorbar(aes(ymax = (Value + SEM), ymin = (Value - SEM)),\n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(shape = EXP, fill = FIELD),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 23)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\")) +\n    facet_wrap(VARIABLE_ORDER ~ ., scales = \"free\",\n               strip.position = c(\"left\"), labeller = label_parsed) +\n    scale_y_log10() +\n    # scale_y_log10(labels = function(x) format(x, scientific = TRUE)) +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(),\n          axis.line = element_line(colour = \"black\"),\n          axis.text.x = element_text(color=\"black\", size = 11,\n                                     angle = 45, hjust = 1, vjust = 1),\n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 14),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = \"\")\n}\n\n\n\n\nCode\n# conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"Prok_biomass_L\", \"Prok_biomass_sem_L\")\n\n# conc_rate_plot_mcr(biomass_rate_plot, \"Euk_biomass_Hu_L\", \"Euk_biomass_Hu_sem_L\")\n\n\n\n\nCode\n# scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +\n# head(biomass_rate_plot)\n# unique(biomass_rate_plot$FIELD)\ngrazing_rate <- biomass_rate_plot %>% \n  type.convert(as.is = TRUE) %>%\n    filter(Variable == \"GRAZING_EFFECT_hr\") %>%\n    filter(SEM_variable == \"GRAZING_EFFECT_hr_min\" | SEM_variable == \"GRAZING_EFFECT_hr_max\") %>% \n    pivot_wider(names_from = SEM_variable, values_from = SEM) %>%\n    mutate(NAME_ORDER = factor(NAME, levels = vent_fullname)) %>% \n    mutate(FIELD_ORDER = factor(FIELD, levels = site_fullname)) %>% \n    ggplot(aes(y = Value, x = NAME_ORDER, shape = EXP, fill = FIELD_ORDER)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(shape = EXP, fill = FIELD_ORDER),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = site_color) +\n    facet_grid(.~FIELD_ORDER, space = \"free\", scales = \"free\") +\n    # facet_wrap(. ~ FIELD_ORDER, scales = \"free\", \n    #            labeller = label_parsed) +\n    theme_minimal() + \n    # coord_flip() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 12, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 12),\n          axis.title =element_text(color=\"black\", size = 12),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 12),\n          strip.text.x = element_blank()) +\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"Cells consumed \" ~ml^-1 ~hr^-1))\n##\ngrazing_rate + scale_y_log10(limits = c(1,1e4))\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\nWarning: Removed 1 rows containing missing values (geom_point)."
  },
  {
    "objectID": "grazing.html#log-scale-y-axis",
    "href": "grazing.html#log-scale-y-axis",
    "title": "Protistan grazing analysis",
    "section": "10.2 Log scale y axis",
    "text": "10.2 Log scale y axis"
  },
  {
    "objectID": "grazing.html#combine-gr-and-mcr-data",
    "href": "grazing.html#combine-gr-and-mcr-data",
    "title": "Protistan grazing analysis",
    "section": "15.1 Combine GR and MCR data",
    "text": "15.1 Combine GR and MCR data\n\n\nCode\nall_vents <- mcr_graze %>%\n  type.convert(as.is = TRUE) %>%\n  select(FIELD, NAME, SAMPLE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, GRAZING_EFFECT_hr_min, GRAZING_EFFECT_hr_max, BAC_TURNOVER_PERC) %>% \n  rbind(gr %>%\n          add_column(FIELD = \"Gorda Ridge\") %>% \n          add_column(EUK_ml = NA) %>% \n          separate(SAMPLE, c(\"SAMPLE\", \"NAME\"), sep = \"-\") %>% \n          select(FIELD, NAME, SAMPLE, EXP = Bottle, PROK_ml = prok_avg, EUK_ml, GRAZING_EFFECT_hr = GrazingRate_hr, GRAZING_EFFECT_hr_min = GrazingRate_hr_min, GRAZING_EFFECT_hr_max = GrazingRate_hr_max, BAC_TURNOVER_PERC = Prok_turnover)) %>% \n  left_join(temps) %>% \n  mutate(SAMPLE_TYPE = case_when(\n    grepl(\"BSW\", NAME) ~ \"Background\",\n    grepl(\"Near vent BW\", NAME) ~ \"Background\",\n    grepl(\"Background\", NAME) ~ \"Background\", \n    grepl(\"Plume\", NAME) ~ \"Background\",\n    TRUE ~ \"Vent\"\n  ))\n\n\nJoining, by = c(\"NAME\", \"SAMPLE\")\n\n\nCode\n# View(all_vents)\n# all_vents\n# write_delim(all_vents, file = \"output-data/grazing-cellcounts-GR_MCR.txt\", delim = \"\\t\")"
  },
  {
    "objectID": "grazing.html#plot-combined-results",
    "href": "grazing.html#plot-combined-results",
    "title": "Protistan grazing analysis",
    "section": "15.2 Plot combined results",
    "text": "15.2 Plot combined results\n\n\nCode\nallrates <- all_vents %>% \n  select(FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with(\"GRAZING_EFFECT_\")) %>% \n  distinct() %>% \n    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, fill = FIELD, shape = SAMPLE_TYPE)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(fill = FIELD, shape = SAMPLE_TYPE),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\", \"#addd8e\")) +\n    facet_grid(. ~ SAMPLE_TYPE, scales = \"free\", space = \"free\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 11),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"cells\"~ml^-1~hr^-1))\n\n\nAdd Gorda Ridge comparison to supplementary?\n\n\nCode\nallrates\n\n\n\n\n\nCode\nallrates + scale_y_log10()\n\n\nWarning: Transformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\nTransformation introduced infinite values in continuous y-axis\n\n\n\n\n\nCode\n# allrates + scale_y_continuous(limits = c(0,1000))\n\n\n\nRemove undetected grazing rate\nRepeat grazing rate plot, but removed undetectable\n\n\nCode\n# unique(all_vents$GRAZING_EFFECT_hr)\nallrates_nonzero <- all_vents %>% \n  filter(GRAZING_EFFECT_hr > 0) %>% \n  select(FIELD, NAME, SAMPLE, EXP, SAMPLE_TYPE, starts_with(\"GRAZING_EFFECT_\")) %>% \n  distinct() %>% \n    ggplot(aes(y = GRAZING_EFFECT_hr, x = NAME, fill = FIELD, shape = SAMPLE_TYPE)) +\n    geom_errorbar(aes(ymax = (GRAZING_EFFECT_hr_max), ymin = (GRAZING_EFFECT_hr_min)), \n                  width = 0.2, position = position_dodge(width = 0.4)) +\n    geom_point(stat = \"identity\", aes(fill = FIELD, shape = SAMPLE_TYPE),\n               color = \"black\", size = 3, position = position_dodge(width = 0.4)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#de2d26\", \"#1c9099\", \"#addd8e\")) +\n    facet_grid(. ~ SAMPLE_TYPE, scales = \"free\", space = \"free\") +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n          panel.background = element_blank(), \n          axis.line = element_line(colour = \"black\"), \n          axis.text.x = element_text(color=\"black\", size = 11, \n                                     angle = 45, hjust = 1, vjust = 1), \n          axis.text.y = element_text(color=\"black\", size = 11),\n          axis.title =element_text(color=\"black\", size = 11),\n          axis.ticks = element_line(),\n          legend.title = element_blank(),\n          strip.placement = \"outside\",\n          strip.text.y = element_text(color=\"black\", size = 11),\n          strip.text.x = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n           shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"cells\"~ml^-1~hr^-1))\n\n\n\n\nCode\n# svg(\"compare-all-rates-color-nonZero.svg\", h = 4, w = 7)\nallrates_nonzero + scale_y_log10()\n\n\n\n\n\nCode\n# dev.off()\n\n\nPanel plot, cells per ml and grazing rate\n\n\nCode\n# svg(\"plot-gcellconc-grazing-log.svg\", h = 10, w = 6)\n# grazing_rate + scale_y_log10(limits = c(1e-1,1e5), breaks=10^(0:7))\nplot_grid(conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\"),\n          conc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\"),\nallrates_nonzero + scale_y_log10(), ncol = 1)\n\n\n\n\n\nCode\n# dev.off()\n\n\n\n\nCode\n# svg(\"cells-per-ml.svg\", h = 7, w = 7)\nconc_rate_plot_mcr(biomass_rate_plot, \"EUK_ml\", \"EUK_sem\") + conc_rate_plot_mcr(biomass_rate_plot, \"PROK_ml\", \"PROK_sem\") + patchwork::plot_layout(ncol = 1) + patchwork::plot_annotation(tag_levels = \"a\") \n\n\n\n\n\nCode\n# dev.off()"
  },
  {
    "objectID": "asv.html#sequence-stats",
    "href": "asv.html#sequence-stats",
    "title": "18S survey",
    "section": "Sequence stats",
    "text": "Sequence stats\nTotal ASVs and sequences for each sample.\n\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID)) %>% \n  pivot_longer(cols = ends_with(\"_stats\")) %>% \n  ggplot(aes(x = SAMPLE, y = value)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  # geom_hline(yintercept=10000, linetype=\"dashed\", color = \"green\") +\n  facet_grid(. ~ name, scales = \"free\") +\n  theme_linedraw()\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCreate supplementary table with ASV and sequence stats.\n\ntable_supp_seqstats <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID))\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n# write.csv(table_supp_seqstats, file = \"output-data/supp-table-sequencestats.csv\")"
  },
  {
    "objectID": "asv.html#cluster-analysis",
    "href": "asv.html#cluster-analysis",
    "title": "18S survey",
    "section": "3.1 Cluster analysis",
    "text": "3.1 Cluster analysis\nOrdination analysis and methods to look at whole protistan communities at MCR.\n\n\nCode\n# | message: false\nlibrary(vegan); library(ggdendro); library(compositions)\n\n\nLoading required package: permute\n\n\nLoading required package: lattice\n\n\nThis is vegan 2.6-2\n\n\nWelcome to compositions, a package for compositional data analysis.\nFind an intro with \"? compositions\"\n\n\n\nAttaching package: 'compositions'\n\n\nThe following object is masked from 'package:ape':\n\n    balance\n\n\nThe following objects are masked from 'package:stats':\n\n    anova, cor, cov, dist, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, norm, scale, scale.default"
  },
  {
    "objectID": "asv.html#cluster-analysis-with-grazing-assays",
    "href": "asv.html#cluster-analysis-with-grazing-assays",
    "title": "18S survey",
    "section": "3.2 Cluster analysis with grazing assays",
    "text": "3.2 Cluster analysis with grazing assays\n\n\nCode\n# head(asv_wtax_qc)\nasv_mcr_numeric <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(FeatureID, SAMPLENAME) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID'. You can override using the\n`.groups` argument.\n\n\nTransform compositional data, center log ratio.\n\n\nCode\nlogratio_mcr <- data.frame(compositions::clr(t(asv_mcr_numeric)))\n# dim(logratio_mcr)\n# ?alr()\n# ?ilr()\n\npca_logratio <- prcomp(logratio_mcr)\n\nvariance_logratio <- (pca_logratio$sdev^2)/sum(pca_logratio$sdev^2)\n\nbarplot(variance_logratio, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", \n    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n\n\n\n\nCode\n# Extract PCA points\nmcr_pca_pts <- data.frame(pca_logratio$x, SAMPLE = rownames(pca_logratio$x)) %>% \n  rownames_to_column(var = \"SAMPLENAME\") %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"VENT\"), \" \", \n        remove = FALSE) \n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 21 rows [1, 2, 3, 4,\n5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n\nPCoA with all samples\n\n\nCode\n# unique(mcr_pca_pts$VENT)\n# vent_ids\n# site_fullname\nmcr_pca_pts %>% \n  mutate(VENT_ORDER = factor(VENT, levels = vent_ids, labels = vent_fullname),\n         SITE_ORDER = factor(SITE, levels = c(\"VonDamm\", \"Piccard\"), labels = site_fullname)) %>% \n  mutate(TYPE = case_when(\n    SAMPLETYPE == \"Incubation\" ~ \"Incubation\",\n    TRUE ~ \"in situ\"\n  )) %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_point(color = \"black\", stroke = 1.3, size = 5, aes(shape = SITE_ORDER, fill = VENT_ORDER, alpha = TYPE)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_alpha_manual(values = c(1,0.5)) +\n  scale_fill_manual(values = vent_colors) +\n  theme_linedraw() +\n  guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)\n\n\n\n\n\nDendrogram analysis\n\n\nCode\n# ?decostand()\n# Relative abundance\nrel_abun <- decostand(asv_mcr_numeric, MARGIN = 2, method = \"total\")\n# Cluster dendrogram (average hierarchical clustering)\ncluster_mcr <- hclust(dist(t(rel_abun)), method = \"average\")\ndendro <- as.dendrogram(cluster_mcr)\nmcr_dendro <- dendro_data(dendro, type = \"rectangle\")\n\n\n\n\nCode\nmcr_dendro_plot <- ggplot(segment(mcr_dendro)) +\n  geom_segment(aes(x = x, y = y, xend = xend, \n    yend = yend)) + \n  coord_flip() + \n  scale_y_reverse(expand = c(0.2, 0.5), breaks = c(0, 0.2, 0.4, 0.6, 0.8)) +\n  geom_text(aes(x = x, y = y, label = label, angle = 0, hjust = 0), data = label(mcr_dendro)) +\n  theme_dendro() + labs(y = \"Dissimilarity\") +\n    theme(axis.text.x = element_text(color = \"black\", size = 14), axis.line.x = element_line(color = \"#252525\"), \n        axis.ticks.x = element_line(), axis.title.x = element_text(color = \"black\", \n            size = 14))\n# svg('figs/SUPPLEMENTARY-dendrogram-wreps.svg', w = 10, h = 8)\nmcr_dendro_plot\n\n\n\n\n\n\n\nPCoA with in situ only\n\n\nCode\nasv_mcr_numeric_insitu <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  group_by(FeatureID, SAMPLENAME) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID'. You can override using the\n`.groups` argument.\n\n\nCode\ninsitu_logratio_mcr <- data.frame(compositions::clr(t(asv_mcr_numeric_insitu)))\n\ninsitu_pca_logratio <- prcomp(insitu_logratio_mcr)\n\ninsitu_variance_logratio <- (insitu_pca_logratio$sdev^2)/sum(insitu_pca_logratio$sdev^2)\n\nbarplot(insitu_variance_logratio, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", \n    cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n\n\n\n\nCode\n# Extract PCA points for only insitu samples\ninsitu_mcr_pca_pts <- data.frame(insitu_pca_logratio$x, SAMPLE = rownames(insitu_pca_logratio$x)) %>% \n  rownames_to_column(var = \"SAMPLENAME\") %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"VENT\"), \" \", \n        remove = FALSE) \n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 13 rows [1, 2, 3, 4,\n5, 6, 7, 8, 9, 10, 11, 12, 13].\n\n\n\n\nCode\ninsitu_mcr_pca_pts %>% \n  mutate(TYPE = case_when(\n    SAMPLETYPE == \"Incubation\" ~ \"Incubation\",\n    TRUE ~ \"in situ\"\n  )) %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_point(color = \"black\", size = 4, aes(shape = SITE, fill = VENT, alpha = TYPE)) +\n  scale_shape_manual(values = c(21, 24)) +\n  scale_alpha_manual(values = c(1,0.4)) +\n  theme_linedraw() +\n  guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)\n\n\n\n\n\nCode\n# Keep same sample colors to compare to cluster analysis with in situ and Tf samples."
  },
  {
    "objectID": "asv.html#shared-asvs",
    "href": "asv.html#shared-asvs",
    "title": "18S survey",
    "section": "3.4 Shared ASVs",
    "text": "3.4 Shared ASVs\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose=TRUE)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nCode\n# unique(asv_wtax_qc$SITE)\nhead(asv_wtax_qc)\n\n\n# A tibble: 6 × 22\n  FeatureID SAMPLE value Taxon Conse…¹ SAMPL…² VENT  SITE  SAMPL…³ DEPTH SAMPL…⁴\n  <chr>     <chr>  <dbl> <chr>   <dbl> <chr>   <chr> <chr> <chr>   <chr> <chr>  \n1 00056209… 52_MC…     0 Euka…     0.8 \"Picca… Lots… Picc… \"\"      \"\"    Incuba…\n2 00056209… 53_MC…     0 Euka…     0.8 \"Picca… Lots… Picc… \"\"      \"\"    Incuba…\n3 00056209… 54_MC…     0 Euka…     0.8 \"VonDa… Must… VonD… \"\"      \"\"    Incuba…\n4 00056209… 55_MC…     0 Euka…     0.8 \"VonDa… Shri… VonD… \"\"      \"\"    Incuba…\n5 00056209… 57_MC…     0 Euka…     0.8 \"Picca… Shri… Picc… \"\"      \"\"    Incuba…\n6 00056209… 58_MC…     0 Euka…     0.8 \"VonDa… Plume VonD… \"\"      \"\"    Incuba…\n# … with 11 more variables: SAMPLETYPE_BIN <chr>, YEAR <chr>, TEMP <chr>,\n#   pH <chr>, PercSeawater <chr>, Mg <chr>, H2 <chr>, H2S <chr>, CH4 <chr>,\n#   ProkConc <chr>, Sample_or_Control <chr>, and abbreviated variable names\n#   ¹​Consensus, ²​SAMPLENAME, ³​SAMPLEID, ⁴​SAMPLETYPE\n\n\nCode\n# head(TAX)\n\n\nFunction to generate upsetR plot with varied taxonomic levels.\nQuestions:\n\nHow many ASVs are shared among vent sites within Von Damm and Piccard?\nWhat about shared ASVs across each vent field?\nIs there a taxonomic level that drives site-to-site or field-to-field community dissimilarity?\n\n\n\nCode\n# options for taxa: SupergroupPhylum, Supergroup, Phylum, Class, Order, Family, Genus, Species\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n\nall_taxa_color = c(\"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#deebf7\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\", \"#fa9fb5\", \"#c51b8a\", \"#67000d\", \"#ef3b2c\", \"#ffffcc\", \"#feb24c\", \"#c7e9b4\", \"#1d91c0\", \"#253494\", \"#9e9ac8\", \"#238b45\", \"#54278f\", \"#bdbdbd\", \"#252525\")\n\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, SupergroupPhylum) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  \n  group_by(SupergroupPhylum, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n  distinct(SupergroupPhylum, SUM, SAMPLE, .keep_all = TRUE) %>% \n  group_by(SupergroupPhylum) %>% \n  summarise(SAMPLE = list(SAMPLE)) %>% \n  ggplot(aes(x = SAMPLE)) +\n    geom_bar(color = \"black\", width = 0.7, aes(fill = SupergroupPhylum)) +\n    scale_x_upset(n_intersections = 25) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = \"\", y = \"Shared at taxonomic level\") +\n  theme_linedraw() +\n  theme(axis.text.y = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.text.x = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.title = element_text(color=\"black\", size=14, face = \"bold\"),\n        legend.text = element_text(color = \"black\", size = 12, face = \"bold\"),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\")) + \n  scale_fill_manual(values = all_taxa_color)\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 5926 rows [5, 6, 7,\n8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 28, 29, 30, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 3451 rows [1, 2,\n3, 4, 12, 13, 18, 19, 23, 27, 35, 44, 45, 46, 48, 49, 53, 54, 55, 56, ...].\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME', 'VENT'. You can\noverride using the `.groups` argument.\n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 7678 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n`summarise()` has grouped output by 'SupergroupPhylum'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCode\n# Filter data to reduce noise and show sample type to vent ecosystem variability.\n# \n\n\n\n\nCode\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\", remove = FALSE) %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, SupergroupPhylum, Taxon) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  group_by(SupergroupPhylum, Taxon, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n  distinct(Taxon, SupergroupPhylum, SUM, SAMPLE, .keep_all = TRUE) %>% \n  group_by(SupergroupPhylum, Taxon) %>% \n  summarise(SAMPLE = list(SAMPLE)) %>% \n  ggplot(aes(x = SAMPLE)) +\n    geom_bar(color = \"black\", width = 0.7, aes(fill = SupergroupPhylum)) +\n    scale_x_upset(n_intersections = 25) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = \"\", y = \"Shared at taxonomic level\") +\n  theme_linedraw() +\n  theme(axis.text.y = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.text.x = element_text(color=\"black\", size=14, face = \"bold\"),\n        axis.title = element_text(color=\"black\", size=14, face = \"bold\"),\n        legend.text = element_text(color = \"black\", size = 12, face = \"bold\"),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\")) + \n  scale_fill_manual(values = all_taxa_color)\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 5926 rows [5, 6, 7,\n8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 28, 29, 30, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 3451 rows [1, 2,\n3, 4, 12, 13, 18, 19, 23, 27, 35, 44, 45, 46, 48, 49, 53, 54, 55, 56, ...].\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME', 'VENT',\n'SupergroupPhylum'. You can override using the `.groups` argument.\n\n\nWarning: Expected 4 pieces. Additional pieces discarded in 7678 rows [1, 2, 3,\n4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n`summarise()` has grouped output by 'SupergroupPhylum', 'Taxon'. You can\noverride using the `.groups` argument.\n`summarise()` has grouped output by 'SupergroupPhylum'. You can override using\nthe `.groups` argument.\n\n\nWarning: Removed 300 rows containing non-finite values (stat_count).\n\n\n\n\n\nExample comparisons of shared taxonomic levels. Explanation: At ASV level, most ASVs are not shared across samples. So at other taxonomic categories, are these taxa also present or are there whole classes not present?\n\n\nCode\n# | fig-width: 10\n# | fig-height: 15\n# SupergroupPhylum, Supergroup, Phylum, Class, Order, Family, Genus, Species\n\n# make_upset_plot(asv_wtax_qc, SupergroupPhylum)\n\n# library(plotly)\n# ggplotly(tmp)\n# make_upset_plot(asv_wtax_qc, Class) + theme(legend.position = \"none\")\n# make_upset_plot(asv_wtax_qc, Supergroup) + theme(legend.position = \"none\")\n\n\nA better visualization may be a presence/absence across samples with a tile plot.\n\n\nCode\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n\nmake_tile_plot_pa <- function(df, taxa_level, level0){ \n  taxa_select <- enquo(taxa_level)\n  taxa_select_higher <- enquo(level0)\n  df %>% \n  filter(value > 0) %>% \n  filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% #add modified \"supergroup-phylum category\"\n  # Average across replicates\n    group_by(FeatureID, SAMPLENAME, VENT, !!taxa_select_higher, !!taxa_select) %>% \n    summarise(AVG = mean(value)) %>% \n  ungroup() %>% \n  separate(SAMPLENAME, c(\"SITE\", \"SAMPLETYPE\", \"YEAR\", \"Sample_tmp\"), remove = TRUE) %>%\n  mutate(REGION = \"Mid-Cayman Rise\") %>%  \n  mutate(VENTNAME = paste(SITE, VENT, sep = \" \")) %>% \n    select(-Sample_tmp) %>% \n  unite(SAMPLE, SITE, SAMPLETYPE, VENT, sep = \" \", remove = FALSE) %>% \n  group_by(SITE, !!taxa_select_higher, !!taxa_select, SAMPLE) %>% \n    summarise(SUM = sum(AVG)) %>%\n  ungroup() %>%\n    add_column(PRESENT = 1) %>% \n    drop_na() %>% # remove NAs in taxa categories\n  ggplot(aes(x = SAMPLE, y = !!taxa_select)) +\n    geom_tile(color = \"white\", fill = \"black\", aes(fill = PRESENT)) +\n      facet_grid(SupergroupPhylum ~ SITE, space = \"free\", scales = \"free\") +\n  theme_linedraw() +\n  labs(x= \"\", y = \"\") +\n  theme(axis.text.y = element_text(color=\"black\", size=11),\n        axis.text.x = element_text(color=\"black\", size=11, angle = 90, vjust = 0.5, hjust = 1),\n        axis.title = element_text(color=\"black\", size=11),\n        legend.text = element_text(color = \"black\", size = 11),\n        legend.title = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        plot.margin = margin(1, 1, 1, 5, \"cm\"))\n}\n\n\n\n\nCode\n# | fig-width: 10\n# | fig-height: 20\n# make_tile_plot_pa(asv_wtax_qc, \"Class\", \"SupergroupPhylum\")\n\n\n\nAbove plot addresses presence/absence of the families within major protistan supergroups across the Von Damm and Piccard vent, plume, and background samples."
  },
  {
    "objectID": "asv.html#richness-by-site",
    "href": "asv.html#richness-by-site",
    "title": "18S survey",
    "section": "Richness by site",
    "text": "Richness by site"
  },
  {
    "objectID": "asv.html#corncob",
    "href": "asv.html#corncob",
    "title": "18S survey",
    "section": "3.5 Corncob",
    "text": "3.5 Corncob\nCorncob analysis can be used to identify specific ASVs that may be enriched when we compare non-vent to vent samples.\nQuestions:\n\nFor vent vs. non-vent ASVs, what ASVs are enriched at Piccard?\nFor vent vs. non-vent ASVs, what ASVs are enriched at Von Damm?\nFor vent vs. non-vent ASVs, what ASVs are enriched at both sites?\n\n\n\nCode\n# | message: false\n# devtools::install_github(\"bryandmartin/corncob\")\nlibrary(corncob); library(phyloseq)\n\n\n\n\nCode\nload(\"input-data/MCR-amplicon-data.RData\", verbose = TRUE)\n\n\nLoading objects:\n  phylo_obj\n  samplenames\n  physeq_wnames\n  metadata_mcr\n  asv_wtax_qc\n  TAX\n  tax_matrix\n  physeq_mcr\n\n\nExplore data input for corncob\n\n\nCode\n# otu_table(physeq_mcr)[1:10, 1:3]\n# sample_data(physeq_mcr)\n# tax_table(physeq_mcr)[1:3, ]\n\n# Designated vent vs. non-vent\nunique(sample_data(physeq_mcr)$SAMPLETYPE_BIN)\n\n\n[1] \"non-vent\" \"vent\"    \n\n\nCode\n#Designats Piccard vs. vondamm.\nunique(sample_data(physeq_mcr)$SITE)\n\n\n[1] \"Piccard\" \"VonDamm\"\n\n\nStart by removing incubation samples for now. Subset to eukaryotes only and use phyloseq’s tax glom to summarize to Supergroup, Phylum, Class, Order, Genus, & species.\n\n\nCode\nhead(tax_table(physeq_mcr))\n\n\nTaxonomy Table:     [6 taxa by 8 taxonomic ranks]:\n                                 Domain      Supergroup     Phylum            \n0c7bdd7d35a3559db857584cecc4f5c9 \"Eukaryota\" \"Opisthokonta\" \"Choanoflagellida\"\n7b0dd4c34fe16642ff23b7effa1bf1bd \"Eukaryota\" \"Alveolata\"    \"Ciliophora\"      \ndc268dc3fdd431dc0de1fcc60de681f0 \"Eukaryota\" \"Rhizaria\"     \"Cercozoa\"        \n08586d1dca4dda0f128d142b85379e0b \"Eukaryota\" \"Apusozoa\"     \"Apusomonadidae\"  \ne3bed7480f3f3c95f0f4db2e03cee011 \"Eukaryota\" \"Rhizaria\"     \"Radiolaria\"      \n44dcf603d76f712038c8b797beb1282f \"Eukaryota\" \"Alveolata\"    \"Dinoflagellata\"  \n                                 Class                   \n0c7bdd7d35a3559db857584cecc4f5c9 \"Choanoflagellatea\"     \n7b0dd4c34fe16642ff23b7effa1bf1bd \"CONThreeP\"             \ndc268dc3fdd431dc0de1fcc60de681f0 \"Filosa-Thecofilosea\"   \n08586d1dca4dda0f128d142b85379e0b \"Apusomonadidae_Group-1\"\ne3bed7480f3f3c95f0f4db2e03cee011 \"Acantharea\"            \n44dcf603d76f712038c8b797beb1282f \"Syndiniales\"           \n                                 Order                     \n0c7bdd7d35a3559db857584cecc4f5c9 \"Acanthoecida\"            \n7b0dd4c34fe16642ff23b7effa1bf1bd \"CONThreeP_X\"             \ndc268dc3fdd431dc0de1fcc60de681f0 \"Ventricleftida\"          \n08586d1dca4dda0f128d142b85379e0b \"Apusomonadidae_Group-1_X\"\ne3bed7480f3f3c95f0f4db2e03cee011 \"Acantharea_1\"            \n44dcf603d76f712038c8b797beb1282f \"Dino-Group-IV\"           \n                                 Family                            \n0c7bdd7d35a3559db857584cecc4f5c9 \"Stephanoecidae_Group_D\"          \n7b0dd4c34fe16642ff23b7effa1bf1bd \"CONThreeP_XX\"                    \ndc268dc3fdd431dc0de1fcc60de681f0 NA                                \n08586d1dca4dda0f128d142b85379e0b \"Apusomonadidae_Group-1_XX\"       \ne3bed7480f3f3c95f0f4db2e03cee011 \"Acantharea_1_X\"                  \n44dcf603d76f712038c8b797beb1282f \"Dino-Group-IV-Hematodinium-Group\"\n                                 Genus                     \n0c7bdd7d35a3559db857584cecc4f5c9 \"Stephanoecidae_Group_D_X\"\n7b0dd4c34fe16642ff23b7effa1bf1bd NA                        \ndc268dc3fdd431dc0de1fcc60de681f0 NA                        \n08586d1dca4dda0f128d142b85379e0b NA                        \ne3bed7480f3f3c95f0f4db2e03cee011 \"Acantharea_1_XX\"         \n44dcf603d76f712038c8b797beb1282f \"Hematodinium\"            \n                                 Species                       \n0c7bdd7d35a3559db857584cecc4f5c9 \"Stephanoecidae_Group_D_X_sp.\"\n7b0dd4c34fe16642ff23b7effa1bf1bd NA                            \ndc268dc3fdd431dc0de1fcc60de681f0 NA                            \n08586d1dca4dda0f128d142b85379e0b NA                            \ne3bed7480f3f3c95f0f4db2e03cee011 \"Acantharea_1_XX_sp.\"         \n44dcf603d76f712038c8b797beb1282f \"Hematodinium_sp.\"            \n\n\nCode\nmcr_super <- physeq_mcr %>%\n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>%\n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>%\n  tax_glom(\"Supergroup\")\n\nmcr_phy <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Phylum\")\n\nmcr_class <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Class\")\n\nmcr_order <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Order\")\n\nmcr_fam <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Family\")\n\nmcr_genera <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Genus\")\n\nmcr_spp <- physeq_mcr %>% \n  phyloseq::subset_samples(SAMPLETYPE %in% c(\"Background\", \"Plume\", \"Vent\")) %>% \n  phyloseq::subset_taxa(Domain == \"Eukaryota\") %>% \n  tax_glom(\"Species\")\n\n# sample_data(mcr_order)\n\n\nDifferential tests in corncob\nThese tests work to see if taxa are differentially-abundant or variable across a given variable. In this study we have different taxonomic levels, are there more general or species-specific trends? We also have across sample types and site Below set up differential tests across sample types and site (and either or) at different taxonomic levels.\nFunction to perform specific differential tests across vent fields. Below use SITE_PICK parameter to choose between vent fields. Then use the df, to specify the taxonomic level.\n\n\nCode\ncorncob_mcr <- function(df_in){\n  # da_analysis_output <- differentialTest(formula = ~ SAMPLETYPE + SITE,\n  #                               phi.formula = ~ SAMPLETYPE+ SITE,\n  #                               formula_null = ~ 1,\n  #                               phi.formula_null = ~ SAMPLETYPE + SITE,\n  #                               test = \"Wald\", boot = FALSE,\n  #                               data = df_in,\n  #                               fdr_cutoff = 0.05)\n  ## SAMPLETYPE_BIN specifically compares vent to non-vent.\n  da_analysis_output <- differentialTest(formula = ~ SAMPLETYPE_BIN,\n                                phi.formula = ~ SAMPLETYPE_BIN,\n                                formula_null = ~ 1,\n                                phi.formula_null = ~ SAMPLETYPE_BIN,\n                                test = \"Wald\", boot = FALSE,\n                                data = df_in,\n                                fdr_cutoff = 0.05)\n  # da_analysis_output <- differentialTest(formula = ~ SITE,\n  #                               phi.formula = ~ SITE,\n  #                               formula_null = ~ 1,\n  #                               phi.formula_null = ~ SITE,\n  #                               test = \"Wald\", boot = FALSE,\n  #                               data = df_in,\n  #                               fdr_cutoff = 0.05)\n  #\n  list_ofsig <- as.character(da_analysis_output$significant_taxa)\n  total_number <- length(list_ofsig)[1]\n  #\n  sig_taxa_names <- as.data.frame(tax_table(df_in)) %>% \n    rownames_to_column(var = \"FEATURE\") %>% \n    filter(FEATURE %in% list_ofsig) %>% \n    rownames_to_column(var = \"NUMBER\")\n  #\n  for(var in 1:total_number){\n    out_0 <- data.frame(da_analysis_output$significant_models[[var]]$coefficients) %>% \n      add_column(NUMBER = as.character(var))\n    cat(\"extracted # \",var, \"\\n\")\n  if (!exists(\"extracted_coef\")){\n        extracted_coef <- out_0 # create the final count table\n    } else {\n        extracted_coef <- rbind(extracted_coef, out_0)\n    }\n    rm(out_0) # remove excess df\n  }\n  output_full <- extracted_coef %>% \n    rownames_to_column(var = \"variable\") %>%\n    filter(grepl(\"mu.\", variable)) %>% \n    left_join(sig_taxa_names, by = c(\"NUMBER\" = \"NUMBER\")) %>% \n      mutate(VARIABLE = str_remove(variable, \"[:digit:]+\")) %>% select(-variable) #%>% \n    # pivot_wider(names_from = VARIABLE, names_glue = \"{VARIABLE}_{.value}\", values_from = c(Estimate, Std..Error, t.value, Pr...t..))\n  rm(extracted_coef)\n  return(output_full)}\n\n\nDefine SITE_PICK\n\n\nCode\nmcr <- c(\"Piccard\", \"VonDamm\")\npicc <- c(\"Piccard\")\nvd <- c(\"VonDamm\")\n\n\nFunction to visualize output from corncob\n\n\nCode\nplot_corn <- function(cob_out, LEVEL, TITLE){\n  level <- enquo(LEVEL)\n  cob_out %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = level, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = level), shape = 21, color = \"black\") +\n  facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = TITLE)\n}\n\n\n\nSupergroup corncob\nWhat main supergroups are enriched at MCR?\n\n\nCode\n# # vd\n# analysis_super_vd <- corncob_mcr(mcr_super %>% \n#                                 phyloseq::subset_samples(SITE %in% vd))\n# \n# analysis_super_picc <- corncob_mcr(mcr_super %>% \n#                                 phyloseq::subset_samples(SITE %in% picc))\n\nanalysis_super_all <- corncob_mcr(mcr_super %>% \n                                phyloseq::subset_samples(SITE %in% mcr))\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \n\n\nCode\n# analysis_super_vd %>%\n#   filter(VARIABLE != \"mu.(Intercept)\") %>% \n#   ggplot(aes(y = Supergroup, x = Estimate)) +\n#     geom_vline(xintercept = 0, alpha = 0.2) +\n#     geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n#     geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n#   facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n#   theme(legend.position = element_blank(),\n#         axis.text.y = element_text(color = \"black\")) +\n#   theme_minimal() +\n#   labs(x = \"Coefficient\", y = \"\", title = \"VD supergroup\")\n\n# analysis_super_picc %>%\n#   filter(VARIABLE != \"mu.(Intercept)\") %>% \n#   ggplot(aes(y = Supergroup, x = Estimate)) +\n#     geom_vline(xintercept = 0, alpha = 0.2) +\n#     geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n#     geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n#   facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n#   theme(legend.position = element_blank(),\n#         axis.text.y = element_text(color = \"black\")) +\n#   theme_minimal() +\n#   labs(x = \"Coefficient\", y = \"\", title = \"piccard supergroup\")\n\n\nPlot supergroup enrichment\n\n\nCode\nanalysis_super_all %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Supergroup, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(. ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"MCR supergroup\")\n\n\n\n\n\n\n\nPhylum corncob analysis\n\n\nCode\nanalysis_phylum <- corncob_mcr(mcr_phy)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \n\n\n\n\nCode\nanalysis_phylum %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Phylum, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Phylum), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"MCR Phylum\")\n\n\n\n\n\n\n\nClass corncob analysis\n\n\nCode\nanalysis_class <- corncob_mcr(mcr_class %>%\n                                phyloseq::subset_samples(SITE %in% mcr))\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \n\n\n\n\nCode\n# head(analysis_class)\n# unique(analysis_class$VARIABLE)\nanalysis_class %>%\n  unite(Class, c(Phylum, Class), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>% \n  ggplot(aes(y = Class, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Class level test for differential abundance\")\n\n\n\n\n\n\nClass level looks pretty good. Keep this one. Looks at major taxonomic groups that were more enriched at vents? Work on the language here. Repeat vent vs. plume at ASV level. ID some of the core ASVs that can help elaborate on what we see above (table in supplementary)\n\n\nInterpretation :\n\n\n\nOrder corncob\n\n\nCode\nanalysis_order <- corncob_mcr(mcr_order)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \nextracted #  17 \nextracted #  18 \nextracted #  19 \nextracted #  20 \nextracted #  21 \nextracted #  22 \nextracted #  23 \nextracted #  24 \nextracted #  25 \nextracted #  26 \n\n\n\n\nCode\n# head(analysis_class)\n# unique(analysis_class$VARIABLE)\nanalysis_order %>%\n  unite(Order, c(Phylum, Class, Order), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Order, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Order level test for differential abundance\")\n\n\n\n\n\nCode\n# ?geom_errorbar\n\n\n\n\nFamily corncob\nPlan to pairing with tree below\n\n\nCode\nanalysis_fam <- corncob_mcr(mcr_fam)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \nextracted #  9 \nextracted #  10 \nextracted #  11 \nextracted #  12 \nextracted #  13 \nextracted #  14 \nextracted #  15 \nextracted #  16 \nextracted #  17 \nextracted #  18 \nextracted #  19 \nextracted #  20 \nextracted #  21 \nextracted #  22 \nextracted #  23 \nextracted #  24 \nextracted #  25 \nextracted #  26 \nextracted #  27 \nextracted #  28 \nextracted #  29 \nextracted #  30 \nextracted #  31 \nextracted #  32 \nextracted #  33 \nextracted #  34 \n\n\n\n\nCode\nanalysis_fam %>%\n  unite(Family, c(Class, Order, Family), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Family, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup + Phylum ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Family level test for differential abundance\")\n\n\n\n\n\n\n\nGenus corncob\nPlan to pairing with tree below\n\n\nCode\nanalysis_genus <- corncob_mcr(mcr_genera)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \nextracted #  6 \nextracted #  7 \nextracted #  8 \n\n\n\n\nCode\nanalysis_genus %>%\n  unite(Genus, c(Phylum, Genus), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Genus, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Genus level test for differential abundance\")\n\n\n\n\n\n\n\nSpecies corncob\n\n\nCode\nanalysis_spp <- corncob_mcr(mcr_spp)\n\n\nextracted #  1 \nextracted #  2 \nextracted #  3 \nextracted #  4 \nextracted #  5 \n\n\n\n\nCode\nanalysis_spp %>%\n  unite(Species, c(Genus, Species), sep = \" \", remove = FALSE) %>%\n  filter(VARIABLE != \"mu.(Intercept)\") %>%\n  ggplot(aes(y = Species, x = Estimate)) +\n    geom_vline(xintercept = 0, alpha = 0.2) +\n    geom_errorbar(aes(xmin = (Estimate-Std..Error), xmax = (Estimate+Std..Error)), width = 0.2) +\n    geom_point(aes(fill = Supergroup), shape = 21, color = \"black\") +\n  facet_grid(Supergroup + Order ~ VARIABLE, space = \"free\", scales = \"free\") +\n  theme(legend.position = element_blank(),\n        axis.text.y = element_text(color = \"black\")) +\n  theme_minimal() +\n  labs(x = \"Coefficient\", y = \"\", title = \"Species level test for differential abundance\")"
  },
  {
    "objectID": "grazing.html#plot-temperature-by-eukprok",
    "href": "grazing.html#plot-temperature-by-eukprok",
    "title": "Protistan grazing analysis",
    "section": "13.1 Plot temperature by euk:prok",
    "text": "13.1 Plot temperature by euk:prok\nPlot temperature by euk and prok per ml individually too.\nBacterial abundance typically increases with temperature (White et al. 1991) - which could ultimately increase bacterial ingestion rate and total protist cells. But at this type of niche environment, I hypothesize that there is a trend but threshold of not detected grazing under certain conditions.\nIf euk per ml numbers are high, but we see lower grazing rates, could this be competition? Curds and Cockburn 1968. Additionally with temperature… in Vaque et al GRF (specific grazing rates of flagellates) increased with temperature, but overall grazing rate reached a plateau at 18C. Does this mean that temperature will be an important factor depending on the community diversity?"
  },
  {
    "objectID": "grazing.html#plot-temperature-by-grazing-rate",
    "href": "grazing.html#plot-temperature-by-grazing-rate",
    "title": "Protistan grazing analysis",
    "section": "16.5 Plot temperature by grazing rate",
    "text": "16.5 Plot temperature by grazing rate\n\n\nCode\nnames(allvent_data)\n\n\n [1] \"FIELD\"                 \"NAME\"                  \"SAMPLE\"               \n [4] \"EXP\"                   \"PROK_ml\"               \"EUK_ml\"               \n [7] \"GRAZING_EFFECT_hr\"     \"GRAZING_EFFECT_hr_min\" \"GRAZING_EFFECT_hr_max\"\n[10] \"BAC_TURNOVER_PERC\"     \"Highest.Temp\"          \"pH\"                   \n[13] \"Mg\"                    \"H2S\"                   \"H2\"                   \n[16] \"CH4\"                   \"SAMPLE_TYPE\"           \"PROK_EUK_RATIO\"       \n\n\nCode\n# two_params(allvent_data, ugC_L_perday, `Highest.Temp`, \"ugC_L_perday\", \"Temperature (max)\")\n# two_params(allvent_data, ugC_L_perday, EUK_ml, \"ugC_L_perday\", \"Euk cells per ml\") + scale_y_log10()\n\n# two_params(allvent_data, EUK_ml, PROK_ml, \"Euk\", \"Prok\") + scale_y_log10() + scale_x_log10()"
  },
  {
    "objectID": "grazing.html#plot-euk-per-ml-with-temperature-and-grazing-rate",
    "href": "grazing.html#plot-euk-per-ml-with-temperature-and-grazing-rate",
    "title": "Protistan grazing analysis",
    "section": "15.1 Plot euk per ml with temperature and grazing rate",
    "text": "15.1 Plot euk per ml with temperature and grazing rate"
  },
  {
    "objectID": "asv.html#taxonomic-breakdown",
    "href": "asv.html#taxonomic-breakdown",
    "title": "18S survey",
    "section": "3.3 Taxonomic breakdown",
    "text": "3.3 Taxonomic breakdown\nTry to pair with dendrogram\n\n\nCode\nout_labels <- as.data.frame(mcr_dendro$labels)\nmcr_sample_order <- as.character(out_labels$label)\n\n\n\n\nCode\nalv <- c(\"Alveolata-Ellobiopsidae\", \"Alveolata-Perkinsea\", \"Alveolata-Unknown\", \"Alveolata-Chrompodellids\", \"Alveolata-Apicomplexa\")\n# head(asv_wtax_qc)\n\nbubble <- asv_wtax_qc %>% \n    filter(value > 0) %>% \n  # Avg seq count by ASV across replicates\n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE, Taxon, FeatureID) %>% \n  summarise(avg_seq = mean(value)) %>% \n  # Separate and curate taxa information\n  # filter(SAMPLETYPE != \"Incubation\") %>% \n  separate(Taxon, c(\"Domain\", \"Supergroup\", \n                  \"Phylum\", \"Class\", \"Order\",\n                  \"Family\", \"Genus\", \"Species\"), sep = \";\") %>%\n  filter(Domain == \"Eukaryota\") %>% #select eukaryotes only\n  filter(Supergroup != \"Opisthokonta\") %>% # remove multicellular metazoa\n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>% \n  # Taxa to supergroup\n  mutate(SupergroupPhylum = SUPERGROUP) %>% \n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE) %>% \n    mutate(TOTAL_SEQ = sum(avg_seq)) %>% \n  ungroup() %>% \n  group_by(SAMPLENAME, SITE, VENT, SAMPLETYPE, SUPERGROUP) %>% \n  summarise(SUM = sum(avg_seq),\n            REL_ABUN = SUM/TOTAL_SEQ) %>% \n  mutate(SAMPLENAME_ORDER = factor(SAMPLENAME, levels = mcr_sample_order)) %>% \n  ggplot(aes(x = SAMPLENAME_ORDER, y = SUPERGROUP, size = REL_ABUN)) +\n    geom_point(shape = 21, color = \"white\", aes(size = REL_ABUN, fill = SUPERGROUP, alpha = 0.4)) +\n    scale_size_continuous(range = c(2,14)) +\n  # facet_grid(. ~ SITE, scales = \"free\", space = \"free\") +\n  theme_minimal() +coord_flip() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(color = \"black\", angle = 45, hjust = 1, vjust = 1))\n\n\n`summarise()` has grouped output by 'SAMPLENAME', 'SITE', 'VENT', 'SAMPLETYPE',\n'Taxon'. You can override using the `.groups` argument.\n\n\nWarning: Expected 8 pieces. Additional pieces discarded in 10924 rows [3, 10,\n11, 12, 13, 14, 18, 19, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 35, 38, ...].\n\n\nWarning: Expected 8 pieces. Missing pieces filled with `NA` in 6487 rows [1, 2,\n4, 5, 6, 7, 8, 9, 15, 16, 17, 22, 24, 25, 26, 29, 36, 37, 48, 49, ...].\n\n\n`summarise()` has grouped output by 'SAMPLENAME', 'SITE', 'VENT', 'SAMPLETYPE',\n'SUPERGROUP'. You can override using the `.groups` argument.\n\n\nCode\nbubble\n\n\n\n\n\n\nDendrogram with bubble plot\n\n\nCode\n# mcr_dendro_plot + bubble + patchwork::plot_layout(ncol = 2) + patchwork::plot_annotation(tag_levels = \"a\")"
  },
  {
    "objectID": "asv.html#clr-change",
    "href": "asv.html#clr-change",
    "title": "18S survey",
    "section": "4.1 CLR change",
    "text": "4.1 CLR change\n\n\nCode\n# head(asv_wtax_qc)\ntmp_tax <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  select(FeatureID, Taxon) %>% \n  distinct()\n\nnumeric_tmp <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(FeatureID, SAMPLENAME, Taxon) %>% \n  summarise(MEAN_ACROSS_REPS = mean(value)) %>% \n  # unite(TAX, Taxon, FeatureID, sep = \"__\") %>% \n  select(FeatureID, SAMPLENAME, MEAN_ACROSS_REPS) %>% \n  pivot_wider(names_from = SAMPLENAME, values_from = MEAN_ACROSS_REPS, values_fill = 0) %>% \n  column_to_rownames(var = \"FeatureID\")\n\n\n`summarise()` has grouped output by 'FeatureID', 'SAMPLENAME'. You can override\nusing the `.groups` argument.\n\n\nCode\nlogratio_mcr <- data.frame(t(compositions::clr(t(numeric_tmp))))\n## From above \nhead(logratio_mcr)\n\n\n                                 VonDamm.Vent.2020.Rav2.\n0016c92095329cf769d2fc9f5a0b826c               0.4824678\n0024760a130d14a29d63bb07f082733e               0.0000000\n00508684a4c673b882a5d186733b3271              -1.7147568\n0052bc3663c02b5375d7472fdcb21cd0               0.0000000\n006c58bbe54f99c39fe7f3920319e5a8               0.0000000\n006df5d12667ab19d5ebbf6f0a786297               0.0000000\n                                 VonDamm.Incubation.2020.X18.\n0016c92095329cf769d2fc9f5a0b826c                    0.0000000\n0024760a130d14a29d63bb07f082733e                   -0.8797993\n00508684a4c673b882a5d186733b3271                    0.0000000\n0052bc3663c02b5375d7472fdcb21cd0                    0.0000000\n006c58bbe54f99c39fe7f3920319e5a8                    0.0000000\n006df5d12667ab19d5ebbf6f0a786297                    0.0000000\n                                 VonDamm.Plume.2020.Plume.\n0016c92095329cf769d2fc9f5a0b826c                  0.000000\n0024760a130d14a29d63bb07f082733e                  0.000000\n00508684a4c673b882a5d186733b3271                  0.000000\n0052bc3663c02b5375d7472fdcb21cd0                 -1.998135\n006c58bbe54f99c39fe7f3920319e5a8                 -1.528132\n006df5d12667ab19d5ebbf6f0a786297                  0.000000\n                                 VonDamm.Vent.2020.OldManTree.\n0016c92095329cf769d2fc9f5a0b826c                     0.0000000\n0024760a130d14a29d63bb07f082733e                     0.0000000\n00508684a4c673b882a5d186733b3271                     0.0000000\n0052bc3663c02b5375d7472fdcb21cd0                     0.0000000\n006c58bbe54f99c39fe7f3920319e5a8                     0.0000000\n006df5d12667ab19d5ebbf6f0a786297                    -0.8247801\n                                 Piccard.Incubation.2020.LotsOShrimp.\n0016c92095329cf769d2fc9f5a0b826c                                    0\n0024760a130d14a29d63bb07f082733e                                    0\n00508684a4c673b882a5d186733b3271                                    0\n0052bc3663c02b5375d7472fdcb21cd0                                    0\n006c58bbe54f99c39fe7f3920319e5a8                                    0\n006df5d12667ab19d5ebbf6f0a786297                                    0\n                                 Piccard.Vent.2020.LotsOShrimp.\n0016c92095329cf769d2fc9f5a0b826c                              0\n0024760a130d14a29d63bb07f082733e                              0\n00508684a4c673b882a5d186733b3271                              0\n0052bc3663c02b5375d7472fdcb21cd0                              0\n006c58bbe54f99c39fe7f3920319e5a8                              0\n006df5d12667ab19d5ebbf6f0a786297                              0\n                                 Piccard.Vent.2020.Shrimpocalypse.\n0016c92095329cf769d2fc9f5a0b826c                                 0\n0024760a130d14a29d63bb07f082733e                                 0\n00508684a4c673b882a5d186733b3271                                 0\n0052bc3663c02b5375d7472fdcb21cd0                                 0\n006c58bbe54f99c39fe7f3920319e5a8                                 0\n006df5d12667ab19d5ebbf6f0a786297                                 0\n                                 VonDamm.Incubation.2020.MustardStand.\n0016c92095329cf769d2fc9f5a0b826c                                     0\n0024760a130d14a29d63bb07f082733e                                     0\n00508684a4c673b882a5d186733b3271                                     0\n0052bc3663c02b5375d7472fdcb21cd0                                     0\n006c58bbe54f99c39fe7f3920319e5a8                                     0\n006df5d12667ab19d5ebbf6f0a786297                                     0\n                                 VonDamm.Incubation.2020.Rav2.\n0016c92095329cf769d2fc9f5a0b826c                             0\n0024760a130d14a29d63bb07f082733e                             0\n00508684a4c673b882a5d186733b3271                             0\n0052bc3663c02b5375d7472fdcb21cd0                             0\n006c58bbe54f99c39fe7f3920319e5a8                             0\n006df5d12667ab19d5ebbf6f0a786297                             0\n                                 VonDamm.Vent.2020.ArrowLoop.\n0016c92095329cf769d2fc9f5a0b826c                            0\n0024760a130d14a29d63bb07f082733e                            0\n00508684a4c673b882a5d186733b3271                            0\n0052bc3663c02b5375d7472fdcb21cd0                            0\n006c58bbe54f99c39fe7f3920319e5a8                            0\n006df5d12667ab19d5ebbf6f0a786297                            0\n                                 Piccard.Incubation.2020.Shrimpocalypse.\n0016c92095329cf769d2fc9f5a0b826c                                       0\n0024760a130d14a29d63bb07f082733e                                       0\n00508684a4c673b882a5d186733b3271                                       0\n0052bc3663c02b5375d7472fdcb21cd0                                       0\n006c58bbe54f99c39fe7f3920319e5a8                                       0\n006df5d12667ab19d5ebbf6f0a786297                                       0\n                                 VonDamm.Vent.2020.ShrimpHole.\n0016c92095329cf769d2fc9f5a0b826c                             0\n0024760a130d14a29d63bb07f082733e                             0\n00508684a4c673b882a5d186733b3271                             0\n0052bc3663c02b5375d7472fdcb21cd0                             0\n006c58bbe54f99c39fe7f3920319e5a8                             0\n006df5d12667ab19d5ebbf6f0a786297                             0\n                                 VonDamm.Vent.2020.X18.\n0016c92095329cf769d2fc9f5a0b826c                      0\n0024760a130d14a29d63bb07f082733e                      0\n00508684a4c673b882a5d186733b3271                      0\n0052bc3663c02b5375d7472fdcb21cd0                      0\n006c58bbe54f99c39fe7f3920319e5a8                      0\n006df5d12667ab19d5ebbf6f0a786297                      0\n                                 Piccard.Background.2020.BSW.\n0016c92095329cf769d2fc9f5a0b826c                            0\n0024760a130d14a29d63bb07f082733e                            0\n00508684a4c673b882a5d186733b3271                            0\n0052bc3663c02b5375d7472fdcb21cd0                            0\n006c58bbe54f99c39fe7f3920319e5a8                            0\n006df5d12667ab19d5ebbf6f0a786297                            0\n                                 VonDamm.Incubation.2020.Plume.\n0016c92095329cf769d2fc9f5a0b826c                              0\n0024760a130d14a29d63bb07f082733e                              0\n00508684a4c673b882a5d186733b3271                              0\n0052bc3663c02b5375d7472fdcb21cd0                              0\n006c58bbe54f99c39fe7f3920319e5a8                              0\n006df5d12667ab19d5ebbf6f0a786297                              0\n                                 VonDamm.Incubation.2020.ShrimpHole.\n0016c92095329cf769d2fc9f5a0b826c                                   0\n0024760a130d14a29d63bb07f082733e                                   0\n00508684a4c673b882a5d186733b3271                                   0\n0052bc3663c02b5375d7472fdcb21cd0                                   0\n006c58bbe54f99c39fe7f3920319e5a8                                   0\n006df5d12667ab19d5ebbf6f0a786297                                   0\n                                 VonDamm.Background.2020.BSW.\n0016c92095329cf769d2fc9f5a0b826c                            0\n0024760a130d14a29d63bb07f082733e                            0\n00508684a4c673b882a5d186733b3271                            0\n0052bc3663c02b5375d7472fdcb21cd0                            0\n006c58bbe54f99c39fe7f3920319e5a8                            0\n006df5d12667ab19d5ebbf6f0a786297                            0\n                                 VonDamm.Incubation.2020.BSW.\n0016c92095329cf769d2fc9f5a0b826c                            0\n0024760a130d14a29d63bb07f082733e                            0\n00508684a4c673b882a5d186733b3271                            0\n0052bc3663c02b5375d7472fdcb21cd0                            0\n006c58bbe54f99c39fe7f3920319e5a8                            0\n006df5d12667ab19d5ebbf6f0a786297                            0\n                                 Piccard.Plume.2020.Plume.\n0016c92095329cf769d2fc9f5a0b826c                         0\n0024760a130d14a29d63bb07f082733e                         0\n00508684a4c673b882a5d186733b3271                         0\n0052bc3663c02b5375d7472fdcb21cd0                         0\n006c58bbe54f99c39fe7f3920319e5a8                         0\n006df5d12667ab19d5ebbf6f0a786297                         0\n                                 VonDamm.Vent.2020.WhiteCastle.\n0016c92095329cf769d2fc9f5a0b826c                              0\n0024760a130d14a29d63bb07f082733e                              0\n00508684a4c673b882a5d186733b3271                              0\n0052bc3663c02b5375d7472fdcb21cd0                              0\n006c58bbe54f99c39fe7f3920319e5a8                              0\n006df5d12667ab19d5ebbf6f0a786297                              0\n                                 VonDamm.Vent.2020.MustardStand.\n0016c92095329cf769d2fc9f5a0b826c                               0\n0024760a130d14a29d63bb07f082733e                               0\n00508684a4c673b882a5d186733b3271                               0\n0052bc3663c02b5375d7472fdcb21cd0                               0\n006c58bbe54f99c39fe7f3920319e5a8                               0\n006df5d12667ab19d5ebbf6f0a786297                               0\n\n\nReformat to generate dot plot\n\n\nCode\ntmp <- logratio_mcr %>% \n  rownames_to_column(var = \"FeatureID\") %>% \n  pivot_longer((starts_with(\"VonDamm.Incubation\") | starts_with(\"Piccard.Incubation\")), names_to = \"TF\", values_to = \"tf_clr\") %>% \n  pivot_longer((starts_with(\"VonDamm.\") | starts_with(\"Piccard.\")), names_to = \"IN SITU\", values_to = \"insitu_clr\") %>% \n  left_join(select(taxa_table, FeatureID, Domain:Species) %>% distinct()) %>% \n  filter(Domain == \"Eukaryota\") %>%\n  filter(Supergroup != \"Opisthokonta\") %>% \n  mutate(Supergroup = ifelse(is.na(Supergroup), \"Unknown Eukaryota\", Supergroup),\n         Phylum = ifelse(is.na(Phylum), \"Unknown\", Phylum),\n         Phylum = ifelse(Phylum == \"Alveolata_X\", \"Ellobiopsidae\", Phylum),\n         Supergroup = ifelse(Supergroup == \"Alveolata\", paste(Supergroup, Phylum, sep = \"-\"), Supergroup)) %>% \n  mutate(SUPERGROUP = case_when(\n    Supergroup %in% alv ~ \"Other Alveolata\",\n    Supergroup == \"Eukaryota_X\" ~ \"Unknown Eukaryota\",\n    Phylum == \"Cercozoa\" ~ \"Rhizaria-Cercozoa\",\n    Phylum == \"Radiolaria\" ~ \"Rhizaria-Radiolaria\",\n    Phylum == \"Ochrophyta\" ~ \"Stramenopiles-Ochrophyta\",\n    Phylum == \"Opalozoa\" ~ \"Stramenopiles-Opalozoa\",\n    Phylum == \"Sagenista\" ~ \"Stramenopiles-Sagenista\",\n    TRUE ~ Supergroup\n  )) %>%\n  separate(TF, into = c(\"TYPE_TF\", \"VENT_TF\"), sep = \".2020.\", remove = FALSE) %>% \n  separate(`IN SITU`, into = c(\"TYPE_insitu\", \"VENT_insitu\"), sep = \".2020.\", remove = FALSE) %>% \n  filter(VENT_insitu == VENT_TF) %>% \n  separate(TYPE_TF, into=c(\"SITE\", \"TF\"), sep = \"\\\\.\") %>% separate(TYPE_insitu, into = c(\"SITE\", \"SAMPLETYPE\"), sep = \"\\\\.\")\n\n\nJoining, by = \"FeatureID\"\n\n\nCode\n# ?pivot_longer\nhead(tmp)\n\n\n# A tibble: 6 × 18\n  FeatureID    VENT_TF TF    tf_clr IN SI…¹ VENT_…² SITE  SAMPL…³ insit…⁴ Domain\n  <chr>        <chr>   <chr>  <dbl> <chr>   <chr>   <chr> <chr>     <dbl> <chr> \n1 0016c920953… X18.    Incu…      0 VonDam… X18.    VonD… Vent      0     Eukar…\n2 0016c920953… Mustar… Incu…      0 VonDam… Mustar… VonD… Vent      0     Eukar…\n3 0016c920953… Rav2.   Incu…      0 VonDam… Rav2.   VonD… Vent      0.482 Eukar…\n4 0016c920953… Plume.  Incu…      0 VonDam… Plume.  VonD… Plume     0     Eukar…\n5 0016c920953… Plume.  Incu…      0 Piccar… Plume.  Picc… Plume     0     Eukar…\n6 0016c920953… Shrimp… Incu…      0 VonDam… Shrimp… VonD… Vent      0     Eukar…\n# … with 8 more variables: Supergroup <chr>, Phylum <chr>, Class <chr>,\n#   Order <chr>, Family <chr>, Genus <chr>, Species <chr>, SUPERGROUP <chr>,\n#   and abbreviated variable names ¹​`IN SITU`, ²​VENT_insitu, ³​SAMPLETYPE,\n#   ⁴​insitu_clr\n\n\nTry x by y comparison.\n\n\nCode\ntmp %>% \n  filter(tf_clr != 0) %>%\n  filter(insitu_clr != 0) %>%\n  ggplot(aes(x = insitu_clr, y = tf_clr, fill = SUPERGROUP)) +\n  geom_jitter(shape = 21, color = \"black\") +\n  facet_grid(VENT_insitu ~ SUPERGROUP) +\n  coord_fixed(ratio = 1) +\n  scale_x_continuous(limits = c(-5,8)) + scale_y_continuous(limits = c(-5,8)) +\n  theme_minimal() +\n  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)\n\n\nWarning: Removed 1 rows containing missing values (geom_point).\n\n\n\n\n\nTO DO: Make table with total starting ASVs, number that were shared, and final in the Tf. Alluvial plots? from T0 to Tf by supergroup? Then more detailed plots like the above can be in supplemental?"
  },
  {
    "objectID": "grazing.html#grazing-rate-vs.-cells-ml",
    "href": "grazing.html#grazing-rate-vs.-cells-ml",
    "title": "Protistan grazing analysis",
    "section": "13.1 Grazing rate vs. cells ml",
    "text": "13.1 Grazing rate vs. cells ml\n\n\nCode\nenv_params <- read.delim(file = \"input-data/table_wenv.txt\", sep = \" \")\nnames(env_params)\n\n\n [1] \"SEQ_SAMPLE\"                   \"VENT\"                        \n [3] \"COORDINATES\"                  \"SAMPLETYPE\"                  \n [5] \"DEPTH\"                        \"YEAR\"                        \n [7] \"TEMP\"                         \"pH\"                          \n [9] \"Perc\"                         \"Mg\"                          \n[11] \"H2.\"                          \"H2S\"                         \n[13] \"CH4\"                          \"ProkConc\"                    \n[15] \"Sample_actual\"                \"Type\"                        \n[17] \"FIELD\"                        \"ref_num\"                     \n[19] \"SITE\"                         \"Sample_or_Control\"           \n[21] \"SAMPLEID\"                     \"NAME\"                        \n[23] \"EXP\"                          \"RATE_min\"                    \n[25] \"FLP_ml\"                       \"PROK_ml\"                     \n[27] \"PROK_sem\"                     \"EUK_ml\"                      \n[29] \"EUK_sem\"                      \"TimePoints\"                  \n[31] \"EXP_REPS\"                     \"EXP_VOL\"                     \n[33] \"CTRL_REPS\"                    \"CTRL_VOL\"                    \n[35] \"RATE_hr\"                      \"RATE_day\"                    \n[37] \"FLP_L\"                        \"CLEARANCE_RATE_ml\"           \n[39] \"CLEARANCE_RATE_nL\"            \"SPEC_GRAZE_RATE_hr\"          \n[41] \"GRAZE_RATE_DAY\"               \"GRAZING_EFFECT_hr\"           \n[43] \"GRAZING_EFFECT_hr_min\"        \"GRAZING_EFFECT_hr_max\"       \n[45] \"GRAZING_EFFECT_day\"           \"BAC_TURNOVER_PERC\"           \n[47] \"BAC_TURNOVER_PERC_min\"        \"BAC_TURNOVER_PERC_max\"       \n[49] \"euk_C_ug_Hu\"                  \"euk_C_ug_lit\"                \n[51] \"bac_C_ug\"                     \"bac_C_ug_2\"                  \n[53] \"RATE_ugCbac_pergrazer_perday\" \"SPEC_INGESTION_RATE\"         \n[55] \"SPEC_INGESTION_RATE_lit\"      \"Prok_biomass\"                \n[57] \"Euk_biomass_Hu\"               \"Euk_biomass_lit\"             \n[59] \"Prok_biomass_L\"               \"Euk_biomass_Hu_L\"            \n[61] \"Euk_biomass_lit_L\"            \"Prok_biomass_sem\"            \n[63] \"Euk_biomass_Hu_sem\"           \"Euk_biomass_lit_sem\"         \n[65] \"Prok_biomass_sem_L\"           \"Euk_biomass_Hu_sem_L\"        \n[67] \"Euk_biomass_lit_sem_L\"        \"detected\"                    \n[69] \"type\"                         \"GRAZE_RATE\"                  \n[71] \"type_site\"                    \"fgC_cell\"                    \n[73] \"fgC_ml_perday\"                \"ugC_L_perday\"                \n[75] \"lower_mcnichol\"               \"upper_mcnichol\"              \n\n\nCode\nplot_metadata <- env_params %>% \n  filter(SAMPLETYPE != \"Incubation\") %>%\n  filter(VENT != \"Quakeplume\") %>% \n  select(SITE, VENT, SAMPLETYPE, TEMP, DEPTH, starts_with(\"PROK_\"), starts_with(\"EUK_\"), starts_with(\"GRAZING_EFFECT_hr\"), pH, Mg, H2., CH4, H2S)\n  # pivot_wider(names_from = \"name\", values_from = \"value\", values_fill = NA)\n# head(plot_metadata)\n\n\nCompare microbial biomass, concentration, grazing and temperature across all sites.\n\n\nCode\neuk_temp <- plot_metadata %>% \n    mutate(TEMP = as.numeric(TEMP)) %>% \n  ggplot(aes(x = GRAZING_EFFECT_hr, y = EUK_ml, fill = TEMP)) +\n    # geom_errorbar(aes(ymin = (log10(EUK_ml)-(EUK_sem)),ymax = (log10(EUK_ml)+(EUK_sem)))) +\n    #   geom_errorbarh(aes(xmin = log10(GRAZING_EFFECT_hr_min),xmax = log10(GRAZING_EFFECT_hr_max))) +\n  geom_errorbar(aes(ymin = ((EUK_ml)-(EUK_sem)),ymax = ((EUK_ml)+(EUK_sem)))) +\n      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max))) +\n  geom_point(aes(shape = SITE), color = \"black\", size = 4) +\n  scale_y_log10() + scale_x_log10(limits = c()) +\n  scale_shape_manual(values = c(21, 23)) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction=2, na.value = \"grey50\") +\n  theme_bw() +\n  theme(rect = element_rect(fill = \"transparent\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\", color = NA))  +\n  labs(y = \"Euk cells per ml\", x = \"Grazing rate per hr\")\n\neuk_temp\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point).\n\n\n\n\n\n\n\nCode\nprok_temp <- plot_metadata %>% \n    mutate(TEMP = as.numeric(TEMP)) %>% \n  ggplot(aes(x = GRAZING_EFFECT_hr, y = PROK_ml, fill = TEMP)) +\n    # geom_errorbar(aes(ymin = (log10(EUK_ml)-(EUK_sem)),ymax = (log10(EUK_ml)+(EUK_sem)))) +\n    #   geom_errorbarh(aes(xmin = log10(GRAZING_EFFECT_hr_min),xmax = log10(GRAZING_EFFECT_hr_max))) +\n  geom_errorbar(aes(ymin = ((PROK_ml)-(PROK_sem)),ymax = ((PROK_ml)+(PROK_sem)))) +\n      geom_errorbarh(aes(xmin = (GRAZING_EFFECT_hr_min),xmax = (GRAZING_EFFECT_hr_max))) +\n  geom_point(aes(shape = SITE), color = \"black\", size = 4) +\n  scale_y_log10() + scale_x_log10() +\n  scale_shape_manual(values = c(21, 23)) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction=2, na.value = \"grey50\") +\n  theme_bw() +\n  theme(rect = element_rect(fill = \"transparent\"),\n        panel.background = element_rect(fill = \"transparent\"),\n        plot.background = element_rect(fill = \"transparent\", color = NA))  +\n  labs(y = \"Microial prey cells per ml\", x = \"Grazing rate per hr\")\n\nprok_temp\n\n\nWarning: Transformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\nTransformation introduced infinite values in continuous x-axis\n\n\nWarning: Removed 7 rows containing missing values (geom_errorbarh).\n\n\nWarning: Removed 4 rows containing missing values (geom_point)."
  },
  {
    "objectID": "grazing.html#plot-temperature-by-eukprok-and-then-euk-and-prok",
    "href": "grazing.html#plot-temperature-by-eukprok-and-then-euk-and-prok",
    "title": "Protistan grazing analysis",
    "section": "16.4 Plot temperature by euk:prok and then euk and prok",
    "text": "16.4 Plot temperature by euk:prok and then euk and prok\n\n\nCode\ntwo_params(allvent_data, `PROK_EUK_RATIO`, `Highest.Temp`, \"Prok:Euk ratio\", \"Temperature (max)\")\n\n\nWarning: Removed 5 rows containing missing values (geom_point)."
  },
  {
    "objectID": "sequence-qc.html",
    "href": "sequence-qc.html",
    "title": "Sequence QC",
    "section": "",
    "text": "Set up R environment\n\n\nCode\nlibrary(tidyverse); library(phyloseq); library(ape)\n\n\nImport previously sequenced and analyzed tag-sequence data. See https://shu251.github.io/microeuk-amplicon-survey/ for additional information."
  },
  {
    "objectID": "sequence-qc.html#sequence-stats",
    "href": "sequence-qc.html#sequence-stats",
    "title": "Sequence QC",
    "section": "2.1 Sequence stats",
    "text": "2.1 Sequence stats\nTotal ASVs and sequences for each sample.\n\n\nCode\nasv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID)) %>% \n  pivot_longer(cols = ends_with(\"_stats\")) %>% \n  ggplot(aes(x = SAMPLE, y = value)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  # geom_hline(yintercept=10000, linetype=\"dashed\", color = \"green\") +\n  facet_grid(. ~ name, scales = \"free\") +\n  theme_linedraw()\n\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\n\n\n\nCreate supplementary table with ASV and sequence stats.\n\n\nCode\ntable_supp_seqstats <- asv_wtax_qc %>% \n  filter(value > 0) %>% \n  group_by(SAMPLE, VENT, SITE) %>% \n  summarise(SUM_stats = sum(value),\n            ASV_stats = n_distinct(FeatureID))\n\n\n`summarise()` has grouped output by 'SAMPLE', 'VENT'. You can override using\nthe `.groups` argument.\n\n\nCode\n# write.csv(table_supp_seqstats, file = \"output-data/supp-table-sequencestats.csv\")"
  },
  {
    "objectID": "grazing.html#c-factor-based-on-biovolume",
    "href": "grazing.html#c-factor-based-on-biovolume",
    "title": "Protistan grazing analysis",
    "section": "8.1 C factor based on biovolume",
    "text": "8.1 C factor based on biovolume\n\nCalculate biovolume based on observed/imaged cells\n\n\n\nCode\n# Calculate biovolume, then apply carbon by biomass estimate for protists derived from biovolume.\nbiov_calc <- biov %>% \n  mutate(BIOVOLUME = ((pi/6) * (d^2) * d)) %>% # Calculate volume (um cubed) # Hillebrand et al. 1999\n  mutate(pgC_cell_MD_dino = (0.760 * (BIOVOLUME^0.819))) %>% # Menden-Deuer and Lessard 2000\n  mutate(pgC_cell_MD_nodiatom = (0.216 * (BIOVOLUME^0.939))) %>% # Menden-Deuer and Lessard 2000\n  mutate(pgC_cell_RANGE_min = (80 * BIOVOLUME)/1000,\n         pgC_cell_RANGE_max = (360 * BIOVOLUME)/1000,\n         pgC_cell_RANGE_mean = (220 * BIOVOLUME)/1000)\nhead(biov_calc)\n\n\n  EXP VENT_BSW      h      d  BIOVOLUME pgC_cell_MD_dino pgC_cell_MD_nodiatom\n1 IGT     vent 30.077 25.764 8954.44130      1310.789998          1110.242625\n2 IGT     vent 89.582 10.000  523.59878       128.136679            77.195762\n3 Bag      BSW 14.595  8.036  271.71800        74.878402            41.695668\n4 Bag      BSW 12.480  8.982  379.41786        98.426275            57.048646\n5 Bag     vent  9.218  3.120   15.90239         7.325062             2.901529\n6 IGT     vent 17.255  9.986  521.40274       127.696364            76.891704\n  pgC_cell_RANGE_min pgC_cell_RANGE_max pgC_cell_RANGE_mean\n1         716.355304         3223.59887         1969.977086\n2          41.887902          188.49556          115.191731\n3          21.737440           97.81848           59.777960\n4          30.353429          136.59043           83.471930\n5           1.272191            5.72486            3.498526\n6          41.712219          187.70499          114.708602\n\n\nCode\n# biov_calc\n# mean(c(80, 360))\n\n\n\nGet a summary pg per cell for vent and background samples. This is derived from biovolume estimates.\n\n\n\nCode\nc_factor_biov <- \n  biov_calc %>% select(-EXP, -h, -d) %>% \n  pivot_longer(cols = c(BIOVOLUME, starts_with(\"pgC_\")), names_to = \"VARIABLES\", values_to = \"VALUES\") %>% \n  group_by(VENT_BSW, VARIABLES) %>% \n    summarise(mean = mean(VALUES),\n              max = max(VALUES),\n              min = min(VALUES)) %>% \n  pivot_wider(names_from = VENT_BSW, values_from = c(mean, max,min), names_sort = FALSE)\n\n\n`summarise()` has grouped output by 'VENT_BSW'. You can override using the\n`.groups` argument.\n\n\nCode\n# View(c_factor_biov)\n\n\n\nAssign a C conversion factor for background and within vents based on biovolume\n\n\n\nCode\npgC_cell_BSW <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$mean_BSW\n\npgC_cell_vent <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$mean_vent\n\npgC_cell_BSW_min <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$min_BSW\n\npgC_cell_vent_min <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$min_vent\n\npgC_cell_BSW_max <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$max_BSW\n\npgC_cell_vent_max <- subset(c_factor_biov, VARIABLES == \"pgC_cell_MD_nodiatom\")$max_vent\n\n\n\nCombine with count table to estimate total standing stock in carbon\n\nIsolate at T0 all the euk cells per ml counts. Then add in the mean, min/max for the pg C per cell, based on the vent vs non-vent.\n\n\nCode\npgC_ml_biov_bysample <- plot_euk_format %>% \n  filter(TimePoint == \"T0\") %>%\n  filter(VARIABLE == \"eukCONC\") %>% \n  mutate(SAMPLE_TYPE_BIN = case_when(\n    NameOrder == \"Background\" ~ \"Non-vent\",\n    NameOrder == \"Plume\" ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  )) %>% \n  mutate(pgC_ml_mean = case_when(\n    SAMPLE_TYPE_BIN == \"Non-vent\" ~ avg_conc * pgC_cell_BSW,\n    SAMPLE_TYPE_BIN == \"Vent\" ~ avg_conc * pgC_cell_vent,\n  )) %>% \n  mutate(pgC_ml_min = case_when(\n    SAMPLE_TYPE_BIN == \"Non-vent\" ~ avg_conc * pgC_cell_BSW_min,\n    SAMPLE_TYPE_BIN == \"Vent\" ~ avg_conc * pgC_cell_vent_min\n  )) %>% \n  mutate(pgC_ml_max = case_when(\n    SAMPLE_TYPE_BIN == \"Non-vent\" ~ avg_conc * pgC_cell_BSW_max,\n    SAMPLE_TYPE_BIN == \"Vent\" ~ avg_conc * pgC_cell_vent_max\n  ))\npgC_ml_biov_bysample\n\n\n                   EXPERIMENT SiteOrder      NameOrder TimePoint EXP_TYPE\n1     Von Damm_Background_Bag  Von Damm     Background        T0      Bag\n2          Von Damm_Plume_Bag  Von Damm          Plume        T0      Bag\n3           Von Damm_X-18_Bag  Von Damm           X-18        T0      Bag\n4   Von Damm_Old Man Tree_IGT  Von Damm   Old Man Tree        T0      IGT\n5     Von Damm_Ravelin #2_Bag  Von Damm     Ravelin #2        T0      Bag\n6     Von Damm_Ravelin #2_IGT  Von Damm     Ravelin #2        T0      IGT\n7  Von Damm_Mustard Stand_Bag  Von Damm  Mustard Stand        T0      Bag\n8    Von Damm_Shrimp Hole_Bag  Von Damm    Shrimp Hole        T0      Bag\n9           Piccard_Plume_Bag   Piccard          Plume        T0      Bag\n10 Piccard_Shrimpocalypse_Bag   Piccard Shrimpocalypse        T0      Bag\n11 Piccard_Shrimpocalypse_IGT   Piccard Shrimpocalypse        T0      IGT\n12 Piccard_Lots 'O Shrimp_Bag   Piccard Lots 'O Shrimp        T0      Bag\n   VARIABLE  avg_conc   SEM_conc Site_Order SAMPLE_TYPE_BIN pgC_ml_mean\n1   eukCONC  91.83773  21.866127   Von Damm        Non-vent    8391.106\n2   eukCONC 157.77468  67.098589   Von Damm        Non-vent   14415.688\n3   eukCONC 314.87222 104.957407   Von Damm            Vent   86989.981\n4   eukCONC 472.30833 122.450309   Von Damm            Vent  130484.971\n5   eukCONC 409.33389  73.470185   Von Damm            Vent  113086.975\n6   eukCONC 620.99799 123.177023   Von Damm            Vent  171563.573\n7   eukCONC 259.76958  28.863287   Von Damm            Vent   71766.734\n8   eukCONC 385.71847   7.871806   Von Damm            Vent  106562.726\n9   eukCONC  79.30115  16.819081    Piccard        Non-vent    7245.654\n10  eukCONC 454.81543         NA    Piccard            Vent  125652.194\n11  eukCONC 454.81543  69.971605    Piccard            Vent  125652.194\n12  eukCONC 230.90630         NA    Piccard            Vent   63792.652\n   pgC_ml_min pgC_ml_max\n1   2595.7077   21900.26\n2   4459.3540   37624.05\n3    261.0534  352958.64\n4    391.5801  529437.96\n5    339.3694  458846.23\n6    514.8553  696112.88\n7    215.3690  291190.88\n8    319.7904  432374.34\n9   2241.3730   18910.70\n10   377.0771  509829.15\n11   377.0771  509829.15\n12   191.4391  258836.34\n\n\n\n\nCode\nby_biovol_plot <- pgC_ml_biov_bysample %>% \n  ggplot(aes(x = NameOrder, y = (pgC_ml_mean/1000))) +\n    geom_point(shape = 21, color = \"black\") + \n    geom_linerange(aes(ymin = (pgC_ml_min/1000), ymax = (pgC_ml_max/1000))) +\n  facet_grid(.~Site_Order, space = \"free\", scales = \"free\") +\n  # coord_flip() +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n       shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"Estimated total biomass: pg C \" ~L^-1),\n         title = \"Carbon pool of protists - derived from biovolume\")\n\n\n**What should I do with replicates?"
  },
  {
    "objectID": "grazing.html#c-biomass-based-on-size-fraction",
    "href": "grazing.html#c-biomass-based-on-size-fraction",
    "title": "Protistan grazing analysis",
    "section": "8.2 C biomass based on size fraction",
    "text": "8.2 C biomass based on size fraction\nDerived from Caron et al. 1995\n\nAssign by size class\n\n\n\nCode\nc_n <- 2.6 # pg C per cell\nc_m <- 138 # pg C per cell\n\n\n\n\nCode\npgC_ml_sizefrac_bysample_tmp <- plot_euk_format %>% \n  filter(TimePoint == \"T0\") %>%\n  filter(VARIABLE != \"eukCONC\") %>% # isolate micro vs. nano\n  mutate(SAMPLE_TYPE_BIN = case_when(\n    NameOrder == \"Background\" ~ \"Non-vent\",\n    NameOrder == \"Plume\" ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  )) %>% \n  mutate(pg_C_cell = case_when(\n    VARIABLE == \"microCONC\" ~ c_m,\n    VARIABLE == \"nanoCONC\" ~ c_n\n  )) %>% \n  mutate(pg_C_ml_TMP = avg_conc * pg_C_cell) %>% \n  group_by(EXPERIMENT, SiteOrder, NameOrder, TimePoint, EXP_TYPE, SAMPLE_TYPE_BIN, Site_Order, VARIABLE) %>% \n  summarise(pg_C_ml = mean(pg_C_ml_TMP))\n\n\n`summarise()` has grouped output by 'EXPERIMENT', 'SiteOrder', 'NameOrder',\n'TimePoint', 'EXP_TYPE', 'SAMPLE_TYPE_BIN', 'Site_Order'. You can override\nusing the `.groups` argument.\n\n\nCode\ntmp2 <- pgC_ml_sizefrac_bysample_tmp %>% \n  group_by(EXPERIMENT, SiteOrder, NameOrder, TimePoint, EXP_TYPE, SAMPLE_TYPE_BIN, Site_Order) %>% \n  summarize(pg_C_ml = sum(pg_C_ml)) %>% \n  add_column(VARIABLE = \"totaleuk\")\n\n\n`summarise()` has grouped output by 'EXPERIMENT', 'SiteOrder', 'NameOrder',\n'TimePoint', 'EXP_TYPE', 'SAMPLE_TYPE_BIN'. You can override using the\n`.groups` argument.\n\n\nCode\npgC_ml_sizefrac_bysample <- rbind(tmp2, pgC_ml_sizefrac_bysample_tmp)\n# pgC_ml_sizefrac_bysample\n\n\n\n\nCode\npgC_ml_sizefrac_bysample %>% \n  group_by(SAMPLE_TYPE_BIN, VARIABLE) %>% \n  summarise(MEAN_pg_C_ml = mean(pg_C_ml),\n            MAX_pg_C_ml = max(pg_C_ml),\n            MIN_pg_C_ml = min(pg_C_ml))\n\n\n`summarise()` has grouped output by 'SAMPLE_TYPE_BIN'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 6 × 5\n# Groups:   SAMPLE_TYPE_BIN [2]\n  SAMPLE_TYPE_BIN VARIABLE  MEAN_pg_C_ml MAX_pg_C_ml MIN_pg_C_ml\n  <chr>           <chr>            <dbl>       <dbl>       <dbl>\n1 Non-vent        microCONC        1481.       3156.          0 \n2 Non-vent        nanoCONC          257.        351.        182.\n3 Non-vent        totaleuk         1738.       3507.        239.\n4 Vent            microCONC        4788.      14484.          0 \n5 Vent            nanoCONC          951.       1524.        600.\n6 Vent            totaleuk         5739.      15439.        600.\n\n\nCode\n# head(pgC_ml_sizefrac_bysample)\n\n\n\n\nCode\nby_sizefrac_plot <- pgC_ml_sizefrac_bysample %>% \n  ggplot(aes(x = NameOrder, y = (pg_C_ml/1000))) +\n    geom_point(color = \"black\", aes(shape = VARIABLE)) + \n    # geom_linerange(aes(ymin = (pgC_ml_min/1000), ymax = (pgC_ml_max/1000))) +\n  facet_grid(.~Site_Order, space = \"free\", scales = \"free\") +\n  # coord_flip() +\n    theme_minimal() +\n    theme(panel.grid.major = element_line(), panel.grid.minor = element_blank(),\n           panel.background = element_blank(), \n           axis.line = element_line(colour = \"black\"), \n           axis.text.x = element_text(color=\"black\", size = 12, \n                                      angle = 45, hjust = 1, vjust = 1), \n           axis.text.y = element_text(color=\"black\", size = 12),\n           axis.title =element_text(color=\"black\", size = 12),\n           axis.ticks = element_line(),\n           strip.text =element_blank(), legend.title = element_blank())+\n    guides(fill = guide_legend(override.aes = list(shape = c(21))),\n       shape = guide_legend(override.aes = list(fill = \"black\"))) +\n    labs(x = \"\", y = bquote(\"Estimated total biomass: pg C \" ~L^-1),\n         title = \"Carbon pool of protists - based on size fraction\")\n\n\nCombined supplementary plot showing two routes of determining total biomass.\n\n\nCode\nby_biovol_plot + by_sizefrac_plot + patchwork::plot_layout(ncol = 1) +\n  plot_annotation(tag_levels = \"a\")"
  },
  {
    "objectID": "grazing.html#compare-total-carbon-biomass---euks",
    "href": "grazing.html#compare-total-carbon-biomass---euks",
    "title": "Protistan grazing analysis",
    "section": "8.3 Compare total carbon biomass - euks",
    "text": "8.3 Compare total carbon biomass - euks\nCompilation table of carbon biomass values for microeukaryotes by sample type and vent field\n\n\nCode\n## carbon biomass derived from biovolume, by sample type\npgC_ml_biov_bysample %>% \n  group_by(SAMPLE_TYPE_BIN)%>% \n  summarise(MEAN_pg_C_ml = mean(pgC_ml_mean),\n            MAX_pg_C_ml = max(pgC_ml_mean),\n            MIN_pg_C_ml = min(pgC_ml_mean)) %>% \n  add_column(ORIGIN = \"bybiovolume\")\n\n\n# A tibble: 2 × 5\n  SAMPLE_TYPE_BIN MEAN_pg_C_ml MAX_pg_C_ml MIN_pg_C_ml ORIGIN     \n  <chr>                  <dbl>       <dbl>       <dbl> <chr>      \n1 Non-vent              10017.      14416.       7246. bybiovolume\n2 Vent                 110617.     171564.      63793. bybiovolume\n\n\nCode\n## carbon biomass derived from biovolume, by vent field (vent only)\npgC_ml_biov_bysample %>% \n  filter(SAMPLE_TYPE_BIN == \"Vent\") %>%\n  group_by(Site_Order)%>% \n  summarise(MEAN_pg_C_ml = mean(pgC_ml_mean),\n            MAX_pg_C_ml = max(pgC_ml_mean),\n            MIN_pg_C_ml = min(pgC_ml_mean)) %>% \n  add_column(ORIGIN = \"bybiovolume\")\n\n\n# A tibble: 2 × 5\n  Site_Order MEAN_pg_C_ml MAX_pg_C_ml MIN_pg_C_ml ORIGIN     \n  <fct>             <dbl>       <dbl>       <dbl> <chr>      \n1 Von Damm        113409.     171564.      71767. bybiovolume\n2 Piccard         105032.     125652.      63793. bybiovolume\n\n\nCode\n## Carbon biomass estimates from sample type and size fraction\npgC_ml_sizefrac_bysample %>% \n  group_by(SAMPLE_TYPE_BIN, VARIABLE) %>% \n  summarise(MEAN_pg_C_ml = mean(pg_C_ml),\n            MAX_pg_C_ml = max(pg_C_ml),\n            MIN_pg_C_ml = min(pg_C_ml)) %>% \n  add_column(ORIGIN = \"sizefrac\")\n\n\n`summarise()` has grouped output by 'SAMPLE_TYPE_BIN'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 6 × 6\n# Groups:   SAMPLE_TYPE_BIN [2]\n  SAMPLE_TYPE_BIN VARIABLE  MEAN_pg_C_ml MAX_pg_C_ml MIN_pg_C_ml ORIGIN  \n  <chr>           <chr>            <dbl>       <dbl>       <dbl> <chr>   \n1 Non-vent        microCONC        1481.       3156.          0  sizefrac\n2 Non-vent        nanoCONC          257.        351.        182. sizefrac\n3 Non-vent        totaleuk         1738.       3507.        239. sizefrac\n4 Vent            microCONC        4788.      14484.          0  sizefrac\n5 Vent            nanoCONC          951.       1524.        600. sizefrac\n6 Vent            totaleuk         5739.      15439.        600. sizefrac\n\n\nCode\n## Carbon biomass estimates from vent sites only, by vent field and size fraction\npgC_ml_sizefrac_bysample %>% \n  filter(SAMPLE_TYPE_BIN == \"Vent\") %>% \n  group_by(Site_Order, VARIABLE) %>% \n  summarise(MEAN_pg_C_ml = mean(pg_C_ml),\n            MAX_pg_C_ml = max(pg_C_ml),\n            MIN_pg_C_ml = min(pg_C_ml)) %>% \n  add_column(ORIGIN = \"sizefrac\")\n\n\n`summarise()` has grouped output by 'Site_Order'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 6\n# Groups:   Site_Order [2]\n  Site_Order VARIABLE  MEAN_pg_C_ml MAX_pg_C_ml MIN_pg_C_ml ORIGIN  \n  <fct>      <chr>            <dbl>       <dbl>       <dbl> <chr>   \n1 Von Damm   microCONC        5572.      14484.          0  sizefrac\n2 Von Damm   nanoCONC          962.       1524.        675. sizefrac\n3 Von Damm   totaleuk         6535.      15439.        675. sizefrac\n4 Piccard    microCONC        3219.       4828.          0  sizefrac\n5 Piccard    nanoCONC          928.       1092.        600. sizefrac\n6 Piccard    totaleuk         4147.       5920.        600. sizefrac"
  },
  {
    "objectID": "grazing.html#compare-biovolumes-from-literature-to-measured-in-this-study",
    "href": "grazing.html#compare-biovolumes-from-literature-to-measured-in-this-study",
    "title": "Protistan grazing analysis",
    "section": "8.4 Compare biovolumes from literature to measured in this study",
    "text": "8.4 Compare biovolumes from literature to measured in this study\nCompare with Menden-Deuer and Lessard 2000, Table 2 - using only the heterotrophic species measured. Based on Table 2, the min volume was 4745 and the maximum was 1.2 x10^7 µm^3. Carbon content was measured at pg per cell, this was 469.48-35,339 pg per cell.\nImport the heterotroph species volume and carbon content to compare to my measured values. Compare to md-lessard (Supplementary)\n\n\nCode\nc_prev <- read.delim(\"input-data/md-lessard-2000.txt\") # Table 2, heterotrophs only\n# c_prev\n# biov\n# combine and plot\ncarbon_compare <- c_prev %>% \n  add_column(source = \"Menden-Deuer Lessard\") %>% \n  select(source, Volume = vol, pgC_cell) %>% \n  rbind(biov_calc %>% add_column(source = \"MCR\") %>% select(source, Volume = BIOVOLUME, pgC_cell = pgC_cell_MD_nodiatom)) %>% \n    ggplot(aes(x = Volume, y = pgC_cell, fill = source)) +\n      geom_point(aes(fill = source), shape = 23, color = \"black\", size = 3) +\n      scale_y_log10() + scale_x_log10() +\n      labs(title = \"Compare literature to measured cell volume & C content\",\n           x = bquote(\"Volume\" ~µm^3),\n           y = bquote(\"pg C\" ~cell^-1)) +\n      theme_bw() + theme(legend.title = element_blank(),\n                         axis.title = element_text(size = 14),\n                         axis.text = element_text(size = 14),\n                         legend.text = element_text(size = 14))\n\ncarbon_compare\n\n\n\n\n\nUpon comparison, the measured carbon content was much lower from the grazing experiments. This makes sense, as I am looking at preserved specimen and a smaller total number of cells. AND the deep-sea protist cell sizes may be smaller overall."
  },
  {
    "objectID": "grazing.html#incorporate-carbon-biomass-of-prey-and-grazing-rate",
    "href": "grazing.html#incorporate-carbon-biomass-of-prey-and-grazing-rate",
    "title": "Protistan grazing analysis",
    "section": "9.1 Incorporate carbon biomass of prey and grazing rate",
    "text": "9.1 Incorporate carbon biomass of prey and grazing rate\n\n\nCode\n## Carbon consumed based on clearance rate\ncarbon_consumed <- est_prok_carbon %>% \n  filter(fgC_ml == \"MOR_fgC_ml\") %>% #use only value from Morono et al.\n  add_column(ugC_cell = (bac_carbon_Mor_fg * 0.001)) %>% \n  select(FIELD, NAME, EXP, PROK_ml, GRAZING_EFFECT_hr, CLEARANCE_RATE_ml, ugC_cell, ugC_ml = value) %>% \n  mutate(ugC_pergrazer_CLEARANCE = ugC_ml * CLEARANCE_RATE_ml,\n         ugC_perml_perhr = ugC_cell * GRAZING_EFFECT_hr)\n\n\nSummary of carbon consumed:\n\n\nCode\ncarbon_consumed %>% \n  mutate(SAMPLE_TYPE_BIN = case_when(\n    NAME == \"Background\" ~ \"Non-vent\",\n    NAME == \"Plume\" ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  )) %>%\n  group_by(SAMPLE_TYPE_BIN) %>% \n  summarise(MEAN_ugC_pergrazer_CLEARANCE = mean(ugC_pergrazer_CLEARANCE),\n            MEAN_ugC_perml_perhr = mean(ugC_perml_perhr),\n            MAX_ugC_pergrazer_CLEARANCE = max(ugC_pergrazer_CLEARANCE),\n            MAX_ugC_perml_perhr = max(ugC_perml_perhr),\n            MIN_ugC_pergrazer_CLEARANCE = min(ugC_pergrazer_CLEARANCE),\n            MIN_ugC_perml_perhr = min(ugC_perml_perhr))\n\n\n# A tibble: 2 × 7\n  SAMPLE_TYPE_BIN MEAN_ugC_pergrazer_C…¹ MEAN_…² MAX_u…³ MAX_u…⁴ MIN_u…⁵ MIN_u…⁶\n  <chr>                            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Non-vent                          60.0    5.60    119.    10.9    13.1    2.07\n2 Vent                             750.   358.     3863.  1757.      0      0   \n# … with abbreviated variable names ¹​MEAN_ugC_pergrazer_CLEARANCE,\n#   ²​MEAN_ugC_perml_perhr, ³​MAX_ugC_pergrazer_CLEARANCE, ⁴​MAX_ugC_perml_perhr,\n#   ⁵​MIN_ugC_pergrazer_CLEARANCE, ⁶​MIN_ugC_perml_perhr\n\n\nCode\ncarbon_consumed %>% \n  mutate(SAMPLE_TYPE_BIN = case_when(\n    NAME == \"Background\" ~ \"Non-vent\",\n    NAME == \"Plume\" ~ \"Non-vent\",\n    TRUE ~ \"Vent\"\n  )) %>%\n  filter(SAMPLE_TYPE_BIN == \"Vent\") %>% \n  group_by(FIELD) %>% \n  summarise(MEAN_ugC_pergrazer_CLEARANCE = mean(ugC_pergrazer_CLEARANCE),\n            MEAN_ugC_perml_perhr = mean(ugC_perml_perhr),\n            MAX_ugC_pergrazer_CLEARANCE = max(ugC_pergrazer_CLEARANCE),\n            MAX_ugC_perml_perhr = max(ugC_perml_perhr),\n            MIN_ugC_pergrazer_CLEARANCE = min(ugC_pergrazer_CLEARANCE),\n            MIN_ugC_perml_perhr = min(ugC_perml_perhr))\n\n\n# A tibble: 2 × 7\n  FIELD    MEAN_ugC_pergrazer_CLEARANCE MEAN_u…¹ MAX_u…² MAX_u…³ MIN_u…⁴ MIN_u…⁵\n  <chr>                           <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Piccard                         1666.     758.   3863.   1757.       0       0\n2 Von Damm                         358.     186.   1056.    656.       0       0\n# … with abbreviated variable names ¹​MEAN_ugC_perml_perhr,\n#   ²​MAX_ugC_pergrazer_CLEARANCE, ³​MAX_ugC_perml_perhr,\n#   ⁴​MIN_ugC_pergrazer_CLEARANCE, ⁵​MIN_ugC_perml_perhr"
  },
  {
    "objectID": "grazing.html#mcr-and-gr-data-as-input",
    "href": "grazing.html#mcr-and-gr-data-as-input",
    "title": "Protistan grazing analysis",
    "section": "16.1 MCR and GR data as input",
    "text": "16.1 MCR and GR data as input\n\n\nCode\nlibrary(broom)\n# ?pivot_longer\n# e IGT\nhead(all_vents)\n\n\n     FIELD           NAME                 SAMPLE EXP   PROK_ml    EUK_ml\n1 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n2 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n3 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n4 Von Damm          Plume               VD-Plume Bag  16478.31 157.77468\n5  Piccard          Plume          Piccard-Plume Bag  51429.13  79.30115\n6  Piccard Shrimpocalypse Piccard-Shrimpocalypse Bag 238585.68 454.81543\n  GRAZING_EFFECT_hr GRAZING_EFFECT_hr_min GRAZING_EFFECT_hr_max\n1         127.06388              96.81058             157.31719\n2         127.06388              96.81058             157.31719\n3         127.06388              96.81058             157.31719\n4          24.02685              13.80868              34.24501\n5          44.25930              34.87229              53.64630\n6        6006.74315                    NA                    NA\n  BAC_TURNOVER_PERC Highest.Temp pH Mg H2S H2 CH4 SAMPLE_TYPE\n1          8.048465        4.181 NA NA  NA NA  NA  Background\n2          8.048465        4.100 NA NA  NA NA  NA  Background\n3          8.048465        4.000 NA NA  NA NA  NA  Background\n4          3.499414        4.230 NA NA  NA NA  NA  Background\n5          2.065411        4.722 NA NA  NA NA  NA  Background\n6         60.423507       90.000 NA NA  NA NA  NA        Vent\n\n\nCode\nregression_input <- all_vents %>%\n  # filter(!(SAMPLE == \"Piccard-Shrimpocalypse\" & EXP == \"IGT\")) %>%\n  filter(!is.na(Highest.Temp)) %>%\n    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>%\n  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>%\n  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = \"RATE\", values_to = \"RATE_VALUE\") %>%\n  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = \"PARAMS\", values_to = \"PARAMS_VALUE\") %>%\n  data.frame\n\nregression_tmp <- regression_input %>%\n  # Set up the linear regression\n  group_by(RATE, PARAMS) %>%\n  nest(-RATE, -PARAMS) %>%\n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),\n    tidied = map(lm_fit, tidy)) %>%\n  unnest(tidied) %>%\n  select(RATE, PARAMS,\n    term, estimate) %>%\n  pivot_wider(names_from = term, values_from = estimate) %>%\n  select(everything(), SLOPE = PARAMS_VALUE) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nCode\nregression_results <- regression_input %>%\n  group_by(RATE, PARAMS) %>%\n  nest(-RATE, -PARAMS) %>%\n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),\n    glanced = map(lm_fit, glance)) %>%\n  unnest(glanced) %>%\n  select(RATE, PARAMS, r.squared, adj.r.squared) %>%\n  right_join(regression_tmp) %>%\n  right_join(regression_input) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nJoining, by = c(\"RATE\", \"PARAMS\")\nJoining, by = c(\"RATE\", \"PARAMS\")\n\n\nCode\n# View(regression_results)\n\n\nPlot results from regression\n\n\nCode\nregression_results %>%\n  # filter(RATE == \"GRAZING_EFFECT_hr\") %>%\n  # filter(PARAMS == \"TEMP\") %>%\n  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +\n    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = \"black\", linetype = \"dashed\", size = 0.5) +\n    geom_point(color = \"black\", aes(shape = SAMPLE_TYPE, fill = FIELD)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#476AA7\",\"#7299CE\", \"#A2937A\")) +\n    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = \"free\", ncol = 5,\n             strip.position = \"bottom\", labeller = label_parsed) +\n  theme_bw() +\n  theme(\n    strip.background = element_blank(),\n    strip.placement = \"outside\",\n    strip.text = element_text(color = \"black\", size = 10),\n    axis.title = element_text(color = \"black\", size = 10),\n    legend.title = element_blank()) # +\n\n\nWarning: Removed 16 rows containing missing values (geom_point).\n\n\n\n\n\nCode\nlabs(y = bquote(\"Cells \"~mL^-1 ~hr^-1), x = \"Temperature (C)\")\n\n\n$y\n\"Cells \" ~ mL^-1 ~ hr^-1\n\n$x\n[1] \"Temperature (C)\"\n\nattr(,\"class\")\n[1] \"labels\""
  },
  {
    "objectID": "grazing.html#mcr-only",
    "href": "grazing.html#mcr-only",
    "title": "Protistan grazing analysis",
    "section": "16.2 MCR only",
    "text": "16.2 MCR only\nrepeat MCR only\n\n\nCode\nlibrary(broom)\n# ?pivot_longer\n# unique(all_vents$FIELD)\nregression_input <- all_vents %>% \n  filter(!(FIELD == \"Gorda Ridge\")) %>% \n  # filter(!(SAMPLE == \"Piccard-Shrimpocalypse\" & EXP == \"IGT\")) %>% \n  filter(!is.na(Highest.Temp)) %>% \n    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>% \n  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>% \n  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = \"RATE\", values_to = \"RATE_VALUE\") %>% \n  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = \"PARAMS\", values_to = \"PARAMS_VALUE\") %>% \n  data.frame\n\nregression_tmp <- regression_input %>% \n  # Set up the linear regression\n  group_by(RATE, PARAMS) %>% \n  nest(-RATE, -PARAMS) %>% \n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)), \n    tidied = map(lm_fit, tidy)) %>% \n  unnest(tidied) %>% \n  select(RATE, PARAMS, \n    term, estimate) %>% \n  pivot_wider(names_from = term, values_from = estimate) %>% \n  select(everything(), SLOPE = PARAMS_VALUE) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nCode\nregression_results_mcr <- regression_input %>% \n  group_by(RATE, PARAMS) %>% \n  nest(-RATE, -PARAMS) %>% \n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),\n    glanced = map(lm_fit, glance)) %>% \n  unnest(glanced) %>% \n  select(RATE, PARAMS, r.squared, adj.r.squared) %>% \n  right_join(regression_tmp) %>%\n  right_join(regression_input) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nJoining, by = c(\"RATE\", \"PARAMS\")\nJoining, by = c(\"RATE\", \"PARAMS\")\n\n\nCode\n# View(regression_results_mcr)\n\n\nPlot results from regression\n\n\nCode\nregression_results_mcr %>% \n  # filter(RATE == \"GRAZING_EFFECT_hr\") %>%\n  # filter(PARAMS == \"TEMP\") %>% \n  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +\n    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = \"black\", linetype = \"dashed\", size = 0.5) +\n    geom_point(color = \"black\", aes(shape = SAMPLE_TYPE, fill = FIELD)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#476AA7\",\"#7299CE\", \"#A2937A\")) +\n    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = \"free\", ncol = 5,\n             strip.position = \"bottom\", labeller = label_parsed) +\n  theme_bw() +\n  theme(\n    strip.background = element_blank(),\n    strip.placement = \"outside\",\n    strip.text = element_text(color = \"black\", size = 10),\n    axis.title = element_text(color = \"black\", size = 10),\n    legend.title = element_blank()) # +\n\n\n\n\n\nCode\n  # labs(y = bquote(\"Cells \"~mL^-1 ~hr^-1), x = \"Temperature (C)\")"
  },
  {
    "objectID": "grazing.html#mcr-vent-sites-only",
    "href": "grazing.html#mcr-vent-sites-only",
    "title": "Protistan grazing analysis",
    "section": "16.3 MCR vent sites only",
    "text": "16.3 MCR vent sites only\nRepeat with only vent sites & remove undetected grazing.\n\n\nCode\n# head(all_vents)\n# range(all_vents$GRAZING_EFFECT_hr)\n\n\n\n\nCode\nlibrary(broom)\n# ?pivot_longer\n# unique(all_vents$FIELD)\nregression_input <- all_vents %>% \n  filter(!(FIELD == \"Gorda Ridge\")) %>% \n  filter(!(NAME == \"Background\")) %>% filter(!(NAME == \"Plume\")) %>% \n  filter(GRAZING_EFFECT_hr > 0) %>% \n  # filter(!(SAMPLE == \"Piccard-Shrimpocalypse\" & EXP == \"IGT\")) %>% \n  filter(!is.na(Highest.Temp)) %>% \n    select(FIELD, NAME, SAMPLE, SAMPLE_TYPE, EXP, PROK_ml, EUK_ml, GRAZING_EFFECT_hr, BAC_TURNOVER_PERC, TEMP = Highest.Temp) %>% \n  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml)) %>% \n  pivot_longer(cols = c(GRAZING_EFFECT_hr, BAC_TURNOVER_PERC), names_to = \"RATE\", values_to = \"RATE_VALUE\") %>% \n  pivot_longer(cols = c(PROK_ml, EUK_ml, PROK_EUK_RATIO, TEMP), names_to = \"PARAMS\", values_to = \"PARAMS_VALUE\") %>% \n  data.frame\n\nregression_tmp <- regression_input %>% \n  # Set up the linear regression\n  group_by(RATE, PARAMS) %>% \n  nest(-RATE, -PARAMS) %>% \n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)), \n    tidied = map(lm_fit, tidy)) %>% \n  unnest(tidied) %>% \n  select(RATE, PARAMS, \n    term, estimate) %>% \n  pivot_wider(names_from = term, values_from = estimate) %>% \n  select(everything(), SLOPE = PARAMS_VALUE) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nCode\nregression_results_vent <- regression_input %>% \n  group_by(RATE, PARAMS) %>% \n  nest(-RATE, -PARAMS) %>% \n  mutate(lm_fit = map(data, ~lm(RATE_VALUE ~ PARAMS_VALUE, data = .)),\n    glanced = map(lm_fit, glance)) %>% \n  unnest(glanced) %>% \n  select(RATE, PARAMS, r.squared, adj.r.squared) %>% \n  right_join(regression_tmp) %>%\n  right_join(regression_input) %>%\n  data.frame\n\n\nWarning: All elements of `...` must be named.\nDid you want `data = c(-RATE, -PARAMS)`?\n\n\nJoining, by = c(\"RATE\", \"PARAMS\")\nJoining, by = c(\"RATE\", \"PARAMS\")\n\n\nCode\n# View(regression_results_vent)\n\n\nPlot results from regression\n\n\nCode\nregression_results_vent %>% \n  # filter(RATE == \"GRAZING_EFFECT_hr\") %>%\n  # filter(PARAMS == \"TEMP\") %>% \n  ggplot(aes(x = PARAMS_VALUE, y = RATE_VALUE, shape = SAMPLE_TYPE, fill = FIELD)) +\n    geom_abline(aes(slope = SLOPE, intercept = `X.Intercept.`), color = \"black\", linetype = \"dashed\", size = 0.5) +\n    geom_point(color = \"black\", aes(shape = SAMPLE_TYPE, fill = FIELD)) +\n    scale_shape_manual(values = c(21, 24)) +\n    scale_fill_manual(values = c(\"#476AA7\",\"#7299CE\", \"#A2937A\")) +\n    facet_wrap(PARAMS ~ RATE + round(r.squared, 3), scales = \"free\", ncol = 5,\n             strip.position = \"bottom\", labeller = label_parsed) +\n  theme_bw() +\n  theme(\n    strip.background = element_blank(),\n    strip.placement = \"outside\",\n    strip.text = element_text(color = \"black\", size = 10),\n    axis.title = element_text(color = \"black\", size = 10),\n    legend.title = element_blank()) # +\n\n\n\n\n\nCode\n  # labs(y = bquote(\"Cells \"~mL^-1 ~hr^-1), x = \"Temperature (C)\")\n\n\nRegression thoughts: Unremarkable r squared values (numbers at the bottom of each plot). Some trends, mainly associated with temperature.\nBacterial abundance typically increases with temperature (White et al. 1991) - which could ultimately increase bacterial ingestion rate and total protist cells. But at this type of niche environment, I hypothesize that there is a trend but threshold of not detected grazing under certain conditions.\nIf euk per ml numbers are high, but we see lower grazing rates, could this be competition? Curds and Cockburn 1968. Additionally with temperature… in Vaque et al GRF (specific grazing rates of flagellates) increased with temperature, but overall grazing rate reached a plateau at 18C. Does this mean that temperature will be an important factor depending on the community diversity?\n\n\nCode\nhead(all_vents)\n\n\n     FIELD           NAME                 SAMPLE EXP   PROK_ml    EUK_ml\n1 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n2 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n3 Von Damm     Background                 VD-BSW Bag  37889.62  91.83773\n4 Von Damm          Plume               VD-Plume Bag  16478.31 157.77468\n5  Piccard          Plume          Piccard-Plume Bag  51429.13  79.30115\n6  Piccard Shrimpocalypse Piccard-Shrimpocalypse Bag 238585.68 454.81543\n  GRAZING_EFFECT_hr GRAZING_EFFECT_hr_min GRAZING_EFFECT_hr_max\n1         127.06388              96.81058             157.31719\n2         127.06388              96.81058             157.31719\n3         127.06388              96.81058             157.31719\n4          24.02685              13.80868              34.24501\n5          44.25930              34.87229              53.64630\n6        6006.74315                    NA                    NA\n  BAC_TURNOVER_PERC Highest.Temp pH Mg H2S H2 CH4 SAMPLE_TYPE\n1          8.048465        4.181 NA NA  NA NA  NA  Background\n2          8.048465        4.100 NA NA  NA NA  NA  Background\n3          8.048465        4.000 NA NA  NA NA  NA  Background\n4          3.499414        4.230 NA NA  NA NA  NA  Background\n5          2.065411        4.722 NA NA  NA NA  NA  Background\n6         60.423507       90.000 NA NA  NA NA  NA        Vent\n\n\nCode\nallvent_data <- all_vents %>% \n  mutate(PROK_EUK_RATIO = (PROK_ml/EUK_ml))\n# head(allvent_data)\n\n\nFunction to plot results by two parameters.\n\n\nCode\ntwo_params <- function(df, x_var, y_var, x_title, y_title){\n  X_VAR <- enquo(x_var)\n  Y_VAR <- enquo(y_var)\n  df %>% \n  select(FIELD, NAME, SAMPLE, EXP, X = !!X_VAR, Y = !!Y_VAR) %>% \n  distinct() %>% \n  ggplot(aes(x = X, y = Y)) +\n    geom_point(size = 3, shape = 21, color = \"black\", aes(fill = FIELD)) +\n    geom_abline(slope = 1, intercept = 0) +\n    theme_minimal() +\n    labs(x = x_title, y = y_title)\n}"
  }
]